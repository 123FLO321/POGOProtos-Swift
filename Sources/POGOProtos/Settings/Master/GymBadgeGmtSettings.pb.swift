// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/GymBadgeGmtSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Settings_Master_GymBadgeGmtSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var target: [Int32] = []

  var battleWinningScorePerDefenderCp: Float = 0

  var gymDefendingScorePerMinute: Float = 0

  var berryFeedingScore: Int32 = 0

  var pokemonDeployScore: Int32 = 0

  var raidBattleWinningScore: Int32 = 0

  var loseAllBattlesScore: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_GymBadgeGmtSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GymBadgeGmtSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .standard(proto: "battle_winning_score_per_defender_cp"),
    3: .standard(proto: "gym_defending_score_per_minute"),
    4: .standard(proto: "berry_feeding_score"),
    5: .standard(proto: "pokemon_deploy_score"),
    6: .standard(proto: "raid_battle_winning_score"),
    7: .standard(proto: "lose_all_battles_score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt32Field(value: &self.target)
      case 2: try decoder.decodeSingularFloatField(value: &self.battleWinningScorePerDefenderCp)
      case 3: try decoder.decodeSingularFloatField(value: &self.gymDefendingScorePerMinute)
      case 4: try decoder.decodeSingularInt32Field(value: &self.berryFeedingScore)
      case 5: try decoder.decodeSingularInt32Field(value: &self.pokemonDeployScore)
      case 6: try decoder.decodeSingularInt32Field(value: &self.raidBattleWinningScore)
      case 7: try decoder.decodeSingularInt32Field(value: &self.loseAllBattlesScore)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.target.isEmpty {
      try visitor.visitPackedInt32Field(value: self.target, fieldNumber: 1)
    }
    if self.battleWinningScorePerDefenderCp != 0 {
      try visitor.visitSingularFloatField(value: self.battleWinningScorePerDefenderCp, fieldNumber: 2)
    }
    if self.gymDefendingScorePerMinute != 0 {
      try visitor.visitSingularFloatField(value: self.gymDefendingScorePerMinute, fieldNumber: 3)
    }
    if self.berryFeedingScore != 0 {
      try visitor.visitSingularInt32Field(value: self.berryFeedingScore, fieldNumber: 4)
    }
    if self.pokemonDeployScore != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonDeployScore, fieldNumber: 5)
    }
    if self.raidBattleWinningScore != 0 {
      try visitor.visitSingularInt32Field(value: self.raidBattleWinningScore, fieldNumber: 6)
    }
    if self.loseAllBattlesScore != 0 {
      try visitor.visitSingularInt32Field(value: self.loseAllBattlesScore, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Settings_Master_GymBadgeGmtSettings, rhs: POGOProtos_Settings_Master_GymBadgeGmtSettings) -> Bool {
    if lhs.target != rhs.target {return false}
    if lhs.battleWinningScorePerDefenderCp != rhs.battleWinningScorePerDefenderCp {return false}
    if lhs.gymDefendingScorePerMinute != rhs.gymDefendingScorePerMinute {return false}
    if lhs.berryFeedingScore != rhs.berryFeedingScore {return false}
    if lhs.pokemonDeployScore != rhs.pokemonDeployScore {return false}
    if lhs.raidBattleWinningScore != rhs.raidBattleWinningScore {return false}
    if lhs.loseAllBattlesScore != rhs.loseAllBattlesScore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
