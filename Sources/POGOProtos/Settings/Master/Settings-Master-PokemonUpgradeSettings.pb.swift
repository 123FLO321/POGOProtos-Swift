// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/PokemonUpgradeSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_PokemonUpgradeSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var upgradesPerLevel: Int32 = 0

  public var allowedLevelsAbovePlayer: Int32 = 0

  public var candyCost: [Int32] = []

  public var stardustCost: [Int32] = []

  public var shadowStardustMultiplier: Float = 0

  public var shadowCandyMultiplier: Float = 0

  public var purifiedStardustMultiplier: Float = 0

  public var purifiedCandyMultiplier: Float = 0

  public var maxNormalUpgradeLevel: Int32 = 0

  public var defaultCpBoostAdditionalLevel: Int32 = 0

  public var xlCandyMinPlayerLevel: Int32 = 0

  public var xlCandyCost: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_PokemonUpgradeSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PokemonUpgradeSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "upgrades_per_level"),
    2: .standard(proto: "allowed_levels_above_player"),
    3: .standard(proto: "candy_cost"),
    4: .standard(proto: "stardust_cost"),
    5: .standard(proto: "shadow_stardust_multiplier"),
    6: .standard(proto: "shadow_candy_multiplier"),
    7: .standard(proto: "purified_stardust_multiplier"),
    8: .standard(proto: "purified_candy_multiplier"),
    9: .standard(proto: "max_normal_upgrade_level"),
    10: .standard(proto: "default_cp_boost_additional_level"),
    11: .standard(proto: "xl_candy_min_player_level"),
    12: .standard(proto: "xl_candy_cost"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.upgradesPerLevel) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.allowedLevelsAbovePlayer) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.candyCost) }()
      case 4: try { try decoder.decodeRepeatedInt32Field(value: &self.stardustCost) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.shadowStardustMultiplier) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.shadowCandyMultiplier) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.purifiedStardustMultiplier) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.purifiedCandyMultiplier) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.maxNormalUpgradeLevel) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.defaultCpBoostAdditionalLevel) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.xlCandyMinPlayerLevel) }()
      case 12: try { try decoder.decodeRepeatedInt32Field(value: &self.xlCandyCost) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.upgradesPerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.upgradesPerLevel, fieldNumber: 1)
    }
    if self.allowedLevelsAbovePlayer != 0 {
      try visitor.visitSingularInt32Field(value: self.allowedLevelsAbovePlayer, fieldNumber: 2)
    }
    if !self.candyCost.isEmpty {
      try visitor.visitPackedInt32Field(value: self.candyCost, fieldNumber: 3)
    }
    if !self.stardustCost.isEmpty {
      try visitor.visitPackedInt32Field(value: self.stardustCost, fieldNumber: 4)
    }
    if self.shadowStardustMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.shadowStardustMultiplier, fieldNumber: 5)
    }
    if self.shadowCandyMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.shadowCandyMultiplier, fieldNumber: 6)
    }
    if self.purifiedStardustMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.purifiedStardustMultiplier, fieldNumber: 7)
    }
    if self.purifiedCandyMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.purifiedCandyMultiplier, fieldNumber: 8)
    }
    if self.maxNormalUpgradeLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxNormalUpgradeLevel, fieldNumber: 9)
    }
    if self.defaultCpBoostAdditionalLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultCpBoostAdditionalLevel, fieldNumber: 10)
    }
    if self.xlCandyMinPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.xlCandyMinPlayerLevel, fieldNumber: 11)
    }
    if !self.xlCandyCost.isEmpty {
      try visitor.visitPackedInt32Field(value: self.xlCandyCost, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_PokemonUpgradeSettings, rhs: POGOProtos_Settings_Master_PokemonUpgradeSettings) -> Bool {
    if lhs.upgradesPerLevel != rhs.upgradesPerLevel {return false}
    if lhs.allowedLevelsAbovePlayer != rhs.allowedLevelsAbovePlayer {return false}
    if lhs.candyCost != rhs.candyCost {return false}
    if lhs.stardustCost != rhs.stardustCost {return false}
    if lhs.shadowStardustMultiplier != rhs.shadowStardustMultiplier {return false}
    if lhs.shadowCandyMultiplier != rhs.shadowCandyMultiplier {return false}
    if lhs.purifiedStardustMultiplier != rhs.purifiedStardustMultiplier {return false}
    if lhs.purifiedCandyMultiplier != rhs.purifiedCandyMultiplier {return false}
    if lhs.maxNormalUpgradeLevel != rhs.maxNormalUpgradeLevel {return false}
    if lhs.defaultCpBoostAdditionalLevel != rhs.defaultCpBoostAdditionalLevel {return false}
    if lhs.xlCandyMinPlayerLevel != rhs.xlCandyMinPlayerLevel {return false}
    if lhs.xlCandyCost != rhs.xlCandyCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
