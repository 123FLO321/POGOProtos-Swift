// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/Pokemon/EncounterAttributes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_Pokemon_EncounterAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var baseCaptureRate: Float {
    get {return _storage._baseCaptureRate}
    set {_uniqueStorage()._baseCaptureRate = newValue}
  }

  public var baseFleeRate: Float {
    get {return _storage._baseFleeRate}
    set {_uniqueStorage()._baseFleeRate = newValue}
  }

  public var collisionRadiusM: Float {
    get {return _storage._collisionRadiusM}
    set {_uniqueStorage()._collisionRadiusM = newValue}
  }

  public var collisionHeightM: Float {
    get {return _storage._collisionHeightM}
    set {_uniqueStorage()._collisionHeightM = newValue}
  }

  public var collisionHeadRadiusM: Float {
    get {return _storage._collisionHeadRadiusM}
    set {_uniqueStorage()._collisionHeadRadiusM = newValue}
  }

  public var movementType: POGOProtos_Enums_PokemonMovementType {
    get {return _storage._movementType}
    set {_uniqueStorage()._movementType = newValue}
  }

  public var movementTimerS: Float {
    get {return _storage._movementTimerS}
    set {_uniqueStorage()._movementTimerS = newValue}
  }

  public var jumpTimeS: Float {
    get {return _storage._jumpTimeS}
    set {_uniqueStorage()._jumpTimeS = newValue}
  }

  public var attackTimerS: Float {
    get {return _storage._attackTimerS}
    set {_uniqueStorage()._attackTimerS = newValue}
  }

  public var bonusCandyCaptureReward: Int32 {
    get {return _storage._bonusCandyCaptureReward}
    set {_uniqueStorage()._bonusCandyCaptureReward = newValue}
  }

  public var bonusStardustCaptureReward: Int32 {
    get {return _storage._bonusStardustCaptureReward}
    set {_uniqueStorage()._bonusStardustCaptureReward = newValue}
  }

  public var attackProbability: Float {
    get {return _storage._attackProbability}
    set {_uniqueStorage()._attackProbability = newValue}
  }

  public var dodgeProbability: Float {
    get {return _storage._dodgeProbability}
    set {_uniqueStorage()._dodgeProbability = newValue}
  }

  public var dodgeDurationS: Float {
    get {return _storage._dodgeDurationS}
    set {_uniqueStorage()._dodgeDurationS = newValue}
  }

  public var dodgeDistance: Float {
    get {return _storage._dodgeDistance}
    set {_uniqueStorage()._dodgeDistance = newValue}
  }

  public var cameraDistance: Float {
    get {return _storage._cameraDistance}
    set {_uniqueStorage()._cameraDistance = newValue}
  }

  public var minPokemonActionFrequencyS: Float {
    get {return _storage._minPokemonActionFrequencyS}
    set {_uniqueStorage()._minPokemonActionFrequencyS = newValue}
  }

  public var maxPokemonActionFrequencyS: Float {
    get {return _storage._maxPokemonActionFrequencyS}
    set {_uniqueStorage()._maxPokemonActionFrequencyS = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master.Pokemon"

extension POGOProtos_Settings_Master_Pokemon_EncounterAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncounterAttributes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_capture_rate"),
    2: .standard(proto: "base_flee_rate"),
    3: .standard(proto: "collision_radius_m"),
    4: .standard(proto: "collision_height_m"),
    5: .standard(proto: "collision_head_radius_m"),
    6: .standard(proto: "movement_type"),
    7: .standard(proto: "movement_timer_s"),
    8: .standard(proto: "jump_time_s"),
    9: .standard(proto: "attack_timer_s"),
    10: .standard(proto: "bonus_candy_capture_reward"),
    11: .standard(proto: "bonus_stardust_capture_reward"),
    12: .standard(proto: "attack_probability"),
    13: .standard(proto: "dodge_probability"),
    14: .standard(proto: "dodge_duration_s"),
    15: .standard(proto: "dodge_distance"),
    16: .standard(proto: "camera_distance"),
    17: .standard(proto: "min_pokemon_action_frequency_s"),
    18: .standard(proto: "max_pokemon_action_frequency_s"),
  ]

  fileprivate class _StorageClass {
    var _baseCaptureRate: Float = 0
    var _baseFleeRate: Float = 0
    var _collisionRadiusM: Float = 0
    var _collisionHeightM: Float = 0
    var _collisionHeadRadiusM: Float = 0
    var _movementType: POGOProtos_Enums_PokemonMovementType = .movementStatic
    var _movementTimerS: Float = 0
    var _jumpTimeS: Float = 0
    var _attackTimerS: Float = 0
    var _bonusCandyCaptureReward: Int32 = 0
    var _bonusStardustCaptureReward: Int32 = 0
    var _attackProbability: Float = 0
    var _dodgeProbability: Float = 0
    var _dodgeDurationS: Float = 0
    var _dodgeDistance: Float = 0
    var _cameraDistance: Float = 0
    var _minPokemonActionFrequencyS: Float = 0
    var _maxPokemonActionFrequencyS: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseCaptureRate = source._baseCaptureRate
      _baseFleeRate = source._baseFleeRate
      _collisionRadiusM = source._collisionRadiusM
      _collisionHeightM = source._collisionHeightM
      _collisionHeadRadiusM = source._collisionHeadRadiusM
      _movementType = source._movementType
      _movementTimerS = source._movementTimerS
      _jumpTimeS = source._jumpTimeS
      _attackTimerS = source._attackTimerS
      _bonusCandyCaptureReward = source._bonusCandyCaptureReward
      _bonusStardustCaptureReward = source._bonusStardustCaptureReward
      _attackProbability = source._attackProbability
      _dodgeProbability = source._dodgeProbability
      _dodgeDurationS = source._dodgeDurationS
      _dodgeDistance = source._dodgeDistance
      _cameraDistance = source._cameraDistance
      _minPokemonActionFrequencyS = source._minPokemonActionFrequencyS
      _maxPokemonActionFrequencyS = source._maxPokemonActionFrequencyS
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._baseCaptureRate) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._baseFleeRate) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._collisionRadiusM) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._collisionHeightM) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._collisionHeadRadiusM) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._movementType) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._movementTimerS) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._jumpTimeS) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._attackTimerS) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._bonusCandyCaptureReward) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._bonusStardustCaptureReward) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._attackProbability) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._dodgeProbability) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._dodgeDurationS) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._dodgeDistance) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._cameraDistance) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._minPokemonActionFrequencyS) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._maxPokemonActionFrequencyS) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._baseCaptureRate != 0 {
        try visitor.visitSingularFloatField(value: _storage._baseCaptureRate, fieldNumber: 1)
      }
      if _storage._baseFleeRate != 0 {
        try visitor.visitSingularFloatField(value: _storage._baseFleeRate, fieldNumber: 2)
      }
      if _storage._collisionRadiusM != 0 {
        try visitor.visitSingularFloatField(value: _storage._collisionRadiusM, fieldNumber: 3)
      }
      if _storage._collisionHeightM != 0 {
        try visitor.visitSingularFloatField(value: _storage._collisionHeightM, fieldNumber: 4)
      }
      if _storage._collisionHeadRadiusM != 0 {
        try visitor.visitSingularFloatField(value: _storage._collisionHeadRadiusM, fieldNumber: 5)
      }
      if _storage._movementType != .movementStatic {
        try visitor.visitSingularEnumField(value: _storage._movementType, fieldNumber: 6)
      }
      if _storage._movementTimerS != 0 {
        try visitor.visitSingularFloatField(value: _storage._movementTimerS, fieldNumber: 7)
      }
      if _storage._jumpTimeS != 0 {
        try visitor.visitSingularFloatField(value: _storage._jumpTimeS, fieldNumber: 8)
      }
      if _storage._attackTimerS != 0 {
        try visitor.visitSingularFloatField(value: _storage._attackTimerS, fieldNumber: 9)
      }
      if _storage._bonusCandyCaptureReward != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bonusCandyCaptureReward, fieldNumber: 10)
      }
      if _storage._bonusStardustCaptureReward != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bonusStardustCaptureReward, fieldNumber: 11)
      }
      if _storage._attackProbability != 0 {
        try visitor.visitSingularFloatField(value: _storage._attackProbability, fieldNumber: 12)
      }
      if _storage._dodgeProbability != 0 {
        try visitor.visitSingularFloatField(value: _storage._dodgeProbability, fieldNumber: 13)
      }
      if _storage._dodgeDurationS != 0 {
        try visitor.visitSingularFloatField(value: _storage._dodgeDurationS, fieldNumber: 14)
      }
      if _storage._dodgeDistance != 0 {
        try visitor.visitSingularFloatField(value: _storage._dodgeDistance, fieldNumber: 15)
      }
      if _storage._cameraDistance != 0 {
        try visitor.visitSingularFloatField(value: _storage._cameraDistance, fieldNumber: 16)
      }
      if _storage._minPokemonActionFrequencyS != 0 {
        try visitor.visitSingularFloatField(value: _storage._minPokemonActionFrequencyS, fieldNumber: 17)
      }
      if _storage._maxPokemonActionFrequencyS != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxPokemonActionFrequencyS, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_Pokemon_EncounterAttributes, rhs: POGOProtos_Settings_Master_Pokemon_EncounterAttributes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseCaptureRate != rhs_storage._baseCaptureRate {return false}
        if _storage._baseFleeRate != rhs_storage._baseFleeRate {return false}
        if _storage._collisionRadiusM != rhs_storage._collisionRadiusM {return false}
        if _storage._collisionHeightM != rhs_storage._collisionHeightM {return false}
        if _storage._collisionHeadRadiusM != rhs_storage._collisionHeadRadiusM {return false}
        if _storage._movementType != rhs_storage._movementType {return false}
        if _storage._movementTimerS != rhs_storage._movementTimerS {return false}
        if _storage._jumpTimeS != rhs_storage._jumpTimeS {return false}
        if _storage._attackTimerS != rhs_storage._attackTimerS {return false}
        if _storage._bonusCandyCaptureReward != rhs_storage._bonusCandyCaptureReward {return false}
        if _storage._bonusStardustCaptureReward != rhs_storage._bonusStardustCaptureReward {return false}
        if _storage._attackProbability != rhs_storage._attackProbability {return false}
        if _storage._dodgeProbability != rhs_storage._dodgeProbability {return false}
        if _storage._dodgeDurationS != rhs_storage._dodgeDurationS {return false}
        if _storage._dodgeDistance != rhs_storage._dodgeDistance {return false}
        if _storage._cameraDistance != rhs_storage._cameraDistance {return false}
        if _storage._minPokemonActionFrequencyS != rhs_storage._minPokemonActionFrequencyS {return false}
        if _storage._maxPokemonActionFrequencyS != rhs_storage._maxPokemonActionFrequencyS {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
