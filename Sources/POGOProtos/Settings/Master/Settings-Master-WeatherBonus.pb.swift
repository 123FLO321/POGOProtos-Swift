// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/WeatherBonus.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_WeatherBonus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cpBaseLevelBonus: Int32 = 0

  public var guaranteedIndividualValues: Int32 = 0

  public var stardustBonusMultiplier: Double = 0

  public var attackBonusMultiplier: Double = 0

  public var raidEncounterCpBaseLevelBonus: Int32 = 0

  public var raidEncounterGuaranteedIndividualValues: Int32 = 0

  public var buddyEmotionFavoriteWeatherIncrement: Int32 = 0

  public var buddyEmotionDislikeWeatherDecrement: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_WeatherBonus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WeatherBonus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cp_base_level_bonus"),
    2: .standard(proto: "guaranteed_individual_values"),
    3: .standard(proto: "stardust_bonus_multiplier"),
    4: .standard(proto: "attack_bonus_multiplier"),
    5: .standard(proto: "raid_encounter_cp_base_level_bonus"),
    6: .standard(proto: "raid_encounter_guaranteed_individual_values"),
    7: .standard(proto: "buddy_emotion_favorite_weather_increment"),
    8: .standard(proto: "buddy_emotion_dislike_weather_decrement"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cpBaseLevelBonus) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.guaranteedIndividualValues) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.stardustBonusMultiplier) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.attackBonusMultiplier) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.raidEncounterCpBaseLevelBonus) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.raidEncounterGuaranteedIndividualValues) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.buddyEmotionFavoriteWeatherIncrement) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.buddyEmotionDislikeWeatherDecrement) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cpBaseLevelBonus != 0 {
      try visitor.visitSingularInt32Field(value: self.cpBaseLevelBonus, fieldNumber: 1)
    }
    if self.guaranteedIndividualValues != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteedIndividualValues, fieldNumber: 2)
    }
    if self.stardustBonusMultiplier != 0 {
      try visitor.visitSingularDoubleField(value: self.stardustBonusMultiplier, fieldNumber: 3)
    }
    if self.attackBonusMultiplier != 0 {
      try visitor.visitSingularDoubleField(value: self.attackBonusMultiplier, fieldNumber: 4)
    }
    if self.raidEncounterCpBaseLevelBonus != 0 {
      try visitor.visitSingularInt32Field(value: self.raidEncounterCpBaseLevelBonus, fieldNumber: 5)
    }
    if self.raidEncounterGuaranteedIndividualValues != 0 {
      try visitor.visitSingularInt32Field(value: self.raidEncounterGuaranteedIndividualValues, fieldNumber: 6)
    }
    if self.buddyEmotionFavoriteWeatherIncrement != 0 {
      try visitor.visitSingularInt32Field(value: self.buddyEmotionFavoriteWeatherIncrement, fieldNumber: 7)
    }
    if self.buddyEmotionDislikeWeatherDecrement != 0 {
      try visitor.visitSingularInt32Field(value: self.buddyEmotionDislikeWeatherDecrement, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_WeatherBonus, rhs: POGOProtos_Settings_Master_WeatherBonus) -> Bool {
    if lhs.cpBaseLevelBonus != rhs.cpBaseLevelBonus {return false}
    if lhs.guaranteedIndividualValues != rhs.guaranteedIndividualValues {return false}
    if lhs.stardustBonusMultiplier != rhs.stardustBonusMultiplier {return false}
    if lhs.attackBonusMultiplier != rhs.attackBonusMultiplier {return false}
    if lhs.raidEncounterCpBaseLevelBonus != rhs.raidEncounterCpBaseLevelBonus {return false}
    if lhs.raidEncounterGuaranteedIndividualValues != rhs.raidEncounterGuaranteedIndividualValues {return false}
    if lhs.buddyEmotionFavoriteWeatherIncrement != rhs.buddyEmotionFavoriteWeatherIncrement {return false}
    if lhs.buddyEmotionDislikeWeatherDecrement != rhs.buddyEmotionDislikeWeatherDecrement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
