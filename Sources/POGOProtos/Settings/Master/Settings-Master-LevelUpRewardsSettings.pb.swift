// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/LevelUpRewardsSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_LevelUpRewardsSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var level: Int32 = 0

  public var items: [POGOProtos_Inventory_Item_ItemId] = []

  public var itemsCount: [Int32] = []

  public var itemsUnlocked: [POGOProtos_Inventory_Item_ItemId] = []

  public var avatarTemplateIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_LevelUpRewardsSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LevelUpRewardsSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "items"),
    3: .standard(proto: "items_count"),
    4: .standard(proto: "items_unlocked"),
    5: .standard(proto: "avatar_template_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.level) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.items) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.itemsCount) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.itemsUnlocked) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.avatarTemplateIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitPackedEnumField(value: self.items, fieldNumber: 2)
    }
    if !self.itemsCount.isEmpty {
      try visitor.visitPackedInt32Field(value: self.itemsCount, fieldNumber: 3)
    }
    if !self.itemsUnlocked.isEmpty {
      try visitor.visitPackedEnumField(value: self.itemsUnlocked, fieldNumber: 4)
    }
    if !self.avatarTemplateIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.avatarTemplateIds, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_LevelUpRewardsSettings, rhs: POGOProtos_Settings_Master_LevelUpRewardsSettings) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.items != rhs.items {return false}
    if lhs.itemsCount != rhs.itemsCount {return false}
    if lhs.itemsUnlocked != rhs.itemsUnlocked {return false}
    if lhs.avatarTemplateIds != rhs.avatarTemplateIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
