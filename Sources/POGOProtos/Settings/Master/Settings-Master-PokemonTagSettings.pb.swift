// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/PokemonTagSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_PokemonTagSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var minPlayerLevelForPokemonTagging: Int32 = 0

  public var colorBinding: [POGOProtos_Settings_Master_PokemonTagSettings.PokemonTagColorBinding] = []

  public var maxNumTagsAllowed: Int32 = 0

  public var tagNameCharacterLimit: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct PokemonTagColorBinding {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var color: POGOProtos_Enums_PokemonTagColor = .unset

    public var hexCode: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_PokemonTagSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PokemonTagSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_player_level_for_pokemon_tagging"),
    2: .standard(proto: "color_binding"),
    3: .standard(proto: "max_num_tags_allowed"),
    4: .standard(proto: "tag_name_character_limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minPlayerLevelForPokemonTagging) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.colorBinding) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.maxNumTagsAllowed) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.tagNameCharacterLimit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minPlayerLevelForPokemonTagging != 0 {
      try visitor.visitSingularInt32Field(value: self.minPlayerLevelForPokemonTagging, fieldNumber: 1)
    }
    if !self.colorBinding.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.colorBinding, fieldNumber: 2)
    }
    if self.maxNumTagsAllowed != 0 {
      try visitor.visitSingularInt32Field(value: self.maxNumTagsAllowed, fieldNumber: 3)
    }
    if self.tagNameCharacterLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.tagNameCharacterLimit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_PokemonTagSettings, rhs: POGOProtos_Settings_Master_PokemonTagSettings) -> Bool {
    if lhs.minPlayerLevelForPokemonTagging != rhs.minPlayerLevelForPokemonTagging {return false}
    if lhs.colorBinding != rhs.colorBinding {return false}
    if lhs.maxNumTagsAllowed != rhs.maxNumTagsAllowed {return false}
    if lhs.tagNameCharacterLimit != rhs.tagNameCharacterLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Settings_Master_PokemonTagSettings.PokemonTagColorBinding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Settings_Master_PokemonTagSettings.protoMessageName + ".PokemonTagColorBinding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .standard(proto: "hex_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.color) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hexCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.color != .unset {
      try visitor.visitSingularEnumField(value: self.color, fieldNumber: 1)
    }
    if !self.hexCode.isEmpty {
      try visitor.visitSingularStringField(value: self.hexCode, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_PokemonTagSettings.PokemonTagColorBinding, rhs: POGOProtos_Settings_Master_PokemonTagSettings.PokemonTagColorBinding) -> Bool {
    if lhs.color != rhs.color {return false}
    if lhs.hexCode != rhs.hexCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
