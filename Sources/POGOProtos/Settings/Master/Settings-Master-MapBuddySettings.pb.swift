// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/MapBuddySettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_MapBuddySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var forBuddyGroupNumber: Int32 = 0

  public var targetOffsetMin: Float = 0

  public var targetOffsetMax: Float = 0

  public var leashDistance: Float = 0

  public var maxSecondsToIdle: Float = 0

  public var maxRotationSpeed: Float = 0

  public var walkThreshold: Float = 0

  public var runThreshold: Float = 0

  public var shouldGlide: Bool = false

  public var glideSmoothTime: Float = 0

  public var glideMaxSpeed: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_MapBuddySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MapBuddySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "for_buddy_group_number"),
    2: .standard(proto: "target_offset_min"),
    3: .standard(proto: "target_offset_max"),
    4: .standard(proto: "leash_distance"),
    5: .standard(proto: "max_seconds_to_idle"),
    6: .standard(proto: "max_rotation_speed"),
    7: .standard(proto: "walk_threshold"),
    8: .standard(proto: "run_threshold"),
    9: .standard(proto: "should_glide"),
    10: .standard(proto: "glide_smooth_time"),
    11: .standard(proto: "glide_max_speed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.forBuddyGroupNumber) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.targetOffsetMin) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.targetOffsetMax) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.leashDistance) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.maxSecondsToIdle) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.maxRotationSpeed) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.walkThreshold) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.runThreshold) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.shouldGlide) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.glideSmoothTime) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.glideMaxSpeed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.forBuddyGroupNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.forBuddyGroupNumber, fieldNumber: 1)
    }
    if self.targetOffsetMin != 0 {
      try visitor.visitSingularFloatField(value: self.targetOffsetMin, fieldNumber: 2)
    }
    if self.targetOffsetMax != 0 {
      try visitor.visitSingularFloatField(value: self.targetOffsetMax, fieldNumber: 3)
    }
    if self.leashDistance != 0 {
      try visitor.visitSingularFloatField(value: self.leashDistance, fieldNumber: 4)
    }
    if self.maxSecondsToIdle != 0 {
      try visitor.visitSingularFloatField(value: self.maxSecondsToIdle, fieldNumber: 5)
    }
    if self.maxRotationSpeed != 0 {
      try visitor.visitSingularFloatField(value: self.maxRotationSpeed, fieldNumber: 6)
    }
    if self.walkThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.walkThreshold, fieldNumber: 7)
    }
    if self.runThreshold != 0 {
      try visitor.visitSingularFloatField(value: self.runThreshold, fieldNumber: 8)
    }
    if self.shouldGlide != false {
      try visitor.visitSingularBoolField(value: self.shouldGlide, fieldNumber: 9)
    }
    if self.glideSmoothTime != 0 {
      try visitor.visitSingularFloatField(value: self.glideSmoothTime, fieldNumber: 10)
    }
    if self.glideMaxSpeed != 0 {
      try visitor.visitSingularFloatField(value: self.glideMaxSpeed, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_MapBuddySettings, rhs: POGOProtos_Settings_Master_MapBuddySettings) -> Bool {
    if lhs.forBuddyGroupNumber != rhs.forBuddyGroupNumber {return false}
    if lhs.targetOffsetMin != rhs.targetOffsetMin {return false}
    if lhs.targetOffsetMax != rhs.targetOffsetMax {return false}
    if lhs.leashDistance != rhs.leashDistance {return false}
    if lhs.maxSecondsToIdle != rhs.maxSecondsToIdle {return false}
    if lhs.maxRotationSpeed != rhs.maxRotationSpeed {return false}
    if lhs.walkThreshold != rhs.walkThreshold {return false}
    if lhs.runThreshold != rhs.runThreshold {return false}
    if lhs.shouldGlide != rhs.shouldGlide {return false}
    if lhs.glideSmoothTime != rhs.glideSmoothTime {return false}
    if lhs.glideMaxSpeed != rhs.glideMaxSpeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
