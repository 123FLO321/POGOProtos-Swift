// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/PlayerLevelSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_PlayerLevelSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rankNum: [Int32] = []

  public var requiredExperience: [Int32] = []

  public var cpMultiplier: [Float] = []

  public var maxEggPlayerLevel: Int32 = 0

  public var maxEncounterPlayerLevel: Int32 = 0

  public var maxRaidEncounterPlayerLevel: Int32 = 0

  public var maxQuestEncounterPlayerLevel: Int32 = 0

  public var maxVsSeekerEncounterPlayerLevel: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_PlayerLevelSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerLevelSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_num"),
    2: .standard(proto: "required_experience"),
    3: .standard(proto: "cp_multiplier"),
    4: .standard(proto: "max_egg_player_level"),
    5: .standard(proto: "max_encounter_player_level"),
    6: .standard(proto: "max_raid_encounter_player_level"),
    7: .standard(proto: "max_quest_encounter_player_level"),
    8: .standard(proto: "max_vs_seeker_encounter_player_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.rankNum) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.requiredExperience) }()
      case 3: try { try decoder.decodeRepeatedFloatField(value: &self.cpMultiplier) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.maxEggPlayerLevel) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.maxEncounterPlayerLevel) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.maxRaidEncounterPlayerLevel) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.maxQuestEncounterPlayerLevel) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.maxVsSeekerEncounterPlayerLevel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rankNum.isEmpty {
      try visitor.visitPackedInt32Field(value: self.rankNum, fieldNumber: 1)
    }
    if !self.requiredExperience.isEmpty {
      try visitor.visitPackedInt32Field(value: self.requiredExperience, fieldNumber: 2)
    }
    if !self.cpMultiplier.isEmpty {
      try visitor.visitPackedFloatField(value: self.cpMultiplier, fieldNumber: 3)
    }
    if self.maxEggPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxEggPlayerLevel, fieldNumber: 4)
    }
    if self.maxEncounterPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxEncounterPlayerLevel, fieldNumber: 5)
    }
    if self.maxRaidEncounterPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxRaidEncounterPlayerLevel, fieldNumber: 6)
    }
    if self.maxQuestEncounterPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxQuestEncounterPlayerLevel, fieldNumber: 7)
    }
    if self.maxVsSeekerEncounterPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.maxVsSeekerEncounterPlayerLevel, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_PlayerLevelSettings, rhs: POGOProtos_Settings_Master_PlayerLevelSettings) -> Bool {
    if lhs.rankNum != rhs.rankNum {return false}
    if lhs.requiredExperience != rhs.requiredExperience {return false}
    if lhs.cpMultiplier != rhs.cpMultiplier {return false}
    if lhs.maxEggPlayerLevel != rhs.maxEggPlayerLevel {return false}
    if lhs.maxEncounterPlayerLevel != rhs.maxEncounterPlayerLevel {return false}
    if lhs.maxRaidEncounterPlayerLevel != rhs.maxRaidEncounterPlayerLevel {return false}
    if lhs.maxQuestEncounterPlayerLevel != rhs.maxQuestEncounterPlayerLevel {return false}
    if lhs.maxVsSeekerEncounterPlayerLevel != rhs.maxVsSeekerEncounterPlayerLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
