// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/PokemonFamilySettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_PokemonFamilySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var familyID: POGOProtos_Enums_PokemonFamilyId = .familyUnset

  public var candyPerXlCandy: Int32 = 0

  public var megaEvolvablePokemonID: POGOProtos_Enums_PokemonId = .missingno

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_PokemonFamilySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PokemonFamilySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "family_id"),
    2: .standard(proto: "candy_per_xl_candy"),
    3: .standard(proto: "mega_evolvable_pokemon_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.familyID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.candyPerXlCandy) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.megaEvolvablePokemonID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.familyID != .familyUnset {
      try visitor.visitSingularEnumField(value: self.familyID, fieldNumber: 1)
    }
    if self.candyPerXlCandy != 0 {
      try visitor.visitSingularInt32Field(value: self.candyPerXlCandy, fieldNumber: 2)
    }
    if self.megaEvolvablePokemonID != .missingno {
      try visitor.visitSingularEnumField(value: self.megaEvolvablePokemonID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_PokemonFamilySettings, rhs: POGOProtos_Settings_Master_PokemonFamilySettings) -> Bool {
    if lhs.familyID != rhs.familyID {return false}
    if lhs.candyPerXlCandy != rhs.candyPerXlCandy {return false}
    if lhs.megaEvolvablePokemonID != rhs.megaEvolvablePokemonID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
