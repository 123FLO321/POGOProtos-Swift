// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/WeatherBonus.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Settings_Master_WeatherBonus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cpBaseLevelBonus: Int32 = 0

  var guaranteedIndividualValues: Int32 = 0

  var stardustBonusMultiplier: Double = 0

  var attackBonusMultiplier: Double = 0

  var raidEncounterCpBaseLevelBonus: Int32 = 0

  var raidEncounterGuaranteedIndividualValues: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_WeatherBonus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WeatherBonus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cp_base_level_bonus"),
    2: .standard(proto: "guaranteed_individual_values"),
    3: .standard(proto: "stardust_bonus_multiplier"),
    4: .standard(proto: "attack_bonus_multiplier"),
    5: .standard(proto: "raid_encounter_cp_base_level_bonus"),
    6: .standard(proto: "raid_encounter_guaranteed_individual_values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cpBaseLevelBonus)
      case 2: try decoder.decodeSingularInt32Field(value: &self.guaranteedIndividualValues)
      case 3: try decoder.decodeSingularDoubleField(value: &self.stardustBonusMultiplier)
      case 4: try decoder.decodeSingularDoubleField(value: &self.attackBonusMultiplier)
      case 5: try decoder.decodeSingularInt32Field(value: &self.raidEncounterCpBaseLevelBonus)
      case 6: try decoder.decodeSingularInt32Field(value: &self.raidEncounterGuaranteedIndividualValues)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cpBaseLevelBonus != 0 {
      try visitor.visitSingularInt32Field(value: self.cpBaseLevelBonus, fieldNumber: 1)
    }
    if self.guaranteedIndividualValues != 0 {
      try visitor.visitSingularInt32Field(value: self.guaranteedIndividualValues, fieldNumber: 2)
    }
    if self.stardustBonusMultiplier != 0 {
      try visitor.visitSingularDoubleField(value: self.stardustBonusMultiplier, fieldNumber: 3)
    }
    if self.attackBonusMultiplier != 0 {
      try visitor.visitSingularDoubleField(value: self.attackBonusMultiplier, fieldNumber: 4)
    }
    if self.raidEncounterCpBaseLevelBonus != 0 {
      try visitor.visitSingularInt32Field(value: self.raidEncounterCpBaseLevelBonus, fieldNumber: 5)
    }
    if self.raidEncounterGuaranteedIndividualValues != 0 {
      try visitor.visitSingularInt32Field(value: self.raidEncounterGuaranteedIndividualValues, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Settings_Master_WeatherBonus, rhs: POGOProtos_Settings_Master_WeatherBonus) -> Bool {
    if lhs.cpBaseLevelBonus != rhs.cpBaseLevelBonus {return false}
    if lhs.guaranteedIndividualValues != rhs.guaranteedIndividualValues {return false}
    if lhs.stardustBonusMultiplier != rhs.stardustBonusMultiplier {return false}
    if lhs.attackBonusMultiplier != rhs.attackBonusMultiplier {return false}
    if lhs.raidEncounterCpBaseLevelBonus != rhs.raidEncounterCpBaseLevelBonus {return false}
    if lhs.raidEncounterGuaranteedIndividualValues != rhs.raidEncounterGuaranteedIndividualValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
