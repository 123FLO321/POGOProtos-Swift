// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/CombatRankingSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_CombatRankingSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rankLevel: [POGOProtos_Settings_Master_CombatRankingSettings.RankLevel] {
    get {return _storage._rankLevel}
    set {_uniqueStorage()._rankLevel = newValue}
  }

  public var requiredForRewards: POGOProtos_Settings_Master_CombatRankingSettings.RankLevel {
    get {return _storage._requiredForRewards ?? POGOProtos_Settings_Master_CombatRankingSettings.RankLevel()}
    set {_uniqueStorage()._requiredForRewards = newValue}
  }
  /// Returns true if `requiredForRewards` has been explicitly set.
  public var hasRequiredForRewards: Bool {return _storage._requiredForRewards != nil}
  /// Clears the value of `requiredForRewards`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredForRewards() {_uniqueStorage()._requiredForRewards = nil}

  public var minRankToDisplayRating: Int32 {
    get {return _storage._minRankToDisplayRating}
    set {_uniqueStorage()._minRankToDisplayRating = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct RankLevel {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rankLevel: Int32 = 0

    public var additionalTotalBattlesRequired: Int32 = 0

    public var additionalWinsRequired: Int32 = 0

    public var minRatingRequired: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_CombatRankingSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CombatRankingSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_level"),
    2: .standard(proto: "required_for_rewards"),
    3: .standard(proto: "min_rank_to_display_rating"),
  ]

  fileprivate class _StorageClass {
    var _rankLevel: [POGOProtos_Settings_Master_CombatRankingSettings.RankLevel] = []
    var _requiredForRewards: POGOProtos_Settings_Master_CombatRankingSettings.RankLevel? = nil
    var _minRankToDisplayRating: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rankLevel = source._rankLevel
      _requiredForRewards = source._requiredForRewards
      _minRankToDisplayRating = source._minRankToDisplayRating
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._rankLevel)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._requiredForRewards)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._minRankToDisplayRating)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._rankLevel.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rankLevel, fieldNumber: 1)
      }
      if let v = _storage._requiredForRewards {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._minRankToDisplayRating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minRankToDisplayRating, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_CombatRankingSettings, rhs: POGOProtos_Settings_Master_CombatRankingSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rankLevel != rhs_storage._rankLevel {return false}
        if _storage._requiredForRewards != rhs_storage._requiredForRewards {return false}
        if _storage._minRankToDisplayRating != rhs_storage._minRankToDisplayRating {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Settings_Master_CombatRankingSettings.RankLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Settings_Master_CombatRankingSettings.protoMessageName + ".RankLevel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_level"),
    2: .standard(proto: "additional_total_battles_required"),
    3: .standard(proto: "additional_wins_required"),
    4: .standard(proto: "min_rating_required"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rankLevel)
      case 2: try decoder.decodeSingularInt32Field(value: &self.additionalTotalBattlesRequired)
      case 3: try decoder.decodeSingularInt32Field(value: &self.additionalWinsRequired)
      case 4: try decoder.decodeSingularInt32Field(value: &self.minRatingRequired)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rankLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.rankLevel, fieldNumber: 1)
    }
    if self.additionalTotalBattlesRequired != 0 {
      try visitor.visitSingularInt32Field(value: self.additionalTotalBattlesRequired, fieldNumber: 2)
    }
    if self.additionalWinsRequired != 0 {
      try visitor.visitSingularInt32Field(value: self.additionalWinsRequired, fieldNumber: 3)
    }
    if self.minRatingRequired != 0 {
      try visitor.visitSingularInt32Field(value: self.minRatingRequired, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_CombatRankingSettings.RankLevel, rhs: POGOProtos_Settings_Master_CombatRankingSettings.RankLevel) -> Bool {
    if lhs.rankLevel != rhs.rankLevel {return false}
    if lhs.additionalTotalBattlesRequired != rhs.additionalTotalBattlesRequired {return false}
    if lhs.additionalWinsRequired != rhs.additionalWinsRequired {return false}
    if lhs.minRatingRequired != rhs.minRatingRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
