// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/CameraSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_CameraSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nextCamera: String = String()

  public var interpolation: [POGOProtos_Enums_CameraInterpolation] = []

  public var targetType: [POGOProtos_Enums_CameraTarget] = []

  public var easeInSpeed: [Float] = []

  public var easeOutSpeed: [Float] = []

  public var durationSeconds: [Float] = []

  public var waitSeconds: [Float] = []

  public var transitionSeconds: [Float] = []

  public var angleDegree: [Float] = []

  public var angleOffsetDegree: [Float] = []

  public var pitchDegree: [Float] = []

  public var pitchOffsetDegree: [Float] = []

  public var rollDegree: [Float] = []

  public var distanceMeters: [Float] = []

  public var heightPercent: [Float] = []

  public var vertCtrRatio: [Float] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_CameraSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CameraSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "next_camera"),
    2: .same(proto: "interpolation"),
    3: .standard(proto: "target_type"),
    4: .standard(proto: "ease_in_speed"),
    5: .standard(proto: "ease_out_speed"),
    6: .standard(proto: "duration_seconds"),
    7: .standard(proto: "wait_seconds"),
    8: .standard(proto: "transition_seconds"),
    9: .standard(proto: "angle_degree"),
    10: .standard(proto: "angle_offset_degree"),
    11: .standard(proto: "pitch_degree"),
    12: .standard(proto: "pitch_offset_degree"),
    13: .standard(proto: "roll_degree"),
    14: .standard(proto: "distance_meters"),
    15: .standard(proto: "height_percent"),
    16: .standard(proto: "vert_ctr_ratio"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nextCamera) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.interpolation) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.targetType) }()
      case 4: try { try decoder.decodeRepeatedFloatField(value: &self.easeInSpeed) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.easeOutSpeed) }()
      case 6: try { try decoder.decodeRepeatedFloatField(value: &self.durationSeconds) }()
      case 7: try { try decoder.decodeRepeatedFloatField(value: &self.waitSeconds) }()
      case 8: try { try decoder.decodeRepeatedFloatField(value: &self.transitionSeconds) }()
      case 9: try { try decoder.decodeRepeatedFloatField(value: &self.angleDegree) }()
      case 10: try { try decoder.decodeRepeatedFloatField(value: &self.angleOffsetDegree) }()
      case 11: try { try decoder.decodeRepeatedFloatField(value: &self.pitchDegree) }()
      case 12: try { try decoder.decodeRepeatedFloatField(value: &self.pitchOffsetDegree) }()
      case 13: try { try decoder.decodeRepeatedFloatField(value: &self.rollDegree) }()
      case 14: try { try decoder.decodeRepeatedFloatField(value: &self.distanceMeters) }()
      case 15: try { try decoder.decodeRepeatedFloatField(value: &self.heightPercent) }()
      case 16: try { try decoder.decodeRepeatedFloatField(value: &self.vertCtrRatio) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nextCamera.isEmpty {
      try visitor.visitSingularStringField(value: self.nextCamera, fieldNumber: 1)
    }
    if !self.interpolation.isEmpty {
      try visitor.visitPackedEnumField(value: self.interpolation, fieldNumber: 2)
    }
    if !self.targetType.isEmpty {
      try visitor.visitPackedEnumField(value: self.targetType, fieldNumber: 3)
    }
    if !self.easeInSpeed.isEmpty {
      try visitor.visitPackedFloatField(value: self.easeInSpeed, fieldNumber: 4)
    }
    if !self.easeOutSpeed.isEmpty {
      try visitor.visitPackedFloatField(value: self.easeOutSpeed, fieldNumber: 5)
    }
    if !self.durationSeconds.isEmpty {
      try visitor.visitPackedFloatField(value: self.durationSeconds, fieldNumber: 6)
    }
    if !self.waitSeconds.isEmpty {
      try visitor.visitPackedFloatField(value: self.waitSeconds, fieldNumber: 7)
    }
    if !self.transitionSeconds.isEmpty {
      try visitor.visitPackedFloatField(value: self.transitionSeconds, fieldNumber: 8)
    }
    if !self.angleDegree.isEmpty {
      try visitor.visitPackedFloatField(value: self.angleDegree, fieldNumber: 9)
    }
    if !self.angleOffsetDegree.isEmpty {
      try visitor.visitPackedFloatField(value: self.angleOffsetDegree, fieldNumber: 10)
    }
    if !self.pitchDegree.isEmpty {
      try visitor.visitPackedFloatField(value: self.pitchDegree, fieldNumber: 11)
    }
    if !self.pitchOffsetDegree.isEmpty {
      try visitor.visitPackedFloatField(value: self.pitchOffsetDegree, fieldNumber: 12)
    }
    if !self.rollDegree.isEmpty {
      try visitor.visitPackedFloatField(value: self.rollDegree, fieldNumber: 13)
    }
    if !self.distanceMeters.isEmpty {
      try visitor.visitPackedFloatField(value: self.distanceMeters, fieldNumber: 14)
    }
    if !self.heightPercent.isEmpty {
      try visitor.visitPackedFloatField(value: self.heightPercent, fieldNumber: 15)
    }
    if !self.vertCtrRatio.isEmpty {
      try visitor.visitPackedFloatField(value: self.vertCtrRatio, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_CameraSettings, rhs: POGOProtos_Settings_Master_CameraSettings) -> Bool {
    if lhs.nextCamera != rhs.nextCamera {return false}
    if lhs.interpolation != rhs.interpolation {return false}
    if lhs.targetType != rhs.targetType {return false}
    if lhs.easeInSpeed != rhs.easeInSpeed {return false}
    if lhs.easeOutSpeed != rhs.easeOutSpeed {return false}
    if lhs.durationSeconds != rhs.durationSeconds {return false}
    if lhs.waitSeconds != rhs.waitSeconds {return false}
    if lhs.transitionSeconds != rhs.transitionSeconds {return false}
    if lhs.angleDegree != rhs.angleDegree {return false}
    if lhs.angleOffsetDegree != rhs.angleOffsetDegree {return false}
    if lhs.pitchDegree != rhs.pitchDegree {return false}
    if lhs.pitchOffsetDegree != rhs.pitchOffsetDegree {return false}
    if lhs.rollDegree != rhs.rollDegree {return false}
    if lhs.distanceMeters != rhs.distanceMeters {return false}
    if lhs.heightPercent != rhs.heightPercent {return false}
    if lhs.vertCtrRatio != rhs.vertCtrRatio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
