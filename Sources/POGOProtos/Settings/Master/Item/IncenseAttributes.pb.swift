// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/Item/IncenseAttributes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Settings_Master_Item_IncenseAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var incenseLifetimeSeconds: Int32 = 0

  var pokemonType: [POGOProtos_Enums_PokemonType] = []

  var pokemonIncenseTypeProbability: Float = 0

  var standingTimeBetweenEncountersSeconds: Int32 = 0

  var movingTimeBetweenEncounterSeconds: Int32 = 0

  var distanceRequiredForShorterIntervalMeters: Int32 = 0

  var pokemonAttractedLengthSec: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master.Item"

extension POGOProtos_Settings_Master_Item_IncenseAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IncenseAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incense_lifetime_seconds"),
    2: .standard(proto: "pokemon_type"),
    3: .standard(proto: "pokemon_incense_type_probability"),
    4: .standard(proto: "standing_time_between_encounters_seconds"),
    5: .standard(proto: "moving_time_between_encounter_seconds"),
    6: .standard(proto: "distance_required_for_shorter_interval_meters"),
    7: .standard(proto: "pokemon_attracted_length_sec"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.incenseLifetimeSeconds)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.pokemonType)
      case 3: try decoder.decodeSingularFloatField(value: &self.pokemonIncenseTypeProbability)
      case 4: try decoder.decodeSingularInt32Field(value: &self.standingTimeBetweenEncountersSeconds)
      case 5: try decoder.decodeSingularInt32Field(value: &self.movingTimeBetweenEncounterSeconds)
      case 6: try decoder.decodeSingularInt32Field(value: &self.distanceRequiredForShorterIntervalMeters)
      case 7: try decoder.decodeSingularInt32Field(value: &self.pokemonAttractedLengthSec)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.incenseLifetimeSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.incenseLifetimeSeconds, fieldNumber: 1)
    }
    if !self.pokemonType.isEmpty {
      try visitor.visitPackedEnumField(value: self.pokemonType, fieldNumber: 2)
    }
    if self.pokemonIncenseTypeProbability != 0 {
      try visitor.visitSingularFloatField(value: self.pokemonIncenseTypeProbability, fieldNumber: 3)
    }
    if self.standingTimeBetweenEncountersSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.standingTimeBetweenEncountersSeconds, fieldNumber: 4)
    }
    if self.movingTimeBetweenEncounterSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.movingTimeBetweenEncounterSeconds, fieldNumber: 5)
    }
    if self.distanceRequiredForShorterIntervalMeters != 0 {
      try visitor.visitSingularInt32Field(value: self.distanceRequiredForShorterIntervalMeters, fieldNumber: 6)
    }
    if self.pokemonAttractedLengthSec != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonAttractedLengthSec, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Settings_Master_Item_IncenseAttributes, rhs: POGOProtos_Settings_Master_Item_IncenseAttributes) -> Bool {
    if lhs.incenseLifetimeSeconds != rhs.incenseLifetimeSeconds {return false}
    if lhs.pokemonType != rhs.pokemonType {return false}
    if lhs.pokemonIncenseTypeProbability != rhs.pokemonIncenseTypeProbability {return false}
    if lhs.standingTimeBetweenEncountersSeconds != rhs.standingTimeBetweenEncountersSeconds {return false}
    if lhs.movingTimeBetweenEncounterSeconds != rhs.movingTimeBetweenEncounterSeconds {return false}
    if lhs.distanceRequiredForShorterIntervalMeters != rhs.distanceRequiredForShorterIntervalMeters {return false}
    if lhs.pokemonAttractedLengthSec != rhs.pokemonAttractedLengthSec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
