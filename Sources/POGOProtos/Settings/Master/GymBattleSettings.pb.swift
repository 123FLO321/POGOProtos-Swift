// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/GymBattleSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Settings_Master_GymBattleSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var energyPerSec: Float = 0

  var dodgeEnergyCost: Float = 0

  var retargetSeconds: Float = 0

  var enemyAttackInterval: Float = 0

  var attackServerInterval: Float = 0

  var roundDurationSeconds: Float = 0

  var bonusTimePerAllySeconds: Float = 0

  var maximumAttackersPerBattle: Int32 = 0

  var sameTypeAttackBonusMultiplier: Float = 0

  var maximumEnergy: Int32 = 0

  var energyDeltaPerHealthLost: Float = 0

  var dodgeDurationMs: Int32 = 0

  var minimumPlayerLevel: Int32 = 0

  var swapDurationMs: Int32 = 0

  var dodgeDamageReductionPercent: Float = 0

  var minimumRaidPlayerLevel: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_GymBattleSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GymBattleSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "energy_per_sec"),
    2: .standard(proto: "dodge_energy_cost"),
    3: .standard(proto: "retarget_seconds"),
    4: .standard(proto: "enemy_attack_interval"),
    5: .standard(proto: "attack_server_interval"),
    6: .standard(proto: "round_duration_seconds"),
    7: .standard(proto: "bonus_time_per_ally_seconds"),
    8: .standard(proto: "maximum_attackers_per_battle"),
    9: .standard(proto: "same_type_attack_bonus_multiplier"),
    10: .standard(proto: "maximum_energy"),
    11: .standard(proto: "energy_delta_per_health_lost"),
    12: .standard(proto: "dodge_duration_ms"),
    13: .standard(proto: "minimum_player_level"),
    14: .standard(proto: "swap_duration_ms"),
    15: .standard(proto: "dodge_damage_reduction_percent"),
    16: .standard(proto: "minimum_raid_player_level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.energyPerSec)
      case 2: try decoder.decodeSingularFloatField(value: &self.dodgeEnergyCost)
      case 3: try decoder.decodeSingularFloatField(value: &self.retargetSeconds)
      case 4: try decoder.decodeSingularFloatField(value: &self.enemyAttackInterval)
      case 5: try decoder.decodeSingularFloatField(value: &self.attackServerInterval)
      case 6: try decoder.decodeSingularFloatField(value: &self.roundDurationSeconds)
      case 7: try decoder.decodeSingularFloatField(value: &self.bonusTimePerAllySeconds)
      case 8: try decoder.decodeSingularInt32Field(value: &self.maximumAttackersPerBattle)
      case 9: try decoder.decodeSingularFloatField(value: &self.sameTypeAttackBonusMultiplier)
      case 10: try decoder.decodeSingularInt32Field(value: &self.maximumEnergy)
      case 11: try decoder.decodeSingularFloatField(value: &self.energyDeltaPerHealthLost)
      case 12: try decoder.decodeSingularInt32Field(value: &self.dodgeDurationMs)
      case 13: try decoder.decodeSingularInt32Field(value: &self.minimumPlayerLevel)
      case 14: try decoder.decodeSingularInt32Field(value: &self.swapDurationMs)
      case 15: try decoder.decodeSingularFloatField(value: &self.dodgeDamageReductionPercent)
      case 16: try decoder.decodeSingularInt32Field(value: &self.minimumRaidPlayerLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.energyPerSec != 0 {
      try visitor.visitSingularFloatField(value: self.energyPerSec, fieldNumber: 1)
    }
    if self.dodgeEnergyCost != 0 {
      try visitor.visitSingularFloatField(value: self.dodgeEnergyCost, fieldNumber: 2)
    }
    if self.retargetSeconds != 0 {
      try visitor.visitSingularFloatField(value: self.retargetSeconds, fieldNumber: 3)
    }
    if self.enemyAttackInterval != 0 {
      try visitor.visitSingularFloatField(value: self.enemyAttackInterval, fieldNumber: 4)
    }
    if self.attackServerInterval != 0 {
      try visitor.visitSingularFloatField(value: self.attackServerInterval, fieldNumber: 5)
    }
    if self.roundDurationSeconds != 0 {
      try visitor.visitSingularFloatField(value: self.roundDurationSeconds, fieldNumber: 6)
    }
    if self.bonusTimePerAllySeconds != 0 {
      try visitor.visitSingularFloatField(value: self.bonusTimePerAllySeconds, fieldNumber: 7)
    }
    if self.maximumAttackersPerBattle != 0 {
      try visitor.visitSingularInt32Field(value: self.maximumAttackersPerBattle, fieldNumber: 8)
    }
    if self.sameTypeAttackBonusMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.sameTypeAttackBonusMultiplier, fieldNumber: 9)
    }
    if self.maximumEnergy != 0 {
      try visitor.visitSingularInt32Field(value: self.maximumEnergy, fieldNumber: 10)
    }
    if self.energyDeltaPerHealthLost != 0 {
      try visitor.visitSingularFloatField(value: self.energyDeltaPerHealthLost, fieldNumber: 11)
    }
    if self.dodgeDurationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.dodgeDurationMs, fieldNumber: 12)
    }
    if self.minimumPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.minimumPlayerLevel, fieldNumber: 13)
    }
    if self.swapDurationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.swapDurationMs, fieldNumber: 14)
    }
    if self.dodgeDamageReductionPercent != 0 {
      try visitor.visitSingularFloatField(value: self.dodgeDamageReductionPercent, fieldNumber: 15)
    }
    if self.minimumRaidPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.minimumRaidPlayerLevel, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Settings_Master_GymBattleSettings, rhs: POGOProtos_Settings_Master_GymBattleSettings) -> Bool {
    if lhs.energyPerSec != rhs.energyPerSec {return false}
    if lhs.dodgeEnergyCost != rhs.dodgeEnergyCost {return false}
    if lhs.retargetSeconds != rhs.retargetSeconds {return false}
    if lhs.enemyAttackInterval != rhs.enemyAttackInterval {return false}
    if lhs.attackServerInterval != rhs.attackServerInterval {return false}
    if lhs.roundDurationSeconds != rhs.roundDurationSeconds {return false}
    if lhs.bonusTimePerAllySeconds != rhs.bonusTimePerAllySeconds {return false}
    if lhs.maximumAttackersPerBattle != rhs.maximumAttackersPerBattle {return false}
    if lhs.sameTypeAttackBonusMultiplier != rhs.sameTypeAttackBonusMultiplier {return false}
    if lhs.maximumEnergy != rhs.maximumEnergy {return false}
    if lhs.energyDeltaPerHealthLost != rhs.energyDeltaPerHealthLost {return false}
    if lhs.dodgeDurationMs != rhs.dodgeDurationMs {return false}
    if lhs.minimumPlayerLevel != rhs.minimumPlayerLevel {return false}
    if lhs.swapDurationMs != rhs.swapDurationMs {return false}
    if lhs.dodgeDamageReductionPercent != rhs.dodgeDamageReductionPercent {return false}
    if lhs.minimumRaidPlayerLevel != rhs.minimumRaidPlayerLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
