// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/Master/MoveSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_Master_MoveSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var movementID: POGOProtos_Enums_PokemonMove = .moveUnset

  ///int32 animation_id = 2;
  public var animationID: POGOProtos_Enums_PokemonAnim = .nonePokemonAnim

  public var pokemonType: POGOProtos_Enums_PokemonType = .none

  public var power: Float = 0

  public var accuracyChance: Float = 0

  public var criticalChance: Float = 0

  public var healScalar: Float = 0

  public var staminaLossScalar: Float = 0

  public var trainerLevelMin: Int32 = 0

  public var trainerLevelMax: Int32 = 0

  public var vfxName: String = String()

  public var durationMs: Int32 = 0

  public var damageWindowStartMs: Int32 = 0

  public var damageWindowEndMs: Int32 = 0

  public var energyDelta: Int32 = 0

  public var isLocked: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings.Master"

extension POGOProtos_Settings_Master_MoveSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MoveSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "movement_id"),
    2: .standard(proto: "animation_id"),
    3: .standard(proto: "pokemon_type"),
    4: .same(proto: "power"),
    5: .standard(proto: "accuracy_chance"),
    6: .standard(proto: "critical_chance"),
    7: .standard(proto: "heal_scalar"),
    8: .standard(proto: "stamina_loss_scalar"),
    9: .standard(proto: "trainer_level_min"),
    10: .standard(proto: "trainer_level_max"),
    11: .standard(proto: "vfx_name"),
    12: .standard(proto: "duration_ms"),
    13: .standard(proto: "damage_window_start_ms"),
    14: .standard(proto: "damage_window_end_ms"),
    15: .standard(proto: "energy_delta"),
    16: .standard(proto: "is_locked"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.movementID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.animationID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.pokemonType) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.power) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.accuracyChance) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.criticalChance) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.healScalar) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.staminaLossScalar) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.trainerLevelMin) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.trainerLevelMax) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.vfxName) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.durationMs) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.damageWindowStartMs) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.damageWindowEndMs) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &self.energyDelta) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self.isLocked) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.movementID != .moveUnset {
      try visitor.visitSingularEnumField(value: self.movementID, fieldNumber: 1)
    }
    if self.animationID != .nonePokemonAnim {
      try visitor.visitSingularEnumField(value: self.animationID, fieldNumber: 2)
    }
    if self.pokemonType != .none {
      try visitor.visitSingularEnumField(value: self.pokemonType, fieldNumber: 3)
    }
    if self.power != 0 {
      try visitor.visitSingularFloatField(value: self.power, fieldNumber: 4)
    }
    if self.accuracyChance != 0 {
      try visitor.visitSingularFloatField(value: self.accuracyChance, fieldNumber: 5)
    }
    if self.criticalChance != 0 {
      try visitor.visitSingularFloatField(value: self.criticalChance, fieldNumber: 6)
    }
    if self.healScalar != 0 {
      try visitor.visitSingularFloatField(value: self.healScalar, fieldNumber: 7)
    }
    if self.staminaLossScalar != 0 {
      try visitor.visitSingularFloatField(value: self.staminaLossScalar, fieldNumber: 8)
    }
    if self.trainerLevelMin != 0 {
      try visitor.visitSingularInt32Field(value: self.trainerLevelMin, fieldNumber: 9)
    }
    if self.trainerLevelMax != 0 {
      try visitor.visitSingularInt32Field(value: self.trainerLevelMax, fieldNumber: 10)
    }
    if !self.vfxName.isEmpty {
      try visitor.visitSingularStringField(value: self.vfxName, fieldNumber: 11)
    }
    if self.durationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.durationMs, fieldNumber: 12)
    }
    if self.damageWindowStartMs != 0 {
      try visitor.visitSingularInt32Field(value: self.damageWindowStartMs, fieldNumber: 13)
    }
    if self.damageWindowEndMs != 0 {
      try visitor.visitSingularInt32Field(value: self.damageWindowEndMs, fieldNumber: 14)
    }
    if self.energyDelta != 0 {
      try visitor.visitSingularInt32Field(value: self.energyDelta, fieldNumber: 15)
    }
    if self.isLocked != false {
      try visitor.visitSingularBoolField(value: self.isLocked, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_Master_MoveSettings, rhs: POGOProtos_Settings_Master_MoveSettings) -> Bool {
    if lhs.movementID != rhs.movementID {return false}
    if lhs.animationID != rhs.animationID {return false}
    if lhs.pokemonType != rhs.pokemonType {return false}
    if lhs.power != rhs.power {return false}
    if lhs.accuracyChance != rhs.accuracyChance {return false}
    if lhs.criticalChance != rhs.criticalChance {return false}
    if lhs.healScalar != rhs.healScalar {return false}
    if lhs.staminaLossScalar != rhs.staminaLossScalar {return false}
    if lhs.trainerLevelMin != rhs.trainerLevelMin {return false}
    if lhs.trainerLevelMax != rhs.trainerLevelMax {return false}
    if lhs.vfxName != rhs.vfxName {return false}
    if lhs.durationMs != rhs.durationMs {return false}
    if lhs.damageWindowStartMs != rhs.damageWindowStartMs {return false}
    if lhs.damageWindowEndMs != rhs.damageWindowEndMs {return false}
    if lhs.energyDelta != rhs.energyDelta {return false}
    if lhs.isLocked != rhs.isLocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
