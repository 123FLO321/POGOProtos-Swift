// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/GlobalSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_GlobalSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fortSettings: POGOProtos_Settings_FortSettings {
    get {return _storage._fortSettings ?? POGOProtos_Settings_FortSettings()}
    set {_uniqueStorage()._fortSettings = newValue}
  }
  /// Returns true if `fortSettings` has been explicitly set.
  public var hasFortSettings: Bool {return _storage._fortSettings != nil}
  /// Clears the value of `fortSettings`. Subsequent reads from it will return its default value.
  public mutating func clearFortSettings() {_uniqueStorage()._fortSettings = nil}

  public var mapSettings: POGOProtos_Settings_MapSettings {
    get {return _storage._mapSettings ?? POGOProtos_Settings_MapSettings()}
    set {_uniqueStorage()._mapSettings = newValue}
  }
  /// Returns true if `mapSettings` has been explicitly set.
  public var hasMapSettings: Bool {return _storage._mapSettings != nil}
  /// Clears the value of `mapSettings`. Subsequent reads from it will return its default value.
  public mutating func clearMapSettings() {_uniqueStorage()._mapSettings = nil}

  public var levelSettings: POGOProtos_Settings_LevelSettings {
    get {return _storage._levelSettings ?? POGOProtos_Settings_LevelSettings()}
    set {_uniqueStorage()._levelSettings = newValue}
  }
  /// Returns true if `levelSettings` has been explicitly set.
  public var hasLevelSettings: Bool {return _storage._levelSettings != nil}
  /// Clears the value of `levelSettings`. Subsequent reads from it will return its default value.
  public mutating func clearLevelSettings() {_uniqueStorage()._levelSettings = nil}

  public var inventorySettings: POGOProtos_Settings_InventorySettings {
    get {return _storage._inventorySettings ?? POGOProtos_Settings_InventorySettings()}
    set {_uniqueStorage()._inventorySettings = newValue}
  }
  /// Returns true if `inventorySettings` has been explicitly set.
  public var hasInventorySettings: Bool {return _storage._inventorySettings != nil}
  /// Clears the value of `inventorySettings`. Subsequent reads from it will return its default value.
  public mutating func clearInventorySettings() {_uniqueStorage()._inventorySettings = nil}

  public var minimumClientVersion: String {
    get {return _storage._minimumClientVersion}
    set {_uniqueStorage()._minimumClientVersion = newValue}
  }

  public var gpsSettings: POGOProtos_Settings_GpsSettings {
    get {return _storage._gpsSettings ?? POGOProtos_Settings_GpsSettings()}
    set {_uniqueStorage()._gpsSettings = newValue}
  }
  /// Returns true if `gpsSettings` has been explicitly set.
  public var hasGpsSettings: Bool {return _storage._gpsSettings != nil}
  /// Clears the value of `gpsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearGpsSettings() {_uniqueStorage()._gpsSettings = nil}

  public var festivalSettings: POGOProtos_Settings_FestivalSettings {
    get {return _storage._festivalSettings ?? POGOProtos_Settings_FestivalSettings()}
    set {_uniqueStorage()._festivalSettings = newValue}
  }
  /// Returns true if `festivalSettings` has been explicitly set.
  public var hasFestivalSettings: Bool {return _storage._festivalSettings != nil}
  /// Clears the value of `festivalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearFestivalSettings() {_uniqueStorage()._festivalSettings = nil}

  public var eventSettings: POGOProtos_Settings_EventSettings {
    get {return _storage._eventSettings ?? POGOProtos_Settings_EventSettings()}
    set {_uniqueStorage()._eventSettings = newValue}
  }
  /// Returns true if `eventSettings` has been explicitly set.
  public var hasEventSettings: Bool {return _storage._eventSettings != nil}
  /// Clears the value of `eventSettings`. Subsequent reads from it will return its default value.
  public mutating func clearEventSettings() {_uniqueStorage()._eventSettings = nil}

  public var maxPokemonTypes: Int32 {
    get {return _storage._maxPokemonTypes}
    set {_uniqueStorage()._maxPokemonTypes = newValue}
  }

  public var sfidaSettings: POGOProtos_Settings_SfidaSettings {
    get {return _storage._sfidaSettings ?? POGOProtos_Settings_SfidaSettings()}
    set {_uniqueStorage()._sfidaSettings = newValue}
  }
  /// Returns true if `sfidaSettings` has been explicitly set.
  public var hasSfidaSettings: Bool {return _storage._sfidaSettings != nil}
  /// Clears the value of `sfidaSettings`. Subsequent reads from it will return its default value.
  public mutating func clearSfidaSettings() {_uniqueStorage()._sfidaSettings = nil}

  public var newsSettings: POGOProtos_Settings_NewsSettings {
    get {return _storage._newsSettings ?? POGOProtos_Settings_NewsSettings()}
    set {_uniqueStorage()._newsSettings = newValue}
  }
  /// Returns true if `newsSettings` has been explicitly set.
  public var hasNewsSettings: Bool {return _storage._newsSettings != nil}
  /// Clears the value of `newsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearNewsSettings() {_uniqueStorage()._newsSettings = nil}

  public var translationSettings: POGOProtos_Settings_TranslationSettings {
    get {return _storage._translationSettings ?? POGOProtos_Settings_TranslationSettings()}
    set {_uniqueStorage()._translationSettings = newValue}
  }
  /// Returns true if `translationSettings` has been explicitly set.
  public var hasTranslationSettings: Bool {return _storage._translationSettings != nil}
  /// Clears the value of `translationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearTranslationSettings() {_uniqueStorage()._translationSettings = nil}

  public var passcodeSettings: POGOProtos_Settings_PasscodeSettings {
    get {return _storage._passcodeSettings ?? POGOProtos_Settings_PasscodeSettings()}
    set {_uniqueStorage()._passcodeSettings = newValue}
  }
  /// Returns true if `passcodeSettings` has been explicitly set.
  public var hasPasscodeSettings: Bool {return _storage._passcodeSettings != nil}
  /// Clears the value of `passcodeSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPasscodeSettings() {_uniqueStorage()._passcodeSettings = nil}

  public var notificationSettings: POGOProtos_Settings_NotificationSettings {
    get {return _storage._notificationSettings ?? POGOProtos_Settings_NotificationSettings()}
    set {_uniqueStorage()._notificationSettings = newValue}
  }
  /// Returns true if `notificationSettings` has been explicitly set.
  public var hasNotificationSettings: Bool {return _storage._notificationSettings != nil}
  /// Clears the value of `notificationSettings`. Subsequent reads from it will return its default value.
  public mutating func clearNotificationSettings() {_uniqueStorage()._notificationSettings = nil}

  public var clientAppBlacklist: [String] {
    get {return _storage._clientAppBlacklist}
    set {_uniqueStorage()._clientAppBlacklist = newValue}
  }

  public var clientPerfSettings: POGOProtos_Settings_ClientPerformanceSettings {
    get {return _storage._clientPerfSettings ?? POGOProtos_Settings_ClientPerformanceSettings()}
    set {_uniqueStorage()._clientPerfSettings = newValue}
  }
  /// Returns true if `clientPerfSettings` has been explicitly set.
  public var hasClientPerfSettings: Bool {return _storage._clientPerfSettings != nil}
  /// Clears the value of `clientPerfSettings`. Subsequent reads from it will return its default value.
  public mutating func clearClientPerfSettings() {_uniqueStorage()._clientPerfSettings = nil}

  public var newsGlobalSettings: POGOProtos_Settings_NewsGlobalSettings {
    get {return _storage._newsGlobalSettings ?? POGOProtos_Settings_NewsGlobalSettings()}
    set {_uniqueStorage()._newsGlobalSettings = newValue}
  }
  /// Returns true if `newsGlobalSettings` has been explicitly set.
  public var hasNewsGlobalSettings: Bool {return _storage._newsGlobalSettings != nil}
  /// Clears the value of `newsGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearNewsGlobalSettings() {_uniqueStorage()._newsGlobalSettings = nil}

  public var questGlobalSettings: POGOProtos_Settings_QuestGlobalSettings {
    get {return _storage._questGlobalSettings ?? POGOProtos_Settings_QuestGlobalSettings()}
    set {_uniqueStorage()._questGlobalSettings = newValue}
  }
  /// Returns true if `questGlobalSettings` has been explicitly set.
  public var hasQuestGlobalSettings: Bool {return _storage._questGlobalSettings != nil}
  /// Clears the value of `questGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearQuestGlobalSettings() {_uniqueStorage()._questGlobalSettings = nil}

  public var belugaGlobalSettings: POGOProtos_Settings_BelugaGlobalSettings {
    get {return _storage._belugaGlobalSettings ?? POGOProtos_Settings_BelugaGlobalSettings()}
    set {_uniqueStorage()._belugaGlobalSettings = newValue}
  }
  /// Returns true if `belugaGlobalSettings` has been explicitly set.
  public var hasBelugaGlobalSettings: Bool {return _storage._belugaGlobalSettings != nil}
  /// Clears the value of `belugaGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearBelugaGlobalSettings() {_uniqueStorage()._belugaGlobalSettings = nil}

  public var telemetryGlobalSettings: POGOProtos_Settings_TelemetryGlobalSettings {
    get {return _storage._telemetryGlobalSettings ?? POGOProtos_Settings_TelemetryGlobalSettings()}
    set {_uniqueStorage()._telemetryGlobalSettings = newValue}
  }
  /// Returns true if `telemetryGlobalSettings` has been explicitly set.
  public var hasTelemetryGlobalSettings: Bool {return _storage._telemetryGlobalSettings != nil}
  /// Clears the value of `telemetryGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearTelemetryGlobalSettings() {_uniqueStorage()._telemetryGlobalSettings = nil}

  public var loginSettings: POGOProtos_Settings_LoginSettings {
    get {return _storage._loginSettings ?? POGOProtos_Settings_LoginSettings()}
    set {_uniqueStorage()._loginSettings = newValue}
  }
  /// Returns true if `loginSettings` has been explicitly set.
  public var hasLoginSettings: Bool {return _storage._loginSettings != nil}
  /// Clears the value of `loginSettings`. Subsequent reads from it will return its default value.
  public mutating func clearLoginSettings() {_uniqueStorage()._loginSettings = nil}

  public var socialSettings: POGOProtos_Settings_SocialClientSettings {
    get {return _storage._socialSettings ?? POGOProtos_Settings_SocialClientSettings()}
    set {_uniqueStorage()._socialSettings = newValue}
  }
  /// Returns true if `socialSettings` has been explicitly set.
  public var hasSocialSettings: Bool {return _storage._socialSettings != nil}
  /// Clears the value of `socialSettings`. Subsequent reads from it will return its default value.
  public mutating func clearSocialSettings() {_uniqueStorage()._socialSettings = nil}

  public var tradingGlobalSettings: POGOProtos_Settings_TradingGlobalSettings {
    get {return _storage._tradingGlobalSettings ?? POGOProtos_Settings_TradingGlobalSettings()}
    set {_uniqueStorage()._tradingGlobalSettings = newValue}
  }
  /// Returns true if `tradingGlobalSettings` has been explicitly set.
  public var hasTradingGlobalSettings: Bool {return _storage._tradingGlobalSettings != nil}
  /// Clears the value of `tradingGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearTradingGlobalSettings() {_uniqueStorage()._tradingGlobalSettings = nil}

  public var additionalAllowedPokemonIds: [POGOProtos_Enums_PokemonId] {
    get {return _storage._additionalAllowedPokemonIds}
    set {_uniqueStorage()._additionalAllowedPokemonIds = newValue}
  }

  public var upsightLoggingSettings: POGOProtos_Settings_UpsightLoggingSettings {
    get {return _storage._upsightLoggingSettings ?? POGOProtos_Settings_UpsightLoggingSettings()}
    set {_uniqueStorage()._upsightLoggingSettings = newValue}
  }
  /// Returns true if `upsightLoggingSettings` has been explicitly set.
  public var hasUpsightLoggingSettings: Bool {return _storage._upsightLoggingSettings != nil}
  /// Clears the value of `upsightLoggingSettings`. Subsequent reads from it will return its default value.
  public mutating func clearUpsightLoggingSettings() {_uniqueStorage()._upsightLoggingSettings = nil}

  public var combatGlobalSettings: POGOProtos_Settings_CombatGlobalSettings {
    get {return _storage._combatGlobalSettings ?? POGOProtos_Settings_CombatGlobalSettings()}
    set {_uniqueStorage()._combatGlobalSettings = newValue}
  }
  /// Returns true if `combatGlobalSettings` has been explicitly set.
  public var hasCombatGlobalSettings: Bool {return _storage._combatGlobalSettings != nil}
  /// Clears the value of `combatGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearCombatGlobalSettings() {_uniqueStorage()._combatGlobalSettings = nil}

  public var thirdMoveSettings: POGOProtos_Settings_ThirdMoveGlobalSettings {
    get {return _storage._thirdMoveSettings ?? POGOProtos_Settings_ThirdMoveGlobalSettings()}
    set {_uniqueStorage()._thirdMoveSettings = newValue}
  }
  /// Returns true if `thirdMoveSettings` has been explicitly set.
  public var hasThirdMoveSettings: Bool {return _storage._thirdMoveSettings != nil}
  /// Clears the value of `thirdMoveSettings`. Subsequent reads from it will return its default value.
  public mutating func clearThirdMoveSettings() {_uniqueStorage()._thirdMoveSettings = nil}

  public var combatChallengeGlobalSettings: POGOProtos_Settings_CombatChallengeGlobalSettings {
    get {return _storage._combatChallengeGlobalSettings ?? POGOProtos_Settings_CombatChallengeGlobalSettings()}
    set {_uniqueStorage()._combatChallengeGlobalSettings = newValue}
  }
  /// Returns true if `combatChallengeGlobalSettings` has been explicitly set.
  public var hasCombatChallengeGlobalSettings: Bool {return _storage._combatChallengeGlobalSettings != nil}
  /// Clears the value of `combatChallengeGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearCombatChallengeGlobalSettings() {_uniqueStorage()._combatChallengeGlobalSettings = nil}

  public var bgmodeGlobalSettings: POGOProtos_Settings_BackgroundModeGlobalSettings {
    get {return _storage._bgmodeGlobalSettings ?? POGOProtos_Settings_BackgroundModeGlobalSettings()}
    set {_uniqueStorage()._bgmodeGlobalSettings = newValue}
  }
  /// Returns true if `bgmodeGlobalSettings` has been explicitly set.
  public var hasBgmodeGlobalSettings: Bool {return _storage._bgmodeGlobalSettings != nil}
  /// Clears the value of `bgmodeGlobalSettings`. Subsequent reads from it will return its default value.
  public mutating func clearBgmodeGlobalSettings() {_uniqueStorage()._bgmodeGlobalSettings = nil}

  public var probeSettings: POGOProtos_Settings_ProbeSettings {
    get {return _storage._probeSettings ?? POGOProtos_Settings_ProbeSettings()}
    set {_uniqueStorage()._probeSettings = newValue}
  }
  /// Returns true if `probeSettings` has been explicitly set.
  public var hasProbeSettings: Bool {return _storage._probeSettings != nil}
  /// Clears the value of `probeSettings`. Subsequent reads from it will return its default value.
  public mutating func clearProbeSettings() {_uniqueStorage()._probeSettings = nil}

  public var purchasedSettings: POGOProtos_Settings_PokecoinPurchaseDisplaySettings {
    get {return _storage._purchasedSettings ?? POGOProtos_Settings_PokecoinPurchaseDisplaySettings()}
    set {_uniqueStorage()._purchasedSettings = newValue}
  }
  /// Returns true if `purchasedSettings` has been explicitly set.
  public var hasPurchasedSettings: Bool {return _storage._purchasedSettings != nil}
  /// Clears the value of `purchasedSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPurchasedSettings() {_uniqueStorage()._purchasedSettings = nil}

  public var helpshiftSettings: POGOProtos_Settings_HelpshiftSettings {
    get {return _storage._helpshiftSettings ?? POGOProtos_Settings_HelpshiftSettings()}
    set {_uniqueStorage()._helpshiftSettings = newValue}
  }
  /// Returns true if `helpshiftSettings` has been explicitly set.
  public var hasHelpshiftSettings: Bool {return _storage._helpshiftSettings != nil}
  /// Clears the value of `helpshiftSettings`. Subsequent reads from it will return its default value.
  public mutating func clearHelpshiftSettings() {_uniqueStorage()._helpshiftSettings = nil}

  public var arPhotoSettings: POGOProtos_Settings_ArPhotoGlobalSettings {
    get {return _storage._arPhotoSettings ?? POGOProtos_Settings_ArPhotoGlobalSettings()}
    set {_uniqueStorage()._arPhotoSettings = newValue}
  }
  /// Returns true if `arPhotoSettings` has been explicitly set.
  public var hasArPhotoSettings: Bool {return _storage._arPhotoSettings != nil}
  /// Clears the value of `arPhotoSettings`. Subsequent reads from it will return its default value.
  public mutating func clearArPhotoSettings() {_uniqueStorage()._arPhotoSettings = nil}

  public var poiSettings: POGOProtos_Settings_PoiGlobalSettings {
    get {return _storage._poiSettings ?? POGOProtos_Settings_PoiGlobalSettings()}
    set {_uniqueStorage()._poiSettings = newValue}
  }
  /// Returns true if `poiSettings` has been explicitly set.
  public var hasPoiSettings: Bool {return _storage._poiSettings != nil}
  /// Clears the value of `poiSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPoiSettings() {_uniqueStorage()._poiSettings = nil}

  public var pokemonSettings: POGOProtos_Settings_PokemonGlobalSettings {
    get {return _storage._pokemonSettings ?? POGOProtos_Settings_PokemonGlobalSettings()}
    set {_uniqueStorage()._pokemonSettings = newValue}
  }
  /// Returns true if `pokemonSettings` has been explicitly set.
  public var hasPokemonSettings: Bool {return _storage._pokemonSettings != nil}
  /// Clears the value of `pokemonSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPokemonSettings() {_uniqueStorage()._pokemonSettings = nil}

  public var avatarSettings: POGOProtos_Settings_AvatarGlobalSettings {
    get {return _storage._avatarSettings ?? POGOProtos_Settings_AvatarGlobalSettings()}
    set {_uniqueStorage()._avatarSettings = newValue}
  }
  /// Returns true if `avatarSettings` has been explicitly set.
  public var hasAvatarSettings: Bool {return _storage._avatarSettings != nil}
  /// Clears the value of `avatarSettings`. Subsequent reads from it will return its default value.
  public mutating func clearAvatarSettings() {_uniqueStorage()._avatarSettings = nil}

  public var evolutionV2Settings: POGOProtos_Settings_EvolutionV2Settings {
    get {return _storage._evolutionV2Settings ?? POGOProtos_Settings_EvolutionV2Settings()}
    set {_uniqueStorage()._evolutionV2Settings = newValue}
  }
  /// Returns true if `evolutionV2Settings` has been explicitly set.
  public var hasEvolutionV2Settings: Bool {return _storage._evolutionV2Settings != nil}
  /// Clears the value of `evolutionV2Settings`. Subsequent reads from it will return its default value.
  public mutating func clearEvolutionV2Settings() {_uniqueStorage()._evolutionV2Settings = nil}

  public var incidentSettings: POGOProtos_Settings_IncidentGlobalSettings {
    get {return _storage._incidentSettings ?? POGOProtos_Settings_IncidentGlobalSettings()}
    set {_uniqueStorage()._incidentSettings = newValue}
  }
  /// Returns true if `incidentSettings` has been explicitly set.
  public var hasIncidentSettings: Bool {return _storage._incidentSettings != nil}
  /// Clears the value of `incidentSettings`. Subsequent reads from it will return its default value.
  public mutating func clearIncidentSettings() {_uniqueStorage()._incidentSettings = nil}

  public var koalaSettings: POGOProtos_Settings_KoalaSettings {
    get {return _storage._koalaSettings ?? POGOProtos_Settings_KoalaSettings()}
    set {_uniqueStorage()._koalaSettings = newValue}
  }
  /// Returns true if `koalaSettings` has been explicitly set.
  public var hasKoalaSettings: Bool {return _storage._koalaSettings != nil}
  /// Clears the value of `koalaSettings`. Subsequent reads from it will return its default value.
  public mutating func clearKoalaSettings() {_uniqueStorage()._koalaSettings = nil}

  public var kangarooSettings: POGOProtos_Settings_KangarooSettings {
    get {return _storage._kangarooSettings ?? POGOProtos_Settings_KangarooSettings()}
    set {_uniqueStorage()._kangarooSettings = newValue}
  }
  /// Returns true if `kangarooSettings` has been explicitly set.
  public var hasKangarooSettings: Bool {return _storage._kangarooSettings != nil}
  /// Clears the value of `kangarooSettings`. Subsequent reads from it will return its default value.
  public mutating func clearKangarooSettings() {_uniqueStorage()._kangarooSettings = nil}

  public var buddySettings: POGOProtos_Settings_BuddyGlobalSettings {
    get {return _storage._buddySettings ?? POGOProtos_Settings_BuddyGlobalSettings()}
    set {_uniqueStorage()._buddySettings = newValue}
  }
  /// Returns true if `buddySettings` has been explicitly set.
  public var hasBuddySettings: Bool {return _storage._buddySettings != nil}
  /// Clears the value of `buddySettings`. Subsequent reads from it will return its default value.
  public mutating func clearBuddySettings() {_uniqueStorage()._buddySettings = nil}

  public var inputSettings: POGOProtos_Settings_InputSettings {
    get {return _storage._inputSettings ?? POGOProtos_Settings_InputSettings()}
    set {_uniqueStorage()._inputSettings = newValue}
  }
  /// Returns true if `inputSettings` has been explicitly set.
  public var hasInputSettings: Bool {return _storage._inputSettings != nil}
  /// Clears the value of `inputSettings`. Subsequent reads from it will return its default value.
  public mutating func clearInputSettings() {_uniqueStorage()._inputSettings = nil}

  public var gmtSettings: POGOProtos_Settings_GmtSettings {
    get {return _storage._gmtSettings ?? POGOProtos_Settings_GmtSettings()}
    set {_uniqueStorage()._gmtSettings = newValue}
  }
  /// Returns true if `gmtSettings` has been explicitly set.
  public var hasGmtSettings: Bool {return _storage._gmtSettings != nil}
  /// Clears the value of `gmtSettings`. Subsequent reads from it will return its default value.
  public mutating func clearGmtSettings() {_uniqueStorage()._gmtSettings = nil}

  public var useLocalTimeAction: Bool {
    get {return _storage._useLocalTimeAction}
    set {_uniqueStorage()._useLocalTimeAction = newValue}
  }

  public var ardkConfigSettings: POGOProtos_Settings_ArdkConfigSettings {
    get {return _storage._ardkConfigSettings ?? POGOProtos_Settings_ArdkConfigSettings()}
    set {_uniqueStorage()._ardkConfigSettings = newValue}
  }
  /// Returns true if `ardkConfigSettings` has been explicitly set.
  public var hasArdkConfigSettings: Bool {return _storage._ardkConfigSettings != nil}
  /// Clears the value of `ardkConfigSettings`. Subsequent reads from it will return its default value.
  public mutating func clearArdkConfigSettings() {_uniqueStorage()._ardkConfigSettings = nil}

  public var enabledPokemon: POGOProtos_Settings_EnabledPokemonSettings {
    get {return _storage._enabledPokemon ?? POGOProtos_Settings_EnabledPokemonSettings()}
    set {_uniqueStorage()._enabledPokemon = newValue}
  }
  /// Returns true if `enabledPokemon` has been explicitly set.
  public var hasEnabledPokemon: Bool {return _storage._enabledPokemon != nil}
  /// Clears the value of `enabledPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearEnabledPokemon() {_uniqueStorage()._enabledPokemon = nil}

  public var pokemonBulkUpgradeSettings: POGOProtos_Settings_PokemonBulkUpgradeSettings {
    get {return _storage._pokemonBulkUpgradeSettings ?? POGOProtos_Settings_PokemonBulkUpgradeSettings()}
    set {_uniqueStorage()._pokemonBulkUpgradeSettings = newValue}
  }
  /// Returns true if `pokemonBulkUpgradeSettings` has been explicitly set.
  public var hasPokemonBulkUpgradeSettings: Bool {return _storage._pokemonBulkUpgradeSettings != nil}
  /// Clears the value of `pokemonBulkUpgradeSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPokemonBulkUpgradeSettings() {_uniqueStorage()._pokemonBulkUpgradeSettings = nil}

  public var plannedDowntimeSettings: POGOProtos_Settings_PlannedDowntimeSettings {
    get {return _storage._plannedDowntimeSettings ?? POGOProtos_Settings_PlannedDowntimeSettings()}
    set {_uniqueStorage()._plannedDowntimeSettings = newValue}
  }
  /// Returns true if `plannedDowntimeSettings` has been explicitly set.
  public var hasPlannedDowntimeSettings: Bool {return _storage._plannedDowntimeSettings != nil}
  /// Clears the value of `plannedDowntimeSettings`. Subsequent reads from it will return its default value.
  public mutating func clearPlannedDowntimeSettings() {_uniqueStorage()._plannedDowntimeSettings = nil}

  public var arMappingSettings: POGOProtos_Settings_ArMappingSettings {
    get {return _storage._arMappingSettings ?? POGOProtos_Settings_ArMappingSettings()}
    set {_uniqueStorage()._arMappingSettings = newValue}
  }
  /// Returns true if `arMappingSettings` has been explicitly set.
  public var hasArMappingSettings: Bool {return _storage._arMappingSettings != nil}
  /// Clears the value of `arMappingSettings`. Subsequent reads from it will return its default value.
  public mutating func clearArMappingSettings() {_uniqueStorage()._arMappingSettings = nil}

  public var raidInviteFriendsSettings: POGOProtos_Settings_RaidInviteFriendsSettings {
    get {return _storage._raidInviteFriendsSettings ?? POGOProtos_Settings_RaidInviteFriendsSettings()}
    set {_uniqueStorage()._raidInviteFriendsSettings = newValue}
  }
  /// Returns true if `raidInviteFriendsSettings` has been explicitly set.
  public var hasRaidInviteFriendsSettings: Bool {return _storage._raidInviteFriendsSettings != nil}
  /// Clears the value of `raidInviteFriendsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearRaidInviteFriendsSettings() {_uniqueStorage()._raidInviteFriendsSettings = nil}

  public var dailyEncounterSettings: POGOProtos_Settings_DailyEncounterGlobalSettings {
    get {return _storage._dailyEncounterSettings ?? POGOProtos_Settings_DailyEncounterGlobalSettings()}
    set {_uniqueStorage()._dailyEncounterSettings = newValue}
  }
  /// Returns true if `dailyEncounterSettings` has been explicitly set.
  public var hasDailyEncounterSettings: Bool {return _storage._dailyEncounterSettings != nil}
  /// Clears the value of `dailyEncounterSettings`. Subsequent reads from it will return its default value.
  public mutating func clearDailyEncounterSettings() {_uniqueStorage()._dailyEncounterSettings = nil}

  public var raidTicketSettings: POGOProtos_Settings_RaidTicketSettings {
    get {return _storage._raidTicketSettings ?? POGOProtos_Settings_RaidTicketSettings()}
    set {_uniqueStorage()._raidTicketSettings = newValue}
  }
  /// Returns true if `raidTicketSettings` has been explicitly set.
  public var hasRaidTicketSettings: Bool {return _storage._raidTicketSettings != nil}
  /// Clears the value of `raidTicketSettings`. Subsequent reads from it will return its default value.
  public mutating func clearRaidTicketSettings() {_uniqueStorage()._raidTicketSettings = nil}

  public var rocketBalloonSettings: POGOProtos_Settings_RocketBalloonGlobalSettings {
    get {return _storage._rocketBalloonSettings ?? POGOProtos_Settings_RocketBalloonGlobalSettings()}
    set {_uniqueStorage()._rocketBalloonSettings = newValue}
  }
  /// Returns true if `rocketBalloonSettings` has been explicitly set.
  public var hasRocketBalloonSettings: Bool {return _storage._rocketBalloonSettings != nil}
  /// Clears the value of `rocketBalloonSettings`. Subsequent reads from it will return its default value.
  public mutating func clearRocketBalloonSettings() {_uniqueStorage()._rocketBalloonSettings = nil}

  public var timedGroupChallengeSettings: POGOProtos_Settings_TimedGroupChallengeSettings {
    get {return _storage._timedGroupChallengeSettings ?? POGOProtos_Settings_TimedGroupChallengeSettings()}
    set {_uniqueStorage()._timedGroupChallengeSettings = newValue}
  }
  /// Returns true if `timedGroupChallengeSettings` has been explicitly set.
  public var hasTimedGroupChallengeSettings: Bool {return _storage._timedGroupChallengeSettings != nil}
  /// Clears the value of `timedGroupChallengeSettings`. Subsequent reads from it will return its default value.
  public mutating func clearTimedGroupChallengeSettings() {_uniqueStorage()._timedGroupChallengeSettings = nil}

  public var megaEvoSettings: POGOProtos_Settings_MegaEvoGlobalSettings {
    get {return _storage._megaEvoSettings ?? POGOProtos_Settings_MegaEvoGlobalSettings()}
    set {_uniqueStorage()._megaEvoSettings = newValue}
  }
  /// Returns true if `megaEvoSettings` has been explicitly set.
  public var hasMegaEvoSettings: Bool {return _storage._megaEvoSettings != nil}
  /// Clears the value of `megaEvoSettings`. Subsequent reads from it will return its default value.
  public mutating func clearMegaEvoSettings() {_uniqueStorage()._megaEvoSettings = nil}

  public var lobbyClientSettings: POGOProtos_Settings_LobbyClientSettings {
    get {return _storage._lobbyClientSettings ?? POGOProtos_Settings_LobbyClientSettings()}
    set {_uniqueStorage()._lobbyClientSettings = newValue}
  }
  /// Returns true if `lobbyClientSettings` has been explicitly set.
  public var hasLobbyClientSettings: Bool {return _storage._lobbyClientSettings != nil}
  /// Clears the value of `lobbyClientSettings`. Subsequent reads from it will return its default value.
  public mutating func clearLobbyClientSettings() {_uniqueStorage()._lobbyClientSettings = nil}

  public var questEvolutionSettings: POGOProtos_Settings_QuestEvolutionGlobalSettings {
    get {return _storage._questEvolutionSettings ?? POGOProtos_Settings_QuestEvolutionGlobalSettings()}
    set {_uniqueStorage()._questEvolutionSettings = newValue}
  }
  /// Returns true if `questEvolutionSettings` has been explicitly set.
  public var hasQuestEvolutionSettings: Bool {return _storage._questEvolutionSettings != nil}
  /// Clears the value of `questEvolutionSettings`. Subsequent reads from it will return its default value.
  public mutating func clearQuestEvolutionSettings() {_uniqueStorage()._questEvolutionSettings = nil}

  public var sponsoredPoiFeedbackSettings: POGOProtos_Settings_SponsoredPoiFeedbackSettings {
    get {return _storage._sponsoredPoiFeedbackSettings ?? POGOProtos_Settings_SponsoredPoiFeedbackSettings()}
    set {_uniqueStorage()._sponsoredPoiFeedbackSettings = newValue}
  }
  /// Returns true if `sponsoredPoiFeedbackSettings` has been explicitly set.
  public var hasSponsoredPoiFeedbackSettings: Bool {return _storage._sponsoredPoiFeedbackSettings != nil}
  /// Clears the value of `sponsoredPoiFeedbackSettings`. Subsequent reads from it will return its default value.
  public mutating func clearSponsoredPoiFeedbackSettings() {_uniqueStorage()._sponsoredPoiFeedbackSettings = nil}

  public var crashlyticsSettings: POGOProtos_Settings_CrashlyticsSettings {
    get {return _storage._crashlyticsSettings ?? POGOProtos_Settings_CrashlyticsSettings()}
    set {_uniqueStorage()._crashlyticsSettings = newValue}
  }
  /// Returns true if `crashlyticsSettings` has been explicitly set.
  public var hasCrashlyticsSettings: Bool {return _storage._crashlyticsSettings != nil}
  /// Clears the value of `crashlyticsSettings`. Subsequent reads from it will return its default value.
  public mutating func clearCrashlyticsSettings() {_uniqueStorage()._crashlyticsSettings = nil}

  public var catchPokemonSettings: POGOProtos_Settings_CatchPokemonGlobalSettings {
    get {return _storage._catchPokemonSettings ?? POGOProtos_Settings_CatchPokemonGlobalSettings()}
    set {_uniqueStorage()._catchPokemonSettings = newValue}
  }
  /// Returns true if `catchPokemonSettings` has been explicitly set.
  public var hasCatchPokemonSettings: Bool {return _storage._catchPokemonSettings != nil}
  /// Clears the value of `catchPokemonSettings`. Subsequent reads from it will return its default value.
  public mutating func clearCatchPokemonSettings() {_uniqueStorage()._catchPokemonSettings = nil}

  public var idfaSettings: POGOProtos_Settings_IdfaSettings {
    get {return _storage._idfaSettings ?? POGOProtos_Settings_IdfaSettings()}
    set {_uniqueStorage()._idfaSettings = newValue}
  }
  /// Returns true if `idfaSettings` has been explicitly set.
  public var hasIdfaSettings: Bool {return _storage._idfaSettings != nil}
  /// Clears the value of `idfaSettings`. Subsequent reads from it will return its default value.
  public mutating func clearIdfaSettings() {_uniqueStorage()._idfaSettings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings"

extension POGOProtos_Settings_GlobalSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GlobalSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "fort_settings"),
    3: .standard(proto: "map_settings"),
    4: .standard(proto: "level_settings"),
    5: .standard(proto: "inventory_settings"),
    6: .standard(proto: "minimum_client_version"),
    7: .standard(proto: "gps_settings"),
    8: .standard(proto: "festival_settings"),
    9: .standard(proto: "event_settings"),
    10: .standard(proto: "max_pokemon_types"),
    11: .standard(proto: "sfida_settings"),
    12: .standard(proto: "news_settings"),
    13: .standard(proto: "translation_settings"),
    14: .standard(proto: "passcode_settings"),
    15: .standard(proto: "notification_settings"),
    16: .standard(proto: "client_app_blacklist"),
    17: .standard(proto: "client_perf_settings"),
    18: .standard(proto: "news_global_settings"),
    19: .standard(proto: "quest_global_settings"),
    20: .standard(proto: "beluga_global_settings"),
    21: .standard(proto: "telemetry_global_settings"),
    22: .standard(proto: "login_settings"),
    23: .standard(proto: "social_settings"),
    24: .standard(proto: "trading_global_settings"),
    25: .standard(proto: "additional_allowed_pokemon_ids"),
    26: .standard(proto: "upsight_logging_settings"),
    27: .standard(proto: "combat_global_settings"),
    28: .standard(proto: "third_move_settings"),
    29: .standard(proto: "combat_challenge_global_settings"),
    30: .standard(proto: "bgmode_global_settings"),
    31: .standard(proto: "probe_settings"),
    32: .standard(proto: "purchased_settings"),
    33: .standard(proto: "helpshift_settings"),
    34: .standard(proto: "ar_photo_settings"),
    35: .standard(proto: "poi_settings"),
    36: .standard(proto: "pokemon_settings"),
    37: .standard(proto: "avatar_settings"),
    38: .standard(proto: "evolution_v2_settings"),
    39: .standard(proto: "incident_settings"),
    40: .standard(proto: "koala_settings"),
    41: .standard(proto: "kangaroo_settings"),
    43: .standard(proto: "buddy_settings"),
    44: .standard(proto: "input_settings"),
    45: .standard(proto: "gmt_settings"),
    47: .standard(proto: "use_local_time_action"),
    48: .standard(proto: "ardk_config_settings"),
    49: .standard(proto: "enabled_pokemon"),
    50: .standard(proto: "pokemon_bulk_upgrade_settings"),
    51: .standard(proto: "planned_downtime_settings"),
    52: .standard(proto: "ar_mapping_settings"),
    53: .standard(proto: "raid_invite_friends_settings"),
    54: .standard(proto: "daily_encounter_settings"),
    55: .standard(proto: "raid_ticket_settings"),
    56: .standard(proto: "rocket_balloon_settings"),
    57: .standard(proto: "timed_group_challenge_settings"),
    58: .standard(proto: "mega_evo_settings"),
    59: .standard(proto: "lobby_client_settings"),
    61: .standard(proto: "quest_evolution_settings"),
    62: .standard(proto: "sponsored_poi_feedback_settings"),
    65: .standard(proto: "crashlytics_settings"),
    66: .standard(proto: "catch_pokemon_settings"),
    67: .standard(proto: "idfa_settings"),
  ]

  fileprivate class _StorageClass {
    var _fortSettings: POGOProtos_Settings_FortSettings? = nil
    var _mapSettings: POGOProtos_Settings_MapSettings? = nil
    var _levelSettings: POGOProtos_Settings_LevelSettings? = nil
    var _inventorySettings: POGOProtos_Settings_InventorySettings? = nil
    var _minimumClientVersion: String = String()
    var _gpsSettings: POGOProtos_Settings_GpsSettings? = nil
    var _festivalSettings: POGOProtos_Settings_FestivalSettings? = nil
    var _eventSettings: POGOProtos_Settings_EventSettings? = nil
    var _maxPokemonTypes: Int32 = 0
    var _sfidaSettings: POGOProtos_Settings_SfidaSettings? = nil
    var _newsSettings: POGOProtos_Settings_NewsSettings? = nil
    var _translationSettings: POGOProtos_Settings_TranslationSettings? = nil
    var _passcodeSettings: POGOProtos_Settings_PasscodeSettings? = nil
    var _notificationSettings: POGOProtos_Settings_NotificationSettings? = nil
    var _clientAppBlacklist: [String] = []
    var _clientPerfSettings: POGOProtos_Settings_ClientPerformanceSettings? = nil
    var _newsGlobalSettings: POGOProtos_Settings_NewsGlobalSettings? = nil
    var _questGlobalSettings: POGOProtos_Settings_QuestGlobalSettings? = nil
    var _belugaGlobalSettings: POGOProtos_Settings_BelugaGlobalSettings? = nil
    var _telemetryGlobalSettings: POGOProtos_Settings_TelemetryGlobalSettings? = nil
    var _loginSettings: POGOProtos_Settings_LoginSettings? = nil
    var _socialSettings: POGOProtos_Settings_SocialClientSettings? = nil
    var _tradingGlobalSettings: POGOProtos_Settings_TradingGlobalSettings? = nil
    var _additionalAllowedPokemonIds: [POGOProtos_Enums_PokemonId] = []
    var _upsightLoggingSettings: POGOProtos_Settings_UpsightLoggingSettings? = nil
    var _combatGlobalSettings: POGOProtos_Settings_CombatGlobalSettings? = nil
    var _thirdMoveSettings: POGOProtos_Settings_ThirdMoveGlobalSettings? = nil
    var _combatChallengeGlobalSettings: POGOProtos_Settings_CombatChallengeGlobalSettings? = nil
    var _bgmodeGlobalSettings: POGOProtos_Settings_BackgroundModeGlobalSettings? = nil
    var _probeSettings: POGOProtos_Settings_ProbeSettings? = nil
    var _purchasedSettings: POGOProtos_Settings_PokecoinPurchaseDisplaySettings? = nil
    var _helpshiftSettings: POGOProtos_Settings_HelpshiftSettings? = nil
    var _arPhotoSettings: POGOProtos_Settings_ArPhotoGlobalSettings? = nil
    var _poiSettings: POGOProtos_Settings_PoiGlobalSettings? = nil
    var _pokemonSettings: POGOProtos_Settings_PokemonGlobalSettings? = nil
    var _avatarSettings: POGOProtos_Settings_AvatarGlobalSettings? = nil
    var _evolutionV2Settings: POGOProtos_Settings_EvolutionV2Settings? = nil
    var _incidentSettings: POGOProtos_Settings_IncidentGlobalSettings? = nil
    var _koalaSettings: POGOProtos_Settings_KoalaSettings? = nil
    var _kangarooSettings: POGOProtos_Settings_KangarooSettings? = nil
    var _buddySettings: POGOProtos_Settings_BuddyGlobalSettings? = nil
    var _inputSettings: POGOProtos_Settings_InputSettings? = nil
    var _gmtSettings: POGOProtos_Settings_GmtSettings? = nil
    var _useLocalTimeAction: Bool = false
    var _ardkConfigSettings: POGOProtos_Settings_ArdkConfigSettings? = nil
    var _enabledPokemon: POGOProtos_Settings_EnabledPokemonSettings? = nil
    var _pokemonBulkUpgradeSettings: POGOProtos_Settings_PokemonBulkUpgradeSettings? = nil
    var _plannedDowntimeSettings: POGOProtos_Settings_PlannedDowntimeSettings? = nil
    var _arMappingSettings: POGOProtos_Settings_ArMappingSettings? = nil
    var _raidInviteFriendsSettings: POGOProtos_Settings_RaidInviteFriendsSettings? = nil
    var _dailyEncounterSettings: POGOProtos_Settings_DailyEncounterGlobalSettings? = nil
    var _raidTicketSettings: POGOProtos_Settings_RaidTicketSettings? = nil
    var _rocketBalloonSettings: POGOProtos_Settings_RocketBalloonGlobalSettings? = nil
    var _timedGroupChallengeSettings: POGOProtos_Settings_TimedGroupChallengeSettings? = nil
    var _megaEvoSettings: POGOProtos_Settings_MegaEvoGlobalSettings? = nil
    var _lobbyClientSettings: POGOProtos_Settings_LobbyClientSettings? = nil
    var _questEvolutionSettings: POGOProtos_Settings_QuestEvolutionGlobalSettings? = nil
    var _sponsoredPoiFeedbackSettings: POGOProtos_Settings_SponsoredPoiFeedbackSettings? = nil
    var _crashlyticsSettings: POGOProtos_Settings_CrashlyticsSettings? = nil
    var _catchPokemonSettings: POGOProtos_Settings_CatchPokemonGlobalSettings? = nil
    var _idfaSettings: POGOProtos_Settings_IdfaSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fortSettings = source._fortSettings
      _mapSettings = source._mapSettings
      _levelSettings = source._levelSettings
      _inventorySettings = source._inventorySettings
      _minimumClientVersion = source._minimumClientVersion
      _gpsSettings = source._gpsSettings
      _festivalSettings = source._festivalSettings
      _eventSettings = source._eventSettings
      _maxPokemonTypes = source._maxPokemonTypes
      _sfidaSettings = source._sfidaSettings
      _newsSettings = source._newsSettings
      _translationSettings = source._translationSettings
      _passcodeSettings = source._passcodeSettings
      _notificationSettings = source._notificationSettings
      _clientAppBlacklist = source._clientAppBlacklist
      _clientPerfSettings = source._clientPerfSettings
      _newsGlobalSettings = source._newsGlobalSettings
      _questGlobalSettings = source._questGlobalSettings
      _belugaGlobalSettings = source._belugaGlobalSettings
      _telemetryGlobalSettings = source._telemetryGlobalSettings
      _loginSettings = source._loginSettings
      _socialSettings = source._socialSettings
      _tradingGlobalSettings = source._tradingGlobalSettings
      _additionalAllowedPokemonIds = source._additionalAllowedPokemonIds
      _upsightLoggingSettings = source._upsightLoggingSettings
      _combatGlobalSettings = source._combatGlobalSettings
      _thirdMoveSettings = source._thirdMoveSettings
      _combatChallengeGlobalSettings = source._combatChallengeGlobalSettings
      _bgmodeGlobalSettings = source._bgmodeGlobalSettings
      _probeSettings = source._probeSettings
      _purchasedSettings = source._purchasedSettings
      _helpshiftSettings = source._helpshiftSettings
      _arPhotoSettings = source._arPhotoSettings
      _poiSettings = source._poiSettings
      _pokemonSettings = source._pokemonSettings
      _avatarSettings = source._avatarSettings
      _evolutionV2Settings = source._evolutionV2Settings
      _incidentSettings = source._incidentSettings
      _koalaSettings = source._koalaSettings
      _kangarooSettings = source._kangarooSettings
      _buddySettings = source._buddySettings
      _inputSettings = source._inputSettings
      _gmtSettings = source._gmtSettings
      _useLocalTimeAction = source._useLocalTimeAction
      _ardkConfigSettings = source._ardkConfigSettings
      _enabledPokemon = source._enabledPokemon
      _pokemonBulkUpgradeSettings = source._pokemonBulkUpgradeSettings
      _plannedDowntimeSettings = source._plannedDowntimeSettings
      _arMappingSettings = source._arMappingSettings
      _raidInviteFriendsSettings = source._raidInviteFriendsSettings
      _dailyEncounterSettings = source._dailyEncounterSettings
      _raidTicketSettings = source._raidTicketSettings
      _rocketBalloonSettings = source._rocketBalloonSettings
      _timedGroupChallengeSettings = source._timedGroupChallengeSettings
      _megaEvoSettings = source._megaEvoSettings
      _lobbyClientSettings = source._lobbyClientSettings
      _questEvolutionSettings = source._questEvolutionSettings
      _sponsoredPoiFeedbackSettings = source._sponsoredPoiFeedbackSettings
      _crashlyticsSettings = source._crashlyticsSettings
      _catchPokemonSettings = source._catchPokemonSettings
      _idfaSettings = source._idfaSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._fortSettings) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._mapSettings) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._levelSettings) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._inventorySettings) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._minimumClientVersion) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._gpsSettings) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._festivalSettings) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._eventSettings) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._maxPokemonTypes) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._sfidaSettings) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._newsSettings) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._translationSettings) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._passcodeSettings) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._notificationSettings) }()
        case 16: try { try decoder.decodeRepeatedStringField(value: &_storage._clientAppBlacklist) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._clientPerfSettings) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._newsGlobalSettings) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._questGlobalSettings) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._belugaGlobalSettings) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._telemetryGlobalSettings) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._loginSettings) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._socialSettings) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._tradingGlobalSettings) }()
        case 25: try { try decoder.decodeRepeatedEnumField(value: &_storage._additionalAllowedPokemonIds) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._upsightLoggingSettings) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._combatGlobalSettings) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._thirdMoveSettings) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._combatChallengeGlobalSettings) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._bgmodeGlobalSettings) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._probeSettings) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._purchasedSettings) }()
        case 33: try { try decoder.decodeSingularMessageField(value: &_storage._helpshiftSettings) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._arPhotoSettings) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._poiSettings) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._pokemonSettings) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._avatarSettings) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._evolutionV2Settings) }()
        case 39: try { try decoder.decodeSingularMessageField(value: &_storage._incidentSettings) }()
        case 40: try { try decoder.decodeSingularMessageField(value: &_storage._koalaSettings) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._kangarooSettings) }()
        case 43: try { try decoder.decodeSingularMessageField(value: &_storage._buddySettings) }()
        case 44: try { try decoder.decodeSingularMessageField(value: &_storage._inputSettings) }()
        case 45: try { try decoder.decodeSingularMessageField(value: &_storage._gmtSettings) }()
        case 47: try { try decoder.decodeSingularBoolField(value: &_storage._useLocalTimeAction) }()
        case 48: try { try decoder.decodeSingularMessageField(value: &_storage._ardkConfigSettings) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._enabledPokemon) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._pokemonBulkUpgradeSettings) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._plannedDowntimeSettings) }()
        case 52: try { try decoder.decodeSingularMessageField(value: &_storage._arMappingSettings) }()
        case 53: try { try decoder.decodeSingularMessageField(value: &_storage._raidInviteFriendsSettings) }()
        case 54: try { try decoder.decodeSingularMessageField(value: &_storage._dailyEncounterSettings) }()
        case 55: try { try decoder.decodeSingularMessageField(value: &_storage._raidTicketSettings) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._rocketBalloonSettings) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._timedGroupChallengeSettings) }()
        case 58: try { try decoder.decodeSingularMessageField(value: &_storage._megaEvoSettings) }()
        case 59: try { try decoder.decodeSingularMessageField(value: &_storage._lobbyClientSettings) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._questEvolutionSettings) }()
        case 62: try { try decoder.decodeSingularMessageField(value: &_storage._sponsoredPoiFeedbackSettings) }()
        case 65: try { try decoder.decodeSingularMessageField(value: &_storage._crashlyticsSettings) }()
        case 66: try { try decoder.decodeSingularMessageField(value: &_storage._catchPokemonSettings) }()
        case 67: try { try decoder.decodeSingularMessageField(value: &_storage._idfaSettings) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._fortSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._mapSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._levelSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._inventorySettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._minimumClientVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minimumClientVersion, fieldNumber: 6)
      }
      if let v = _storage._gpsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._festivalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._eventSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._maxPokemonTypes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxPokemonTypes, fieldNumber: 10)
      }
      if let v = _storage._sfidaSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._newsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._translationSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._passcodeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._notificationSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if !_storage._clientAppBlacklist.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._clientAppBlacklist, fieldNumber: 16)
      }
      if let v = _storage._clientPerfSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._newsGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._questGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._belugaGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._telemetryGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._loginSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._socialSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._tradingGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if !_storage._additionalAllowedPokemonIds.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._additionalAllowedPokemonIds, fieldNumber: 25)
      }
      if let v = _storage._upsightLoggingSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._combatGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._thirdMoveSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._combatChallengeGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._bgmodeGlobalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._probeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._purchasedSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if let v = _storage._helpshiftSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if let v = _storage._arPhotoSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      }
      if let v = _storage._poiSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      }
      if let v = _storage._pokemonSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }
      if let v = _storage._avatarSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      }
      if let v = _storage._evolutionV2Settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if let v = _storage._incidentSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }
      if let v = _storage._koalaSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
      if let v = _storage._kangarooSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
      if let v = _storage._buddySettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      }
      if let v = _storage._inputSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      }
      if let v = _storage._gmtSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      }
      if _storage._useLocalTimeAction != false {
        try visitor.visitSingularBoolField(value: _storage._useLocalTimeAction, fieldNumber: 47)
      }
      if let v = _storage._ardkConfigSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      }
      if let v = _storage._enabledPokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }
      if let v = _storage._pokemonBulkUpgradeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      }
      if let v = _storage._plannedDowntimeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }
      if let v = _storage._arMappingSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      }
      if let v = _storage._raidInviteFriendsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      }
      if let v = _storage._dailyEncounterSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }
      if let v = _storage._raidTicketSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
      }
      if let v = _storage._rocketBalloonSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      }
      if let v = _storage._timedGroupChallengeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      }
      if let v = _storage._megaEvoSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      }
      if let v = _storage._lobbyClientSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      }
      if let v = _storage._questEvolutionSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      }
      if let v = _storage._sponsoredPoiFeedbackSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      }
      if let v = _storage._crashlyticsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
      }
      if let v = _storage._catchPokemonSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      }
      if let v = _storage._idfaSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_GlobalSettings, rhs: POGOProtos_Settings_GlobalSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fortSettings != rhs_storage._fortSettings {return false}
        if _storage._mapSettings != rhs_storage._mapSettings {return false}
        if _storage._levelSettings != rhs_storage._levelSettings {return false}
        if _storage._inventorySettings != rhs_storage._inventorySettings {return false}
        if _storage._minimumClientVersion != rhs_storage._minimumClientVersion {return false}
        if _storage._gpsSettings != rhs_storage._gpsSettings {return false}
        if _storage._festivalSettings != rhs_storage._festivalSettings {return false}
        if _storage._eventSettings != rhs_storage._eventSettings {return false}
        if _storage._maxPokemonTypes != rhs_storage._maxPokemonTypes {return false}
        if _storage._sfidaSettings != rhs_storage._sfidaSettings {return false}
        if _storage._newsSettings != rhs_storage._newsSettings {return false}
        if _storage._translationSettings != rhs_storage._translationSettings {return false}
        if _storage._passcodeSettings != rhs_storage._passcodeSettings {return false}
        if _storage._notificationSettings != rhs_storage._notificationSettings {return false}
        if _storage._clientAppBlacklist != rhs_storage._clientAppBlacklist {return false}
        if _storage._clientPerfSettings != rhs_storage._clientPerfSettings {return false}
        if _storage._newsGlobalSettings != rhs_storage._newsGlobalSettings {return false}
        if _storage._questGlobalSettings != rhs_storage._questGlobalSettings {return false}
        if _storage._belugaGlobalSettings != rhs_storage._belugaGlobalSettings {return false}
        if _storage._telemetryGlobalSettings != rhs_storage._telemetryGlobalSettings {return false}
        if _storage._loginSettings != rhs_storage._loginSettings {return false}
        if _storage._socialSettings != rhs_storage._socialSettings {return false}
        if _storage._tradingGlobalSettings != rhs_storage._tradingGlobalSettings {return false}
        if _storage._additionalAllowedPokemonIds != rhs_storage._additionalAllowedPokemonIds {return false}
        if _storage._upsightLoggingSettings != rhs_storage._upsightLoggingSettings {return false}
        if _storage._combatGlobalSettings != rhs_storage._combatGlobalSettings {return false}
        if _storage._thirdMoveSettings != rhs_storage._thirdMoveSettings {return false}
        if _storage._combatChallengeGlobalSettings != rhs_storage._combatChallengeGlobalSettings {return false}
        if _storage._bgmodeGlobalSettings != rhs_storage._bgmodeGlobalSettings {return false}
        if _storage._probeSettings != rhs_storage._probeSettings {return false}
        if _storage._purchasedSettings != rhs_storage._purchasedSettings {return false}
        if _storage._helpshiftSettings != rhs_storage._helpshiftSettings {return false}
        if _storage._arPhotoSettings != rhs_storage._arPhotoSettings {return false}
        if _storage._poiSettings != rhs_storage._poiSettings {return false}
        if _storage._pokemonSettings != rhs_storage._pokemonSettings {return false}
        if _storage._avatarSettings != rhs_storage._avatarSettings {return false}
        if _storage._evolutionV2Settings != rhs_storage._evolutionV2Settings {return false}
        if _storage._incidentSettings != rhs_storage._incidentSettings {return false}
        if _storage._koalaSettings != rhs_storage._koalaSettings {return false}
        if _storage._kangarooSettings != rhs_storage._kangarooSettings {return false}
        if _storage._buddySettings != rhs_storage._buddySettings {return false}
        if _storage._inputSettings != rhs_storage._inputSettings {return false}
        if _storage._gmtSettings != rhs_storage._gmtSettings {return false}
        if _storage._useLocalTimeAction != rhs_storage._useLocalTimeAction {return false}
        if _storage._ardkConfigSettings != rhs_storage._ardkConfigSettings {return false}
        if _storage._enabledPokemon != rhs_storage._enabledPokemon {return false}
        if _storage._pokemonBulkUpgradeSettings != rhs_storage._pokemonBulkUpgradeSettings {return false}
        if _storage._plannedDowntimeSettings != rhs_storage._plannedDowntimeSettings {return false}
        if _storage._arMappingSettings != rhs_storage._arMappingSettings {return false}
        if _storage._raidInviteFriendsSettings != rhs_storage._raidInviteFriendsSettings {return false}
        if _storage._dailyEncounterSettings != rhs_storage._dailyEncounterSettings {return false}
        if _storage._raidTicketSettings != rhs_storage._raidTicketSettings {return false}
        if _storage._rocketBalloonSettings != rhs_storage._rocketBalloonSettings {return false}
        if _storage._timedGroupChallengeSettings != rhs_storage._timedGroupChallengeSettings {return false}
        if _storage._megaEvoSettings != rhs_storage._megaEvoSettings {return false}
        if _storage._lobbyClientSettings != rhs_storage._lobbyClientSettings {return false}
        if _storage._questEvolutionSettings != rhs_storage._questEvolutionSettings {return false}
        if _storage._sponsoredPoiFeedbackSettings != rhs_storage._sponsoredPoiFeedbackSettings {return false}
        if _storage._crashlyticsSettings != rhs_storage._crashlyticsSettings {return false}
        if _storage._catchPokemonSettings != rhs_storage._catchPokemonSettings {return false}
        if _storage._idfaSettings != rhs_storage._idfaSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
