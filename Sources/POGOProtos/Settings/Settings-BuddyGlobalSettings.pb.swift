// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Settings/BuddyGlobalSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Settings_BuddyGlobalSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var buddyV2MinPlayerLevel: Int32 = 0

  public var buddyMultiplayerMinPlayerLevel: Int32 = 0

  public var enableMonodepth: Bool = false

  public var monodepthDevices: [String] = []

  public var lobbyStatusMessageDurationMs: Int32 = 0

  public var mappingInstructionDurationMs: Int32 = 0

  public var groupPhotoLeaderTrackingIntervalMs: Int32 = 0

  public var groupPhotoCountdownMs: Int32 = 0

  public var lobbyTimeoutMs: Int32 = 0

  public var enableWallabyTelemetry: Bool = false

  public var mappingHintTimeoutMs: Int32 = 0

  public var groupPhotoSimultaneousShots: Int32 = 0

  public var plfeAuthTokensEnabled: Bool = false

  public var groupPhotoShotIntervalMs: Int32 = 0

  public var arbeEndpointURL: String = String()

  public var buddyOnMapRequiredToOpenGifts: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Settings"

extension POGOProtos_Settings_BuddyGlobalSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BuddyGlobalSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "buddy_v2_min_player_level"),
    2: .standard(proto: "buddy_multiplayer_min_player_level"),
    3: .standard(proto: "enable_monodepth"),
    4: .standard(proto: "monodepth_devices"),
    5: .standard(proto: "lobby_status_message_duration_ms"),
    6: .standard(proto: "mapping_instruction_duration_ms"),
    7: .standard(proto: "group_photo_leader_tracking_interval_ms"),
    8: .standard(proto: "group_photo_countdown_ms"),
    9: .standard(proto: "lobby_timeout_ms"),
    10: .standard(proto: "enable_wallaby_telemetry"),
    11: .standard(proto: "mapping_hint_timeout_ms"),
    12: .standard(proto: "group_photo_simultaneous_shots"),
    13: .standard(proto: "plfe_auth_tokens_enabled"),
    14: .standard(proto: "group_photo_shot_interval_ms"),
    15: .standard(proto: "arbe_endpoint_url"),
    16: .standard(proto: "buddy_on_map_required_to_open_gifts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.buddyV2MinPlayerLevel) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.buddyMultiplayerMinPlayerLevel) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.enableMonodepth) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.monodepthDevices) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.lobbyStatusMessageDurationMs) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.mappingInstructionDurationMs) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.groupPhotoLeaderTrackingIntervalMs) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.groupPhotoCountdownMs) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.lobbyTimeoutMs) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.enableWallabyTelemetry) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.mappingHintTimeoutMs) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.groupPhotoSimultaneousShots) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.plfeAuthTokensEnabled) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self.groupPhotoShotIntervalMs) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.arbeEndpointURL) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self.buddyOnMapRequiredToOpenGifts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.buddyV2MinPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.buddyV2MinPlayerLevel, fieldNumber: 1)
    }
    if self.buddyMultiplayerMinPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.buddyMultiplayerMinPlayerLevel, fieldNumber: 2)
    }
    if self.enableMonodepth != false {
      try visitor.visitSingularBoolField(value: self.enableMonodepth, fieldNumber: 3)
    }
    if !self.monodepthDevices.isEmpty {
      try visitor.visitRepeatedStringField(value: self.monodepthDevices, fieldNumber: 4)
    }
    if self.lobbyStatusMessageDurationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.lobbyStatusMessageDurationMs, fieldNumber: 5)
    }
    if self.mappingInstructionDurationMs != 0 {
      try visitor.visitSingularInt32Field(value: self.mappingInstructionDurationMs, fieldNumber: 6)
    }
    if self.groupPhotoLeaderTrackingIntervalMs != 0 {
      try visitor.visitSingularInt32Field(value: self.groupPhotoLeaderTrackingIntervalMs, fieldNumber: 7)
    }
    if self.groupPhotoCountdownMs != 0 {
      try visitor.visitSingularInt32Field(value: self.groupPhotoCountdownMs, fieldNumber: 8)
    }
    if self.lobbyTimeoutMs != 0 {
      try visitor.visitSingularInt32Field(value: self.lobbyTimeoutMs, fieldNumber: 9)
    }
    if self.enableWallabyTelemetry != false {
      try visitor.visitSingularBoolField(value: self.enableWallabyTelemetry, fieldNumber: 10)
    }
    if self.mappingHintTimeoutMs != 0 {
      try visitor.visitSingularInt32Field(value: self.mappingHintTimeoutMs, fieldNumber: 11)
    }
    if self.groupPhotoSimultaneousShots != 0 {
      try visitor.visitSingularInt32Field(value: self.groupPhotoSimultaneousShots, fieldNumber: 12)
    }
    if self.plfeAuthTokensEnabled != false {
      try visitor.visitSingularBoolField(value: self.plfeAuthTokensEnabled, fieldNumber: 13)
    }
    if self.groupPhotoShotIntervalMs != 0 {
      try visitor.visitSingularInt32Field(value: self.groupPhotoShotIntervalMs, fieldNumber: 14)
    }
    if !self.arbeEndpointURL.isEmpty {
      try visitor.visitSingularStringField(value: self.arbeEndpointURL, fieldNumber: 15)
    }
    if self.buddyOnMapRequiredToOpenGifts != false {
      try visitor.visitSingularBoolField(value: self.buddyOnMapRequiredToOpenGifts, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Settings_BuddyGlobalSettings, rhs: POGOProtos_Settings_BuddyGlobalSettings) -> Bool {
    if lhs.buddyV2MinPlayerLevel != rhs.buddyV2MinPlayerLevel {return false}
    if lhs.buddyMultiplayerMinPlayerLevel != rhs.buddyMultiplayerMinPlayerLevel {return false}
    if lhs.enableMonodepth != rhs.enableMonodepth {return false}
    if lhs.monodepthDevices != rhs.monodepthDevices {return false}
    if lhs.lobbyStatusMessageDurationMs != rhs.lobbyStatusMessageDurationMs {return false}
    if lhs.mappingInstructionDurationMs != rhs.mappingInstructionDurationMs {return false}
    if lhs.groupPhotoLeaderTrackingIntervalMs != rhs.groupPhotoLeaderTrackingIntervalMs {return false}
    if lhs.groupPhotoCountdownMs != rhs.groupPhotoCountdownMs {return false}
    if lhs.lobbyTimeoutMs != rhs.lobbyTimeoutMs {return false}
    if lhs.enableWallabyTelemetry != rhs.enableWallabyTelemetry {return false}
    if lhs.mappingHintTimeoutMs != rhs.mappingHintTimeoutMs {return false}
    if lhs.groupPhotoSimultaneousShots != rhs.groupPhotoSimultaneousShots {return false}
    if lhs.plfeAuthTokensEnabled != rhs.plfeAuthTokensEnabled {return false}
    if lhs.groupPhotoShotIntervalMs != rhs.groupPhotoShotIntervalMs {return false}
    if lhs.arbeEndpointURL != rhs.arbeEndpointURL {return false}
    if lhs.buddyOnMapRequiredToOpenGifts != rhs.buddyOnMapRequiredToOpenGifts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
