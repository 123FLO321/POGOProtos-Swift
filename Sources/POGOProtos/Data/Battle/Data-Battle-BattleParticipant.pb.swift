// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Battle/BattleParticipant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Battle_BattleParticipant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var activePokemon: POGOProtos_Data_Battle_BattlePokemonInfo {
    get {return _storage._activePokemon ?? POGOProtos_Data_Battle_BattlePokemonInfo()}
    set {_uniqueStorage()._activePokemon = newValue}
  }
  /// Returns true if `activePokemon` has been explicitly set.
  public var hasActivePokemon: Bool {return _storage._activePokemon != nil}
  /// Clears the value of `activePokemon`. Subsequent reads from it will return its default value.
  public mutating func clearActivePokemon() {_uniqueStorage()._activePokemon = nil}

  public var trainerPublicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _storage._trainerPublicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_uniqueStorage()._trainerPublicProfile = newValue}
  }
  /// Returns true if `trainerPublicProfile` has been explicitly set.
  public var hasTrainerPublicProfile: Bool {return _storage._trainerPublicProfile != nil}
  /// Clears the value of `trainerPublicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearTrainerPublicProfile() {_uniqueStorage()._trainerPublicProfile = nil}

  public var reversePokemon: [POGOProtos_Data_Battle_BattlePokemonInfo] {
    get {return _storage._reversePokemon}
    set {_uniqueStorage()._reversePokemon = newValue}
  }

  public var defeatedPokemon: [POGOProtos_Data_Battle_BattlePokemonInfo] {
    get {return _storage._defeatedPokemon}
    set {_uniqueStorage()._defeatedPokemon = newValue}
  }

  public var lobbyPokemon: [POGOProtos_Map_Pokemon_LobbyPokemon] {
    get {return _storage._lobbyPokemon}
    set {_uniqueStorage()._lobbyPokemon = newValue}
  }

  public var damageDealt: Int32 {
    get {return _storage._damageDealt}
    set {_uniqueStorage()._damageDealt = newValue}
  }

  public var superEffectiveChargeMove: Bool {
    get {return _storage._superEffectiveChargeMove}
    set {_uniqueStorage()._superEffectiveChargeMove = newValue}
  }

  public var weatherBoosted: Bool {
    get {return _storage._weatherBoosted}
    set {_uniqueStorage()._weatherBoosted = newValue}
  }

  public var highestFriendshipMilestone: POGOProtos_Enums_FriendshipLevelMilestone {
    get {return _storage._highestFriendshipMilestone}
    set {_uniqueStorage()._highestFriendshipMilestone = newValue}
  }

  public var friendCodename: [String] {
    get {return _storage._friendCodename}
    set {_uniqueStorage()._friendCodename = newValue}
  }

  public var isRemote: Bool {
    get {return _storage._isRemote}
    set {_uniqueStorage()._isRemote = newValue}
  }

  public var isSocialInvite: Bool {
    get {return _storage._isSocialInvite}
    set {_uniqueStorage()._isSocialInvite = newValue}
  }

  public var hasActiveMegaEvolvedPokemon_p: Bool {
    get {return _storage._hasActiveMegaEvolvedPokemon_p}
    set {_uniqueStorage()._hasActiveMegaEvolvedPokemon_p = newValue}
  }

  public var lobbyJoinTimeMs: Int64 {
    get {return _storage._lobbyJoinTimeMs}
    set {_uniqueStorage()._lobbyJoinTimeMs = newValue}
  }

  public var superEffectiveChargeAttacksUsed: Int32 {
    get {return _storage._superEffectiveChargeAttacksUsed}
    set {_uniqueStorage()._superEffectiveChargeAttacksUsed = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Battle"

extension POGOProtos_Data_Battle_BattleParticipant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BattleParticipant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "active_pokemon"),
    2: .standard(proto: "trainer_public_profile"),
    3: .standard(proto: "reverse_pokemon"),
    4: .standard(proto: "defeated_pokemon"),
    5: .standard(proto: "lobby_pokemon"),
    6: .standard(proto: "damage_dealt"),
    7: .standard(proto: "super_effective_charge_move"),
    8: .standard(proto: "weather_boosted"),
    9: .standard(proto: "highest_friendship_milestone"),
    10: .standard(proto: "friend_codename"),
    11: .standard(proto: "is_remote"),
    12: .standard(proto: "is_social_invite"),
    13: .standard(proto: "has_active_mega_evolved_pokemon"),
    14: .standard(proto: "lobby_join_time_ms"),
    15: .standard(proto: "super_effective_charge_attacks_used"),
  ]

  fileprivate class _StorageClass {
    var _activePokemon: POGOProtos_Data_Battle_BattlePokemonInfo? = nil
    var _trainerPublicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
    var _reversePokemon: [POGOProtos_Data_Battle_BattlePokemonInfo] = []
    var _defeatedPokemon: [POGOProtos_Data_Battle_BattlePokemonInfo] = []
    var _lobbyPokemon: [POGOProtos_Map_Pokemon_LobbyPokemon] = []
    var _damageDealt: Int32 = 0
    var _superEffectiveChargeMove: Bool = false
    var _weatherBoosted: Bool = false
    var _highestFriendshipMilestone: POGOProtos_Enums_FriendshipLevelMilestone = .friendshipLevelUnset
    var _friendCodename: [String] = []
    var _isRemote: Bool = false
    var _isSocialInvite: Bool = false
    var _hasActiveMegaEvolvedPokemon_p: Bool = false
    var _lobbyJoinTimeMs: Int64 = 0
    var _superEffectiveChargeAttacksUsed: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _activePokemon = source._activePokemon
      _trainerPublicProfile = source._trainerPublicProfile
      _reversePokemon = source._reversePokemon
      _defeatedPokemon = source._defeatedPokemon
      _lobbyPokemon = source._lobbyPokemon
      _damageDealt = source._damageDealt
      _superEffectiveChargeMove = source._superEffectiveChargeMove
      _weatherBoosted = source._weatherBoosted
      _highestFriendshipMilestone = source._highestFriendshipMilestone
      _friendCodename = source._friendCodename
      _isRemote = source._isRemote
      _isSocialInvite = source._isSocialInvite
      _hasActiveMegaEvolvedPokemon_p = source._hasActiveMegaEvolvedPokemon_p
      _lobbyJoinTimeMs = source._lobbyJoinTimeMs
      _superEffectiveChargeAttacksUsed = source._superEffectiveChargeAttacksUsed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._activePokemon) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._trainerPublicProfile) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._reversePokemon) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._defeatedPokemon) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._lobbyPokemon) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._damageDealt) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._superEffectiveChargeMove) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._weatherBoosted) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._highestFriendshipMilestone) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._friendCodename) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isRemote) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._isSocialInvite) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._hasActiveMegaEvolvedPokemon_p) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._lobbyJoinTimeMs) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._superEffectiveChargeAttacksUsed) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._activePokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._trainerPublicProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._reversePokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reversePokemon, fieldNumber: 3)
      }
      if !_storage._defeatedPokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._defeatedPokemon, fieldNumber: 4)
      }
      if !_storage._lobbyPokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._lobbyPokemon, fieldNumber: 5)
      }
      if _storage._damageDealt != 0 {
        try visitor.visitSingularInt32Field(value: _storage._damageDealt, fieldNumber: 6)
      }
      if _storage._superEffectiveChargeMove != false {
        try visitor.visitSingularBoolField(value: _storage._superEffectiveChargeMove, fieldNumber: 7)
      }
      if _storage._weatherBoosted != false {
        try visitor.visitSingularBoolField(value: _storage._weatherBoosted, fieldNumber: 8)
      }
      if _storage._highestFriendshipMilestone != .friendshipLevelUnset {
        try visitor.visitSingularEnumField(value: _storage._highestFriendshipMilestone, fieldNumber: 9)
      }
      if !_storage._friendCodename.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._friendCodename, fieldNumber: 10)
      }
      if _storage._isRemote != false {
        try visitor.visitSingularBoolField(value: _storage._isRemote, fieldNumber: 11)
      }
      if _storage._isSocialInvite != false {
        try visitor.visitSingularBoolField(value: _storage._isSocialInvite, fieldNumber: 12)
      }
      if _storage._hasActiveMegaEvolvedPokemon_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasActiveMegaEvolvedPokemon_p, fieldNumber: 13)
      }
      if _storage._lobbyJoinTimeMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lobbyJoinTimeMs, fieldNumber: 14)
      }
      if _storage._superEffectiveChargeAttacksUsed != 0 {
        try visitor.visitSingularInt32Field(value: _storage._superEffectiveChargeAttacksUsed, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Battle_BattleParticipant, rhs: POGOProtos_Data_Battle_BattleParticipant) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._activePokemon != rhs_storage._activePokemon {return false}
        if _storage._trainerPublicProfile != rhs_storage._trainerPublicProfile {return false}
        if _storage._reversePokemon != rhs_storage._reversePokemon {return false}
        if _storage._defeatedPokemon != rhs_storage._defeatedPokemon {return false}
        if _storage._lobbyPokemon != rhs_storage._lobbyPokemon {return false}
        if _storage._damageDealt != rhs_storage._damageDealt {return false}
        if _storage._superEffectiveChargeMove != rhs_storage._superEffectiveChargeMove {return false}
        if _storage._weatherBoosted != rhs_storage._weatherBoosted {return false}
        if _storage._highestFriendshipMilestone != rhs_storage._highestFriendshipMilestone {return false}
        if _storage._friendCodename != rhs_storage._friendCodename {return false}
        if _storage._isRemote != rhs_storage._isRemote {return false}
        if _storage._isSocialInvite != rhs_storage._isSocialInvite {return false}
        if _storage._hasActiveMegaEvolvedPokemon_p != rhs_storage._hasActiveMegaEvolvedPokemon_p {return false}
        if _storage._lobbyJoinTimeMs != rhs_storage._lobbyJoinTimeMs {return false}
        if _storage._superEffectiveChargeAttacksUsed != rhs_storage._superEffectiveChargeAttacksUsed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
