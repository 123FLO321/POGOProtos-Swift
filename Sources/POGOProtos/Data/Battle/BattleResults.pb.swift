// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Battle/BattleResults.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Data_Battle_BattleResults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gymState: POGOProtos_Data_Gym_GymState {
    get {return _storage._gymState ?? POGOProtos_Data_Gym_GymState()}
    set {_uniqueStorage()._gymState = newValue}
  }
  /// Returns true if `gymState` has been explicitly set.
  var hasGymState: Bool {return _storage._gymState != nil}
  /// Clears the value of `gymState`. Subsequent reads from it will return its default value.
  mutating func clearGymState() {_uniqueStorage()._gymState = nil}

  var attackers: [POGOProtos_Data_Battle_BattleParticipant] {
    get {return _storage._attackers}
    set {_uniqueStorage()._attackers = newValue}
  }

  var playerXpAwarded: [Int32] {
    get {return _storage._playerXpAwarded}
    set {_uniqueStorage()._playerXpAwarded = newValue}
  }

  var nextDefenderPokemonID: Int64 {
    get {return _storage._nextDefenderPokemonID}
    set {_uniqueStorage()._nextDefenderPokemonID = newValue}
  }

  var gymPointsDelta: Int32 {
    get {return _storage._gymPointsDelta}
    set {_uniqueStorage()._gymPointsDelta = newValue}
  }

  var gymStatus: POGOProtos_Data_Gym_GymStatusAndDefenders {
    get {return _storage._gymStatus ?? POGOProtos_Data_Gym_GymStatusAndDefenders()}
    set {_uniqueStorage()._gymStatus = newValue}
  }
  /// Returns true if `gymStatus` has been explicitly set.
  var hasGymStatus: Bool {return _storage._gymStatus != nil}
  /// Clears the value of `gymStatus`. Subsequent reads from it will return its default value.
  mutating func clearGymStatus() {_uniqueStorage()._gymStatus = nil}

  var participation: [POGOProtos_Data_Raid_Participation] {
    get {return _storage._participation}
    set {_uniqueStorage()._participation = newValue}
  }

  var raidItemRewards: [POGOProtos_Inventory_Loot] {
    get {return _storage._raidItemRewards}
    set {_uniqueStorage()._raidItemRewards = newValue}
  }

  var postRaidEncounter: [POGOProtos_Data_Raid_RaidEncounter] {
    get {return _storage._postRaidEncounter}
    set {_uniqueStorage()._postRaidEncounter = newValue}
  }

  var gymBadge: [POGOProtos_Data_Badge_AwardedGymBadge] {
    get {return _storage._gymBadge}
    set {_uniqueStorage()._gymBadge = newValue}
  }

  var defaultRaidItemRewards: [POGOProtos_Inventory_Loot] {
    get {return _storage._defaultRaidItemRewards}
    set {_uniqueStorage()._defaultRaidItemRewards = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Battle"

extension POGOProtos_Data_Battle_BattleResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BattleResults"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gym_state"),
    2: .same(proto: "attackers"),
    3: .standard(proto: "player_xp_awarded"),
    4: .standard(proto: "next_defender_pokemon_id"),
    5: .standard(proto: "gym_points_delta"),
    6: .standard(proto: "gym_status"),
    7: .same(proto: "participation"),
    8: .standard(proto: "raid_item_rewards"),
    9: .standard(proto: "post_raid_encounter"),
    10: .standard(proto: "gym_badge"),
    11: .standard(proto: "default_raid_item_rewards"),
  ]

  fileprivate class _StorageClass {
    var _gymState: POGOProtos_Data_Gym_GymState? = nil
    var _attackers: [POGOProtos_Data_Battle_BattleParticipant] = []
    var _playerXpAwarded: [Int32] = []
    var _nextDefenderPokemonID: Int64 = 0
    var _gymPointsDelta: Int32 = 0
    var _gymStatus: POGOProtos_Data_Gym_GymStatusAndDefenders? = nil
    var _participation: [POGOProtos_Data_Raid_Participation] = []
    var _raidItemRewards: [POGOProtos_Inventory_Loot] = []
    var _postRaidEncounter: [POGOProtos_Data_Raid_RaidEncounter] = []
    var _gymBadge: [POGOProtos_Data_Badge_AwardedGymBadge] = []
    var _defaultRaidItemRewards: [POGOProtos_Inventory_Loot] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gymState = source._gymState
      _attackers = source._attackers
      _playerXpAwarded = source._playerXpAwarded
      _nextDefenderPokemonID = source._nextDefenderPokemonID
      _gymPointsDelta = source._gymPointsDelta
      _gymStatus = source._gymStatus
      _participation = source._participation
      _raidItemRewards = source._raidItemRewards
      _postRaidEncounter = source._postRaidEncounter
      _gymBadge = source._gymBadge
      _defaultRaidItemRewards = source._defaultRaidItemRewards
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gymState)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attackers)
        case 3: try decoder.decodeRepeatedInt32Field(value: &_storage._playerXpAwarded)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._nextDefenderPokemonID)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._gymPointsDelta)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._gymStatus)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._participation)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._raidItemRewards)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._postRaidEncounter)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._gymBadge)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._defaultRaidItemRewards)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gymState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attackers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attackers, fieldNumber: 2)
      }
      if !_storage._playerXpAwarded.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._playerXpAwarded, fieldNumber: 3)
      }
      if _storage._nextDefenderPokemonID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._nextDefenderPokemonID, fieldNumber: 4)
      }
      if _storage._gymPointsDelta != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gymPointsDelta, fieldNumber: 5)
      }
      if let v = _storage._gymStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._participation.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._participation, fieldNumber: 7)
      }
      if !_storage._raidItemRewards.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._raidItemRewards, fieldNumber: 8)
      }
      if !_storage._postRaidEncounter.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._postRaidEncounter, fieldNumber: 9)
      }
      if !_storage._gymBadge.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gymBadge, fieldNumber: 10)
      }
      if !_storage._defaultRaidItemRewards.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._defaultRaidItemRewards, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Data_Battle_BattleResults, rhs: POGOProtos_Data_Battle_BattleResults) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gymState != rhs_storage._gymState {return false}
        if _storage._attackers != rhs_storage._attackers {return false}
        if _storage._playerXpAwarded != rhs_storage._playerXpAwarded {return false}
        if _storage._nextDefenderPokemonID != rhs_storage._nextDefenderPokemonID {return false}
        if _storage._gymPointsDelta != rhs_storage._gymPointsDelta {return false}
        if _storage._gymStatus != rhs_storage._gymStatus {return false}
        if _storage._participation != rhs_storage._participation {return false}
        if _storage._raidItemRewards != rhs_storage._raidItemRewards {return false}
        if _storage._postRaidEncounter != rhs_storage._postRaidEncounter {return false}
        if _storage._gymBadge != rhs_storage._gymBadge {return false}
        if _storage._defaultRaidItemRewards != rhs_storage._defaultRaidItemRewards {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
