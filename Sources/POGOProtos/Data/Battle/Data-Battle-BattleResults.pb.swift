// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Battle/BattleResults.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Battle_BattleResults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gymState: POGOProtos_Data_Gym_GymState {
    get {return _gymState ?? POGOProtos_Data_Gym_GymState()}
    set {_gymState = newValue}
  }
  /// Returns true if `gymState` has been explicitly set.
  public var hasGymState: Bool {return self._gymState != nil}
  /// Clears the value of `gymState`. Subsequent reads from it will return its default value.
  public mutating func clearGymState() {self._gymState = nil}

  public var attackers: [POGOProtos_Data_Battle_BattleParticipant] = []

  public var playerXpAwarded: [Int32] = []

  public var nextDefenderPokemonID: Int64 = 0

  public var gymPointsDelta: Int32 = 0

  public var gymStatus: POGOProtos_Data_Gym_GymStatusAndDefenders {
    get {return _gymStatus ?? POGOProtos_Data_Gym_GymStatusAndDefenders()}
    set {_gymStatus = newValue}
  }
  /// Returns true if `gymStatus` has been explicitly set.
  public var hasGymStatus: Bool {return self._gymStatus != nil}
  /// Clears the value of `gymStatus`. Subsequent reads from it will return its default value.
  public mutating func clearGymStatus() {self._gymStatus = nil}

  public var participation: [POGOProtos_Data_Raid_Participation] = []

  public var raidItemRewards: [POGOProtos_Inventory_Loot] = []

  public var postRaidEncounter: [POGOProtos_Data_Raid_RaidEncounter] = []

  public var gymBadge: [POGOProtos_Data_Badge_AwardedGymBadge] = []

  public var defaultRaidItemRewards: [POGOProtos_Inventory_Loot] = []

  public var battleDurationMs: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gymState: POGOProtos_Data_Gym_GymState? = nil
  fileprivate var _gymStatus: POGOProtos_Data_Gym_GymStatusAndDefenders? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Battle"

extension POGOProtos_Data_Battle_BattleResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BattleResults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gym_state"),
    2: .same(proto: "attackers"),
    3: .standard(proto: "player_xp_awarded"),
    4: .standard(proto: "next_defender_pokemon_id"),
    5: .standard(proto: "gym_points_delta"),
    6: .standard(proto: "gym_status"),
    7: .same(proto: "participation"),
    8: .standard(proto: "raid_item_rewards"),
    9: .standard(proto: "post_raid_encounter"),
    10: .standard(proto: "gym_badge"),
    11: .standard(proto: "default_raid_item_rewards"),
    12: .standard(proto: "battle_duration_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._gymState) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.attackers) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.playerXpAwarded) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.nextDefenderPokemonID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.gymPointsDelta) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._gymStatus) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.participation) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.raidItemRewards) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.postRaidEncounter) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.gymBadge) }()
      case 11: try { try decoder.decodeRepeatedMessageField(value: &self.defaultRaidItemRewards) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.battleDurationMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gymState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.attackers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attackers, fieldNumber: 2)
    }
    if !self.playerXpAwarded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.playerXpAwarded, fieldNumber: 3)
    }
    if self.nextDefenderPokemonID != 0 {
      try visitor.visitSingularInt64Field(value: self.nextDefenderPokemonID, fieldNumber: 4)
    }
    if self.gymPointsDelta != 0 {
      try visitor.visitSingularInt32Field(value: self.gymPointsDelta, fieldNumber: 5)
    }
    if let v = self._gymStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.participation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participation, fieldNumber: 7)
    }
    if !self.raidItemRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.raidItemRewards, fieldNumber: 8)
    }
    if !self.postRaidEncounter.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.postRaidEncounter, fieldNumber: 9)
    }
    if !self.gymBadge.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gymBadge, fieldNumber: 10)
    }
    if !self.defaultRaidItemRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.defaultRaidItemRewards, fieldNumber: 11)
    }
    if self.battleDurationMs != 0 {
      try visitor.visitSingularInt64Field(value: self.battleDurationMs, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Battle_BattleResults, rhs: POGOProtos_Data_Battle_BattleResults) -> Bool {
    if lhs._gymState != rhs._gymState {return false}
    if lhs.attackers != rhs.attackers {return false}
    if lhs.playerXpAwarded != rhs.playerXpAwarded {return false}
    if lhs.nextDefenderPokemonID != rhs.nextDefenderPokemonID {return false}
    if lhs.gymPointsDelta != rhs.gymPointsDelta {return false}
    if lhs._gymStatus != rhs._gymStatus {return false}
    if lhs.participation != rhs.participation {return false}
    if lhs.raidItemRewards != rhs.raidItemRewards {return false}
    if lhs.postRaidEncounter != rhs.postRaidEncounter {return false}
    if lhs.gymBadge != rhs.gymBadge {return false}
    if lhs.defaultRaidItemRewards != rhs.defaultRaidItemRewards {return false}
    if lhs.battleDurationMs != rhs.battleDurationMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
