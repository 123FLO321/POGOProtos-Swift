// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/PokemonDisplay.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_PokemonDisplay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var costume: POGOProtos_Enums_Costume = .unset

  public var gender: POGOProtos_Enums_Gender = .unset

  public var shiny: Bool = false

  public var form: POGOProtos_Enums_Form = .unset

  public var weatherBoostedCondition: POGOProtos_Enums_WeatherCondition = .none

  public var alignment: POGOProtos_Data_PokemonDisplay.Alignment = .unset

  public var pokemonBadge: POGOProtos_Data_PokemonDisplay.PokemonBadge = .unset

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Alignment: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case shadow // = 1
    case purified // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .shadow
      case 2: self = .purified
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .shadow: return 1
      case .purified: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum PokemonBadge: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case bestBuddy // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .bestBuddy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .bestBuddy: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_PokemonDisplay.Alignment: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_PokemonDisplay.Alignment] = [
    .unset,
    .shadow,
    .purified,
  ]
}

extension POGOProtos_Data_PokemonDisplay.PokemonBadge: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_PokemonDisplay.PokemonBadge] = [
    .unset,
    .bestBuddy,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data"

extension POGOProtos_Data_PokemonDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PokemonDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "costume"),
    2: .same(proto: "gender"),
    3: .same(proto: "shiny"),
    4: .same(proto: "form"),
    5: .standard(proto: "weather_boosted_condition"),
    6: .same(proto: "alignment"),
    7: .standard(proto: "pokemon_badge"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.costume)
      case 2: try decoder.decodeSingularEnumField(value: &self.gender)
      case 3: try decoder.decodeSingularBoolField(value: &self.shiny)
      case 4: try decoder.decodeSingularEnumField(value: &self.form)
      case 5: try decoder.decodeSingularEnumField(value: &self.weatherBoostedCondition)
      case 6: try decoder.decodeSingularEnumField(value: &self.alignment)
      case 7: try decoder.decodeSingularEnumField(value: &self.pokemonBadge)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.costume != .unset {
      try visitor.visitSingularEnumField(value: self.costume, fieldNumber: 1)
    }
    if self.gender != .unset {
      try visitor.visitSingularEnumField(value: self.gender, fieldNumber: 2)
    }
    if self.shiny != false {
      try visitor.visitSingularBoolField(value: self.shiny, fieldNumber: 3)
    }
    if self.form != .unset {
      try visitor.visitSingularEnumField(value: self.form, fieldNumber: 4)
    }
    if self.weatherBoostedCondition != .none {
      try visitor.visitSingularEnumField(value: self.weatherBoostedCondition, fieldNumber: 5)
    }
    if self.alignment != .unset {
      try visitor.visitSingularEnumField(value: self.alignment, fieldNumber: 6)
    }
    if self.pokemonBadge != .unset {
      try visitor.visitSingularEnumField(value: self.pokemonBadge, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonDisplay, rhs: POGOProtos_Data_PokemonDisplay) -> Bool {
    if lhs.costume != rhs.costume {return false}
    if lhs.gender != rhs.gender {return false}
    if lhs.shiny != rhs.shiny {return false}
    if lhs.form != rhs.form {return false}
    if lhs.weatherBoostedCondition != rhs.weatherBoostedCondition {return false}
    if lhs.alignment != rhs.alignment {return false}
    if lhs.pokemonBadge != rhs.pokemonBadge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonDisplay.Alignment: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALIGNMENT_UNSET"),
    1: .same(proto: "SHADOW"),
    2: .same(proto: "PURIFIED"),
  ]
}

extension POGOProtos_Data_PokemonDisplay.PokemonBadge: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POKEMON_BADGE_UNSET"),
    1: .same(proto: "POKEMON_BADGE_BEST_BUDDY"),
  ]
}
