// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/AssetCache/JournalEntry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_AssetCache_JournalEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subentry: POGOProtos_Data_AssetCache_JournalEntry.OneOf_Subentry? = nil

  public var addEntry: POGOProtos_Data_AssetCache_JournalAddEntry {
    get {
      if case .addEntry(let v)? = subentry {return v}
      return POGOProtos_Data_AssetCache_JournalAddEntry()
    }
    set {subentry = .addEntry(newValue)}
  }

  public var readEntry: POGOProtos_Data_AssetCache_JournalReadEntry {
    get {
      if case .readEntry(let v)? = subentry {return v}
      return POGOProtos_Data_AssetCache_JournalReadEntry()
    }
    set {subentry = .readEntry(newValue)}
  }

  public var removeEntry: POGOProtos_Data_AssetCache_JournalRemoveEntry {
    get {
      if case .removeEntry(let v)? = subentry {return v}
      return POGOProtos_Data_AssetCache_JournalRemoveEntry()
    }
    set {subentry = .removeEntry(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Subentry: Equatable {
    case addEntry(POGOProtos_Data_AssetCache_JournalAddEntry)
    case readEntry(POGOProtos_Data_AssetCache_JournalReadEntry)
    case removeEntry(POGOProtos_Data_AssetCache_JournalRemoveEntry)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_AssetCache_JournalEntry.OneOf_Subentry, rhs: POGOProtos_Data_AssetCache_JournalEntry.OneOf_Subentry) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.addEntry, .addEntry): return {
        guard case .addEntry(let l) = lhs, case .addEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.readEntry, .readEntry): return {
        guard case .readEntry(let l) = lhs, case .readEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.removeEntry, .removeEntry): return {
        guard case .removeEntry(let l) = lhs, case .removeEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.AssetCache"

extension POGOProtos_Data_AssetCache_JournalEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JournalEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "add_entry"),
    2: .standard(proto: "read_entry"),
    3: .standard(proto: "remove_entry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_AssetCache_JournalAddEntry?
        if let current = self.subentry {
          try decoder.handleConflictingOneOf()
          if case .addEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.subentry = .addEntry(v)}
      }()
      case 2: try {
        var v: POGOProtos_Data_AssetCache_JournalReadEntry?
        if let current = self.subentry {
          try decoder.handleConflictingOneOf()
          if case .readEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.subentry = .readEntry(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_AssetCache_JournalRemoveEntry?
        if let current = self.subentry {
          try decoder.handleConflictingOneOf()
          if case .removeEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.subentry = .removeEntry(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.subentry {
    case .addEntry?: try {
      guard case .addEntry(let v)? = self.subentry else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .readEntry?: try {
      guard case .readEntry(let v)? = self.subentry else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .removeEntry?: try {
      guard case .removeEntry(let v)? = self.subentry else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_AssetCache_JournalEntry, rhs: POGOProtos_Data_AssetCache_JournalEntry) -> Bool {
    if lhs.subentry != rhs.subentry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
