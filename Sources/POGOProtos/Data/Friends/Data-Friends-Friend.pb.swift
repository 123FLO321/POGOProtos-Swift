// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Friends/Friend.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Friends_Friend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: String = String()

  public var codename: String = String()

  public var team: String = String()

  public var score: Int32 = 0

  public var dataWithMe: Data = Data()

  public var version: Int64 = 0

  public var createdMs: Int64 = 0

  public var fbUserID: String = String()

  public var isFacebookFriendship: Bool = false

  public var sharedData: POGOProtos_Data_Friends_Friend.SharedFriendship {
    get {return _sharedData ?? POGOProtos_Data_Friends_Friend.SharedFriendship()}
    set {_sharedData = newValue}
  }
  /// Returns true if `sharedData` has been explicitly set.
  public var hasSharedData: Bool {return self._sharedData != nil}
  /// Clears the value of `sharedData`. Subsequent reads from it will return its default value.
  public mutating func clearSharedData() {self._sharedData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SharedFriendship {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sharedData: Data = Data()

    public var version: Int64 = 0

    public var dataFromMe: Data = Data()

    public var dataToMe: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _sharedData: POGOProtos_Data_Friends_Friend.SharedFriendship? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Friends"

extension POGOProtos_Data_Friends_Friend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Friend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "codename"),
    3: .same(proto: "team"),
    4: .same(proto: "score"),
    5: .standard(proto: "data_with_me"),
    6: .same(proto: "version"),
    7: .standard(proto: "created_ms"),
    8: .standard(proto: "fb_user_id"),
    9: .standard(proto: "is_facebook_friendship"),
    10: .standard(proto: "shared_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.codename) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.team) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.score) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.dataWithMe) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.createdMs) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.fbUserID) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.isFacebookFriendship) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._sharedData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerID.isEmpty {
      try visitor.visitSingularStringField(value: self.playerID, fieldNumber: 1)
    }
    if !self.codename.isEmpty {
      try visitor.visitSingularStringField(value: self.codename, fieldNumber: 2)
    }
    if !self.team.isEmpty {
      try visitor.visitSingularStringField(value: self.team, fieldNumber: 3)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 4)
    }
    if !self.dataWithMe.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataWithMe, fieldNumber: 5)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 6)
    }
    if self.createdMs != 0 {
      try visitor.visitSingularInt64Field(value: self.createdMs, fieldNumber: 7)
    }
    if !self.fbUserID.isEmpty {
      try visitor.visitSingularStringField(value: self.fbUserID, fieldNumber: 8)
    }
    if self.isFacebookFriendship != false {
      try visitor.visitSingularBoolField(value: self.isFacebookFriendship, fieldNumber: 9)
    }
    if let v = self._sharedData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Friends_Friend, rhs: POGOProtos_Data_Friends_Friend) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.codename != rhs.codename {return false}
    if lhs.team != rhs.team {return false}
    if lhs.score != rhs.score {return false}
    if lhs.dataWithMe != rhs.dataWithMe {return false}
    if lhs.version != rhs.version {return false}
    if lhs.createdMs != rhs.createdMs {return false}
    if lhs.fbUserID != rhs.fbUserID {return false}
    if lhs.isFacebookFriendship != rhs.isFacebookFriendship {return false}
    if lhs._sharedData != rhs._sharedData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Friends_Friend.SharedFriendship: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Friends_Friend.protoMessageName + ".SharedFriendship"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shared_data"),
    2: .same(proto: "version"),
    3: .standard(proto: "data_from_me"),
    4: .standard(proto: "data_to_me"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sharedData) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.dataFromMe) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.dataToMe) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sharedData.isEmpty {
      try visitor.visitSingularBytesField(value: self.sharedData, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 2)
    }
    if !self.dataFromMe.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataFromMe, fieldNumber: 3)
    }
    if !self.dataToMe.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataToMe, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Friends_Friend.SharedFriendship, rhs: POGOProtos_Data_Friends_Friend.SharedFriendship) -> Bool {
    if lhs.sharedData != rhs.sharedData {return false}
    if lhs.version != rhs.version {return false}
    if lhs.dataFromMe != rhs.dataFromMe {return false}
    if lhs.dataToMe != rhs.dataToMe {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
