// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Friends/Friend.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Friends_Friend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: String {
    get {return _storage._playerID}
    set {_uniqueStorage()._playerID = newValue}
  }

  public var codename: String {
    get {return _storage._codename}
    set {_uniqueStorage()._codename = newValue}
  }

  public var team: String {
    get {return _storage._team}
    set {_uniqueStorage()._team = newValue}
  }

  public var score: Int32 {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  public var dataWithMe: Data {
    get {return _storage._dataWithMe}
    set {_uniqueStorage()._dataWithMe = newValue}
  }

  public var version: Int64 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var createdMs: Int64 {
    get {return _storage._createdMs}
    set {_uniqueStorage()._createdMs = newValue}
  }

  public var fbUserID: String {
    get {return _storage._fbUserID}
    set {_uniqueStorage()._fbUserID = newValue}
  }

  public var isFacebookFriendship: Bool {
    get {return _storage._isFacebookFriendship}
    set {_uniqueStorage()._isFacebookFriendship = newValue}
  }

  public var sharedData: POGOProtos_Data_Friends_Friend.SharedFriendship {
    get {return _storage._sharedData ?? POGOProtos_Data_Friends_Friend.SharedFriendship()}
    set {_uniqueStorage()._sharedData = newValue}
  }
  /// Returns true if `sharedData` has been explicitly set.
  public var hasSharedData: Bool {return _storage._sharedData != nil}
  /// Clears the value of `sharedData`. Subsequent reads from it will return its default value.
  public mutating func clearSharedData() {_uniqueStorage()._sharedData = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct SharedFriendship {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sharedData: Data = SwiftProtobuf.Internal.emptyData

    public var version: Int64 = 0

    public var dataFromMe: Data = SwiftProtobuf.Internal.emptyData

    public var dataToMe: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Friends"

extension POGOProtos_Data_Friends_Friend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Friend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .same(proto: "codename"),
    3: .same(proto: "team"),
    4: .same(proto: "score"),
    5: .standard(proto: "data_with_me"),
    6: .same(proto: "version"),
    7: .standard(proto: "created_ms"),
    8: .standard(proto: "fb_user_id"),
    9: .standard(proto: "is_facebook_friendship"),
    10: .standard(proto: "shared_data"),
  ]

  fileprivate class _StorageClass {
    var _playerID: String = String()
    var _codename: String = String()
    var _team: String = String()
    var _score: Int32 = 0
    var _dataWithMe: Data = SwiftProtobuf.Internal.emptyData
    var _version: Int64 = 0
    var _createdMs: Int64 = 0
    var _fbUserID: String = String()
    var _isFacebookFriendship: Bool = false
    var _sharedData: POGOProtos_Data_Friends_Friend.SharedFriendship? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _playerID = source._playerID
      _codename = source._codename
      _team = source._team
      _score = source._score
      _dataWithMe = source._dataWithMe
      _version = source._version
      _createdMs = source._createdMs
      _fbUserID = source._fbUserID
      _isFacebookFriendship = source._isFacebookFriendship
      _sharedData = source._sharedData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._playerID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._codename)
        case 3: try decoder.decodeSingularStringField(value: &_storage._team)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._score)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._dataWithMe)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._version)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._createdMs)
        case 8: try decoder.decodeSingularStringField(value: &_storage._fbUserID)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._isFacebookFriendship)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._sharedData)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._playerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playerID, fieldNumber: 1)
      }
      if !_storage._codename.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codename, fieldNumber: 2)
      }
      if !_storage._team.isEmpty {
        try visitor.visitSingularStringField(value: _storage._team, fieldNumber: 3)
      }
      if _storage._score != 0 {
        try visitor.visitSingularInt32Field(value: _storage._score, fieldNumber: 4)
      }
      if !_storage._dataWithMe.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._dataWithMe, fieldNumber: 5)
      }
      if _storage._version != 0 {
        try visitor.visitSingularInt64Field(value: _storage._version, fieldNumber: 6)
      }
      if _storage._createdMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._createdMs, fieldNumber: 7)
      }
      if !_storage._fbUserID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fbUserID, fieldNumber: 8)
      }
      if _storage._isFacebookFriendship != false {
        try visitor.visitSingularBoolField(value: _storage._isFacebookFriendship, fieldNumber: 9)
      }
      if let v = _storage._sharedData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Friends_Friend, rhs: POGOProtos_Data_Friends_Friend) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._playerID != rhs_storage._playerID {return false}
        if _storage._codename != rhs_storage._codename {return false}
        if _storage._team != rhs_storage._team {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._dataWithMe != rhs_storage._dataWithMe {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._createdMs != rhs_storage._createdMs {return false}
        if _storage._fbUserID != rhs_storage._fbUserID {return false}
        if _storage._isFacebookFriendship != rhs_storage._isFacebookFriendship {return false}
        if _storage._sharedData != rhs_storage._sharedData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Friends_Friend.SharedFriendship: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Friends_Friend.protoMessageName + ".SharedFriendship"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shared_data"),
    2: .same(proto: "version"),
    3: .standard(proto: "data_from_me"),
    4: .standard(proto: "data_to_me"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.sharedData)
      case 2: try decoder.decodeSingularInt64Field(value: &self.version)
      case 3: try decoder.decodeSingularBytesField(value: &self.dataFromMe)
      case 4: try decoder.decodeSingularBytesField(value: &self.dataToMe)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sharedData.isEmpty {
      try visitor.visitSingularBytesField(value: self.sharedData, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 2)
    }
    if !self.dataFromMe.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataFromMe, fieldNumber: 3)
    }
    if !self.dataToMe.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataToMe, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Friends_Friend.SharedFriendship, rhs: POGOProtos_Data_Friends_Friend.SharedFriendship) -> Bool {
    if lhs.sharedData != rhs.sharedData {return false}
    if lhs.version != rhs.version {return false}
    if lhs.dataFromMe != rhs.dataFromMe {return false}
    if lhs.dataToMe != rhs.dataToMe {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
