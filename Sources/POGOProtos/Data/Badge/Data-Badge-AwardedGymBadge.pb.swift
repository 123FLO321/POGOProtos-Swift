// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Badge/AwardedGymBadge.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Badge_AwardedGymBadge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fortID: String = String()

  public var gymBadgeType: POGOProtos_Enums_GymBadgeType = .gymBadgeUnset

  public var score: UInt32 = 0

  public var gymBadgeStats: POGOProtos_Data_Badge_GymBadgeStats {
    get {return _gymBadgeStats ?? POGOProtos_Data_Badge_GymBadgeStats()}
    set {_gymBadgeStats = newValue}
  }
  /// Returns true if `gymBadgeStats` has been explicitly set.
  public var hasGymBadgeStats: Bool {return self._gymBadgeStats != nil}
  /// Clears the value of `gymBadgeStats`. Subsequent reads from it will return its default value.
  public mutating func clearGymBadgeStats() {self._gymBadgeStats = nil}

  public var lastUpdateTimestampMs: UInt64 = 0

  public var lastCheckTimestampMs: UInt64 = 0

  public var earnedPoints: UInt32 = 0

  public var progress: Float = 0

  public var levelUp: Bool = false

  public var name: String = String()

  public var imageURL: String = String()

  public var description_p: String = String()

  public var latitude: Double = 0

  public var longitude: Double = 0

  public var raids: POGOProtos_Data_Raid_PlayerRaidInfo {
    get {return _raids ?? POGOProtos_Data_Raid_PlayerRaidInfo()}
    set {_raids = newValue}
  }
  /// Returns true if `raids` has been explicitly set.
  public var hasRaids: Bool {return self._raids != nil}
  /// Clears the value of `raids`. Subsequent reads from it will return its default value.
  public mutating func clearRaids() {self._raids = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gymBadgeStats: POGOProtos_Data_Badge_GymBadgeStats? = nil
  fileprivate var _raids: POGOProtos_Data_Raid_PlayerRaidInfo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Badge"

extension POGOProtos_Data_Badge_AwardedGymBadge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AwardedGymBadge"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fort_id"),
    2: .standard(proto: "gym_badge_type"),
    3: .same(proto: "score"),
    4: .standard(proto: "gym_badge_stats"),
    5: .standard(proto: "last_update_timestamp_ms"),
    11: .standard(proto: "last_check_timestamp_ms"),
    12: .standard(proto: "earned_points"),
    13: .same(proto: "progress"),
    14: .standard(proto: "level_up"),
    6: .same(proto: "name"),
    7: .standard(proto: "image_url"),
    8: .same(proto: "description"),
    9: .same(proto: "latitude"),
    10: .same(proto: "longitude"),
    15: .same(proto: "raids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fortID)
      case 2: try decoder.decodeSingularEnumField(value: &self.gymBadgeType)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.score)
      case 4: try decoder.decodeSingularMessageField(value: &self._gymBadgeStats)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.lastUpdateTimestampMs)
      case 6: try decoder.decodeSingularStringField(value: &self.name)
      case 7: try decoder.decodeSingularStringField(value: &self.imageURL)
      case 8: try decoder.decodeSingularStringField(value: &self.description_p)
      case 9: try decoder.decodeSingularDoubleField(value: &self.latitude)
      case 10: try decoder.decodeSingularDoubleField(value: &self.longitude)
      case 11: try decoder.decodeSingularUInt64Field(value: &self.lastCheckTimestampMs)
      case 12: try decoder.decodeSingularUInt32Field(value: &self.earnedPoints)
      case 13: try decoder.decodeSingularFloatField(value: &self.progress)
      case 14: try decoder.decodeSingularBoolField(value: &self.levelUp)
      case 15: try decoder.decodeSingularMessageField(value: &self._raids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fortID.isEmpty {
      try visitor.visitSingularStringField(value: self.fortID, fieldNumber: 1)
    }
    if self.gymBadgeType != .gymBadgeUnset {
      try visitor.visitSingularEnumField(value: self.gymBadgeType, fieldNumber: 2)
    }
    if self.score != 0 {
      try visitor.visitSingularUInt32Field(value: self.score, fieldNumber: 3)
    }
    if let v = self._gymBadgeStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.lastUpdateTimestampMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastUpdateTimestampMs, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 9)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 10)
    }
    if self.lastCheckTimestampMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastCheckTimestampMs, fieldNumber: 11)
    }
    if self.earnedPoints != 0 {
      try visitor.visitSingularUInt32Field(value: self.earnedPoints, fieldNumber: 12)
    }
    if self.progress != 0 {
      try visitor.visitSingularFloatField(value: self.progress, fieldNumber: 13)
    }
    if self.levelUp != false {
      try visitor.visitSingularBoolField(value: self.levelUp, fieldNumber: 14)
    }
    if let v = self._raids {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Badge_AwardedGymBadge, rhs: POGOProtos_Data_Badge_AwardedGymBadge) -> Bool {
    if lhs.fortID != rhs.fortID {return false}
    if lhs.gymBadgeType != rhs.gymBadgeType {return false}
    if lhs.score != rhs.score {return false}
    if lhs._gymBadgeStats != rhs._gymBadgeStats {return false}
    if lhs.lastUpdateTimestampMs != rhs.lastUpdateTimestampMs {return false}
    if lhs.lastCheckTimestampMs != rhs.lastCheckTimestampMs {return false}
    if lhs.earnedPoints != rhs.earnedPoints {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.levelUp != rhs.levelUp {return false}
    if lhs.name != rhs.name {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs._raids != rhs._raids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
