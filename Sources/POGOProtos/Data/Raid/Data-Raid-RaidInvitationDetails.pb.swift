// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Raid/RaidInvitationDetails.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Raid_RaidInvitationDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gymID: String {
    get {return _storage._gymID}
    set {_uniqueStorage()._gymID = newValue}
  }

  public var lobbyID: [Int32] {
    get {return _storage._lobbyID}
    set {_uniqueStorage()._lobbyID = newValue}
  }

  public var raidSeed: Int64 {
    get {return _storage._raidSeed}
    set {_uniqueStorage()._raidSeed = newValue}
  }

  public var raidInvitationExpireMs: Int64 {
    get {return _storage._raidInvitationExpireMs}
    set {_uniqueStorage()._raidInvitationExpireMs = newValue}
  }

  public var raidLevel: POGOProtos_Enums_RaidLevel {
    get {return _storage._raidLevel}
    set {_uniqueStorage()._raidLevel = newValue}
  }

  public var gymName: String {
    get {return _storage._gymName}
    set {_uniqueStorage()._gymName = newValue}
  }

  public var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  public var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  public var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  public var raidPokemonID: POGOProtos_Enums_PokemonId {
    get {return _storage._raidPokemonID}
    set {_uniqueStorage()._raidPokemonID = newValue}
  }

  public var raidPokemonForm: POGOProtos_Enums_Form {
    get {return _storage._raidPokemonForm}
    set {_uniqueStorage()._raidPokemonForm = newValue}
  }

  public var inviterID: String {
    get {return _storage._inviterID}
    set {_uniqueStorage()._inviterID = newValue}
  }

  public var inviterNickname: String {
    get {return _storage._inviterNickname}
    set {_uniqueStorage()._inviterNickname = newValue}
  }

  public var inviterAvatar: POGOProtos_Data_Player_PlayerAvatar {
    get {return _storage._inviterAvatar ?? POGOProtos_Data_Player_PlayerAvatar()}
    set {_uniqueStorage()._inviterAvatar = newValue}
  }
  /// Returns true if `inviterAvatar` has been explicitly set.
  public var hasInviterAvatar: Bool {return _storage._inviterAvatar != nil}
  /// Clears the value of `inviterAvatar`. Subsequent reads from it will return its default value.
  public mutating func clearInviterAvatar() {_uniqueStorage()._inviterAvatar = nil}

  public var inviterTeam: POGOProtos_Enums_TeamColor {
    get {return _storage._inviterTeam}
    set {_uniqueStorage()._inviterTeam = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Raid"

extension POGOProtos_Data_Raid_RaidInvitationDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RaidInvitationDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gym_id"),
    2: .standard(proto: "lobby_id"),
    3: .standard(proto: "raid_seed"),
    4: .standard(proto: "raid_invitation_expire_ms"),
    5: .standard(proto: "raid_level"),
    6: .standard(proto: "gym_name"),
    7: .standard(proto: "image_url"),
    8: .same(proto: "latitude"),
    9: .same(proto: "longitude"),
    10: .standard(proto: "raid_pokemon_id"),
    11: .standard(proto: "raid_pokemon_form"),
    12: .standard(proto: "inviter_id"),
    13: .standard(proto: "inviter_nickname"),
    14: .standard(proto: "inviter_avatar"),
    15: .standard(proto: "inviter_team"),
  ]

  fileprivate class _StorageClass {
    var _gymID: String = String()
    var _lobbyID: [Int32] = []
    var _raidSeed: Int64 = 0
    var _raidInvitationExpireMs: Int64 = 0
    var _raidLevel: POGOProtos_Enums_RaidLevel = .unset
    var _gymName: String = String()
    var _imageURL: String = String()
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _raidPokemonID: POGOProtos_Enums_PokemonId = .missingno
    var _raidPokemonForm: POGOProtos_Enums_Form = .unset
    var _inviterID: String = String()
    var _inviterNickname: String = String()
    var _inviterAvatar: POGOProtos_Data_Player_PlayerAvatar? = nil
    var _inviterTeam: POGOProtos_Enums_TeamColor = .neutral

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gymID = source._gymID
      _lobbyID = source._lobbyID
      _raidSeed = source._raidSeed
      _raidInvitationExpireMs = source._raidInvitationExpireMs
      _raidLevel = source._raidLevel
      _gymName = source._gymName
      _imageURL = source._imageURL
      _latitude = source._latitude
      _longitude = source._longitude
      _raidPokemonID = source._raidPokemonID
      _raidPokemonForm = source._raidPokemonForm
      _inviterID = source._inviterID
      _inviterNickname = source._inviterNickname
      _inviterAvatar = source._inviterAvatar
      _inviterTeam = source._inviterTeam
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._gymID)
        case 2: try decoder.decodeRepeatedInt32Field(value: &_storage._lobbyID)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._raidSeed)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._raidInvitationExpireMs)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._raidLevel)
        case 6: try decoder.decodeSingularStringField(value: &_storage._gymName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._imageURL)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._latitude)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._longitude)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._raidPokemonID)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._raidPokemonForm)
        case 12: try decoder.decodeSingularStringField(value: &_storage._inviterID)
        case 13: try decoder.decodeSingularStringField(value: &_storage._inviterNickname)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._inviterAvatar)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._inviterTeam)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gymID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gymID, fieldNumber: 1)
      }
      if !_storage._lobbyID.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._lobbyID, fieldNumber: 2)
      }
      if _storage._raidSeed != 0 {
        try visitor.visitSingularInt64Field(value: _storage._raidSeed, fieldNumber: 3)
      }
      if _storage._raidInvitationExpireMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._raidInvitationExpireMs, fieldNumber: 4)
      }
      if _storage._raidLevel != .unset {
        try visitor.visitSingularEnumField(value: _storage._raidLevel, fieldNumber: 5)
      }
      if !_storage._gymName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gymName, fieldNumber: 6)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 7)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 8)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 9)
      }
      if _storage._raidPokemonID != .missingno {
        try visitor.visitSingularEnumField(value: _storage._raidPokemonID, fieldNumber: 10)
      }
      if _storage._raidPokemonForm != .unset {
        try visitor.visitSingularEnumField(value: _storage._raidPokemonForm, fieldNumber: 11)
      }
      if !_storage._inviterID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inviterID, fieldNumber: 12)
      }
      if !_storage._inviterNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inviterNickname, fieldNumber: 13)
      }
      if let v = _storage._inviterAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if _storage._inviterTeam != .neutral {
        try visitor.visitSingularEnumField(value: _storage._inviterTeam, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Raid_RaidInvitationDetails, rhs: POGOProtos_Data_Raid_RaidInvitationDetails) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gymID != rhs_storage._gymID {return false}
        if _storage._lobbyID != rhs_storage._lobbyID {return false}
        if _storage._raidSeed != rhs_storage._raidSeed {return false}
        if _storage._raidInvitationExpireMs != rhs_storage._raidInvitationExpireMs {return false}
        if _storage._raidLevel != rhs_storage._raidLevel {return false}
        if _storage._gymName != rhs_storage._gymName {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._raidPokemonID != rhs_storage._raidPokemonID {return false}
        if _storage._raidPokemonForm != rhs_storage._raidPokemonForm {return false}
        if _storage._inviterID != rhs_storage._inviterID {return false}
        if _storage._inviterNickname != rhs_storage._inviterNickname {return false}
        if _storage._inviterAvatar != rhs_storage._inviterAvatar {return false}
        if _storage._inviterTeam != rhs_storage._inviterTeam {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
