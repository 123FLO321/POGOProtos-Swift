// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Raid/Participation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Raid_Participation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var individualDamagePokeballs: Int32 = 0

  public var teamDamagePokeballs: Int32 = 0

  public var gymOwnershipPokeballs: Int32 = 0

  public var basePokeballs: Int32 = 0

  public var bluePercentage: Double = 0

  public var redPercentage: Double = 0

  public var yellowPercentage: Double = 0

  public var bonusItemMultiplier: Float = 0

  public var highestFriendshipMilestone: POGOProtos_Enums_FriendshipLevelMilestone = .friendshipLevelUnset

  public var highestFriendshipPokeballs: Int32 = 0

  public var speedCompletionPokeballs: Int32 = 0

  public var speedCompletionMegaResource: Int32 = 0

  public var megaResourceCapped: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Raid"

extension POGOProtos_Data_Raid_Participation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Participation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "individual_damage_pokeballs"),
    2: .standard(proto: "team_damage_pokeballs"),
    3: .standard(proto: "gym_ownership_pokeballs"),
    4: .standard(proto: "base_pokeballs"),
    5: .standard(proto: "blue_percentage"),
    6: .standard(proto: "red_percentage"),
    7: .standard(proto: "yellow_percentage"),
    8: .standard(proto: "bonus_item_multiplier"),
    9: .standard(proto: "highest_friendship_milestone"),
    10: .standard(proto: "highest_friendship_pokeballs"),
    11: .standard(proto: "speed_completion_pokeballs"),
    12: .standard(proto: "speed_completion_mega_resource"),
    13: .standard(proto: "mega_resource_capped"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.individualDamagePokeballs) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.teamDamagePokeballs) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.gymOwnershipPokeballs) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.basePokeballs) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.bluePercentage) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.redPercentage) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.yellowPercentage) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.bonusItemMultiplier) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.highestFriendshipMilestone) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.highestFriendshipPokeballs) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.speedCompletionPokeballs) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self.speedCompletionMegaResource) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.megaResourceCapped) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.individualDamagePokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.individualDamagePokeballs, fieldNumber: 1)
    }
    if self.teamDamagePokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.teamDamagePokeballs, fieldNumber: 2)
    }
    if self.gymOwnershipPokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.gymOwnershipPokeballs, fieldNumber: 3)
    }
    if self.basePokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.basePokeballs, fieldNumber: 4)
    }
    if self.bluePercentage != 0 {
      try visitor.visitSingularDoubleField(value: self.bluePercentage, fieldNumber: 5)
    }
    if self.redPercentage != 0 {
      try visitor.visitSingularDoubleField(value: self.redPercentage, fieldNumber: 6)
    }
    if self.yellowPercentage != 0 {
      try visitor.visitSingularDoubleField(value: self.yellowPercentage, fieldNumber: 7)
    }
    if self.bonusItemMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.bonusItemMultiplier, fieldNumber: 8)
    }
    if self.highestFriendshipMilestone != .friendshipLevelUnset {
      try visitor.visitSingularEnumField(value: self.highestFriendshipMilestone, fieldNumber: 9)
    }
    if self.highestFriendshipPokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.highestFriendshipPokeballs, fieldNumber: 10)
    }
    if self.speedCompletionPokeballs != 0 {
      try visitor.visitSingularInt32Field(value: self.speedCompletionPokeballs, fieldNumber: 11)
    }
    if self.speedCompletionMegaResource != 0 {
      try visitor.visitSingularInt32Field(value: self.speedCompletionMegaResource, fieldNumber: 12)
    }
    if self.megaResourceCapped != false {
      try visitor.visitSingularBoolField(value: self.megaResourceCapped, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Raid_Participation, rhs: POGOProtos_Data_Raid_Participation) -> Bool {
    if lhs.individualDamagePokeballs != rhs.individualDamagePokeballs {return false}
    if lhs.teamDamagePokeballs != rhs.teamDamagePokeballs {return false}
    if lhs.gymOwnershipPokeballs != rhs.gymOwnershipPokeballs {return false}
    if lhs.basePokeballs != rhs.basePokeballs {return false}
    if lhs.bluePercentage != rhs.bluePercentage {return false}
    if lhs.redPercentage != rhs.redPercentage {return false}
    if lhs.yellowPercentage != rhs.yellowPercentage {return false}
    if lhs.bonusItemMultiplier != rhs.bonusItemMultiplier {return false}
    if lhs.highestFriendshipMilestone != rhs.highestFriendshipMilestone {return false}
    if lhs.highestFriendshipPokeballs != rhs.highestFriendshipPokeballs {return false}
    if lhs.speedCompletionPokeballs != rhs.speedCompletionPokeballs {return false}
    if lhs.speedCompletionMegaResource != rhs.speedCompletionMegaResource {return false}
    if lhs.megaResourceCapped != rhs.megaResourceCapped {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
