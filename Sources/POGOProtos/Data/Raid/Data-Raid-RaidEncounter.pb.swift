// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Raid/RaidEncounter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Raid_RaidEncounter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pokemon: POGOProtos_Data_PokemonData {
    get {return _pokemon ?? POGOProtos_Data_PokemonData()}
    set {_pokemon = newValue}
  }
  /// Returns true if `pokemon` has been explicitly set.
  public var hasPokemon: Bool {return self._pokemon != nil}
  /// Clears the value of `pokemon`. Subsequent reads from it will return its default value.
  public mutating func clearPokemon() {self._pokemon = nil}

  public var encounterID: Int64 = 0

  public var spawnpointID: String = String()

  public var captureProbabilities: POGOProtos_Data_Capture_CaptureProbability {
    get {return _captureProbabilities ?? POGOProtos_Data_Capture_CaptureProbability()}
    set {_captureProbabilities = newValue}
  }
  /// Returns true if `captureProbabilities` has been explicitly set.
  public var hasCaptureProbabilities: Bool {return self._captureProbabilities != nil}
  /// Clears the value of `captureProbabilities`. Subsequent reads from it will return its default value.
  public mutating func clearCaptureProbabilities() {self._captureProbabilities = nil}

  public var throwsRemaining: Int32 = 0

  public var raidLevel: POGOProtos_Enums_RaidLevel = .unset

  public var fortID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pokemon: POGOProtos_Data_PokemonData? = nil
  fileprivate var _captureProbabilities: POGOProtos_Data_Capture_CaptureProbability? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Raid"

extension POGOProtos_Data_Raid_RaidEncounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RaidEncounter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .standard(proto: "encounter_id"),
    3: .standard(proto: "spawnpoint_id"),
    4: .standard(proto: "capture_probabilities"),
    5: .standard(proto: "throws_remaining"),
    6: .standard(proto: "raid_level"),
    7: .standard(proto: "fort_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pokemon) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.encounterID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.spawnpointID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._captureProbabilities) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.throwsRemaining) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.raidLevel) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.fortID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.encounterID != 0 {
      try visitor.visitSingularInt64Field(value: self.encounterID, fieldNumber: 2)
    }
    if !self.spawnpointID.isEmpty {
      try visitor.visitSingularStringField(value: self.spawnpointID, fieldNumber: 3)
    }
    if let v = self._captureProbabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.throwsRemaining != 0 {
      try visitor.visitSingularInt32Field(value: self.throwsRemaining, fieldNumber: 5)
    }
    if self.raidLevel != .unset {
      try visitor.visitSingularEnumField(value: self.raidLevel, fieldNumber: 6)
    }
    if !self.fortID.isEmpty {
      try visitor.visitSingularStringField(value: self.fortID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Raid_RaidEncounter, rhs: POGOProtos_Data_Raid_RaidEncounter) -> Bool {
    if lhs._pokemon != rhs._pokemon {return false}
    if lhs.encounterID != rhs.encounterID {return false}
    if lhs.spawnpointID != rhs.spawnpointID {return false}
    if lhs._captureProbabilities != rhs._captureProbabilities {return false}
    if lhs.throwsRemaining != rhs.throwsRemaining {return false}
    if lhs.raidLevel != rhs.raidLevel {return false}
    if lhs.fortID != rhs.fortID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
