// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Quests/Quest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Quests_Quest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var questType: POGOProtos_Enums_QuestType {
    get {return _storage._questType}
    set {_uniqueStorage()._questType = newValue}
  }

  public var quest: OneOf_Quest? {
    get {return _storage._quest}
    set {_uniqueStorage()._quest = newValue}
  }

  public var dailyQuest: POGOProtos_Data_Quests_Quest.DailyQuest {
    get {
      if case .dailyQuest(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.DailyQuest()
    }
    set {_uniqueStorage()._quest = .dailyQuest(newValue)}
  }

  public var multiPart: POGOProtos_Data_Quests_Quest.MultiPartQuest {
    get {
      if case .multiPart(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.MultiPartQuest()
    }
    set {_uniqueStorage()._quest = .multiPart(newValue)}
  }

  public var catchPokemon: POGOProtos_Data_Quests_CatchPokemonQuest {
    get {
      if case .catchPokemon(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_CatchPokemonQuest()
    }
    set {_uniqueStorage()._quest = .catchPokemon(newValue)}
  }

  public var addFriend: POGOProtos_Data_Quests_AddFriendQuest {
    get {
      if case .addFriend(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_AddFriendQuest()
    }
    set {_uniqueStorage()._quest = .addFriend(newValue)}
  }

  public var tradePokemon: POGOProtos_Data_Quests_TradePokemonQuest {
    get {
      if case .tradePokemon(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_TradePokemonQuest()
    }
    set {_uniqueStorage()._quest = .tradePokemon(newValue)}
  }

  public var dailyBuddyAffection: POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest {
    get {
      if case .dailyBuddyAffection(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest()
    }
    set {_uniqueStorage()._quest = .dailyBuddyAffection(newValue)}
  }

  public var questWalk: POGOProtos_Data_Quests_Quest.QuestWalk {
    get {
      if case .questWalk(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.QuestWalk()
    }
    set {_uniqueStorage()._quest = .questWalk(newValue)}
  }

  public var evolveIntoPokemon: POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest {
    get {
      if case .evolveIntoPokemon(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest()
    }
    set {_uniqueStorage()._quest = .evolveIntoPokemon(newValue)}
  }

  public var getStardust: POGOProtos_Data_Quests_Quest.GetStardustQuest {
    get {
      if case .getStardust(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.GetStardustQuest()
    }
    set {_uniqueStorage()._quest = .getStardust(newValue)}
  }

  public var geotargetedQuest: POGOProtos_Data_Quests_Quest.GeotargetedQuest {
    get {
      if case .geotargetedQuest(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.GeotargetedQuest()
    }
    set {_uniqueStorage()._quest = .geotargetedQuest(newValue)}
  }

  public var buddyEvolutionWalk: POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest {
    get {
      if case .buddyEvolutionWalk(let v)? = _storage._quest {return v}
      return POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest()
    }
    set {_uniqueStorage()._quest = .buddyEvolutionWalk(newValue)}
  }

  public var withSingleDay: POGOProtos_Data_Quests_Quest.WithSingleDay {
    get {return _storage._withSingleDay ?? POGOProtos_Data_Quests_Quest.WithSingleDay()}
    set {_uniqueStorage()._withSingleDay = newValue}
  }
  /// Returns true if `withSingleDay` has been explicitly set.
  public var hasWithSingleDay: Bool {return _storage._withSingleDay != nil}
  /// Clears the value of `withSingleDay`. Subsequent reads from it will return its default value.
  public mutating func clearWithSingleDay() {_uniqueStorage()._withSingleDay = nil}

  public var daysInArow: POGOProtos_Data_Quests_Quest.DaysWithARowQuest {
    get {return _storage._daysInArow ?? POGOProtos_Data_Quests_Quest.DaysWithARowQuest()}
    set {_uniqueStorage()._daysInArow = newValue}
  }
  /// Returns true if `daysInArow` has been explicitly set.
  public var hasDaysInArow: Bool {return _storage._daysInArow != nil}
  /// Clears the value of `daysInArow`. Subsequent reads from it will return its default value.
  public mutating func clearDaysInArow() {_uniqueStorage()._daysInArow = nil}

  public var questID: String {
    get {return _storage._questID}
    set {_uniqueStorage()._questID = newValue}
  }

  public var questSeed: Int64 {
    get {return _storage._questSeed}
    set {_uniqueStorage()._questSeed = newValue}
  }

  public var questContext: POGOProtos_Data_Quests_Quest.Context {
    get {return _storage._questContext}
    set {_uniqueStorage()._questContext = newValue}
  }

  public var templateID: String {
    get {return _storage._templateID}
    set {_uniqueStorage()._templateID = newValue}
  }

  public var progress: Int32 {
    get {return _storage._progress}
    set {_uniqueStorage()._progress = newValue}
  }

  public var goal: POGOProtos_Data_Quests_QuestGoal {
    get {return _storage._goal ?? POGOProtos_Data_Quests_QuestGoal()}
    set {_uniqueStorage()._goal = newValue}
  }
  /// Returns true if `goal` has been explicitly set.
  public var hasGoal: Bool {return _storage._goal != nil}
  /// Clears the value of `goal`. Subsequent reads from it will return its default value.
  public mutating func clearGoal() {_uniqueStorage()._goal = nil}

  public var status: POGOProtos_Data_Quests_Quest.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var questRewards: [POGOProtos_Data_Quests_QuestReward] {
    get {return _storage._questRewards}
    set {_uniqueStorage()._questRewards = newValue}
  }

  public var creationTimestampMs: Int64 {
    get {return _storage._creationTimestampMs}
    set {_uniqueStorage()._creationTimestampMs = newValue}
  }

  public var lastUpdateTimestampMs: Int64 {
    get {return _storage._lastUpdateTimestampMs}
    set {_uniqueStorage()._lastUpdateTimestampMs = newValue}
  }

  public var completionTimestampMs: Int64 {
    get {return _storage._completionTimestampMs}
    set {_uniqueStorage()._completionTimestampMs = newValue}
  }

  public var fortID: String {
    get {return _storage._fortID}
    set {_uniqueStorage()._fortID = newValue}
  }

  public var adminGenerated: Bool {
    get {return _storage._adminGenerated}
    set {_uniqueStorage()._adminGenerated = newValue}
  }

  public var stampCountOverrideEnabled: Bool {
    get {return _storage._stampCountOverrideEnabled}
    set {_uniqueStorage()._stampCountOverrideEnabled = newValue}
  }

  public var stampCountOverride: Int32 {
    get {return _storage._stampCountOverride}
    set {_uniqueStorage()._stampCountOverride = newValue}
  }

  public var s2CellID: Int64 {
    get {return _storage._s2CellID}
    set {_uniqueStorage()._s2CellID = newValue}
  }

  public var storyQuestTemplateVersion: Int32 {
    get {return _storage._storyQuestTemplateVersion}
    set {_uniqueStorage()._storyQuestTemplateVersion = newValue}
  }

  public var dailyCounter: POGOProtos_Data_Quests_Quest.DailyCounter {
    get {return _storage._dailyCounter ?? POGOProtos_Data_Quests_Quest.DailyCounter()}
    set {_uniqueStorage()._dailyCounter = newValue}
  }
  /// Returns true if `dailyCounter` has been explicitly set.
  public var hasDailyCounter: Bool {return _storage._dailyCounter != nil}
  /// Clears the value of `dailyCounter`. Subsequent reads from it will return its default value.
  public mutating func clearDailyCounter() {_uniqueStorage()._dailyCounter = nil}

  public var rewardPokemonIconURL: String {
    get {return _storage._rewardPokemonIconURL}
    set {_uniqueStorage()._rewardPokemonIconURL = newValue}
  }

  public var endTimestampMs: Int64 {
    get {return _storage._endTimestampMs}
    set {_uniqueStorage()._endTimestampMs = newValue}
  }

  public var isBonusChallenge: Bool {
    get {return _storage._isBonusChallenge}
    set {_uniqueStorage()._isBonusChallenge = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Quest: Equatable {
    case dailyQuest(POGOProtos_Data_Quests_Quest.DailyQuest)
    case multiPart(POGOProtos_Data_Quests_Quest.MultiPartQuest)
    case catchPokemon(POGOProtos_Data_Quests_CatchPokemonQuest)
    case addFriend(POGOProtos_Data_Quests_AddFriendQuest)
    case tradePokemon(POGOProtos_Data_Quests_TradePokemonQuest)
    case dailyBuddyAffection(POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest)
    case questWalk(POGOProtos_Data_Quests_Quest.QuestWalk)
    case evolveIntoPokemon(POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest)
    case getStardust(POGOProtos_Data_Quests_Quest.GetStardustQuest)
    case geotargetedQuest(POGOProtos_Data_Quests_Quest.GeotargetedQuest)
    case buddyEvolutionWalk(POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Quests_Quest.OneOf_Quest, rhs: POGOProtos_Data_Quests_Quest.OneOf_Quest) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dailyQuest, .dailyQuest): return {
        guard case .dailyQuest(let l) = lhs, case .dailyQuest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.multiPart, .multiPart): return {
        guard case .multiPart(let l) = lhs, case .multiPart(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.catchPokemon, .catchPokemon): return {
        guard case .catchPokemon(let l) = lhs, case .catchPokemon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.addFriend, .addFriend): return {
        guard case .addFriend(let l) = lhs, case .addFriend(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.tradePokemon, .tradePokemon): return {
        guard case .tradePokemon(let l) = lhs, case .tradePokemon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.dailyBuddyAffection, .dailyBuddyAffection): return {
        guard case .dailyBuddyAffection(let l) = lhs, case .dailyBuddyAffection(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.questWalk, .questWalk): return {
        guard case .questWalk(let l) = lhs, case .questWalk(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.evolveIntoPokemon, .evolveIntoPokemon): return {
        guard case .evolveIntoPokemon(let l) = lhs, case .evolveIntoPokemon(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getStardust, .getStardust): return {
        guard case .getStardust(let l) = lhs, case .getStardust(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.geotargetedQuest, .geotargetedQuest): return {
        guard case .geotargetedQuest(let l) = lhs, case .geotargetedQuest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buddyEvolutionWalk, .buddyEvolutionWalk): return {
        guard case .buddyEvolutionWalk(let l) = lhs, case .buddyEvolutionWalk(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum Context: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case storyQuest // = 1
    case challengeQuest // = 2
    case dailyCoinQuest // = 3
    case timedStoryQuest // = 4
    case tgcTrackingQuest // = 7
    case evolutionQuest // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .storyQuest
      case 2: self = .challengeQuest
      case 3: self = .dailyCoinQuest
      case 4: self = .timedStoryQuest
      case 7: self = .tgcTrackingQuest
      case 8: self = .evolutionQuest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .storyQuest: return 1
      case .challengeQuest: return 2
      case .dailyCoinQuest: return 3
      case .timedStoryQuest: return 4
      case .tgcTrackingQuest: return 7
      case .evolutionQuest: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case undefined // = 0
    case active // = 1
    case completed // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .undefined
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undefined
      case 1: self = .active
      case 2: self = .completed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .undefined: return 0
      case .active: return 1
      case .completed: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct BuddyEvolutionWalkQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var lastKmRecorded: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct GeotargetedQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var callToActionLink: String = String()

    public var imageURL: String = String()

    public var latitude: Double = 0

    public var longitude: Double = 0

    public var fortID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct GetStardustQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var stardust: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct WithSingleDay {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var lastWindow: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct QuestWalk {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var questStartKmWalked: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct EvolveIntoPokemonQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var uniquePokemonID: [POGOProtos_Enums_PokemonId] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DaysWithARowQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var lastWindow: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DailyBuddyAffectionQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var dailyAffectionCounter: POGOProtos_Data_Quests_Quest.DailyCounter {
      get {return _dailyAffectionCounter ?? POGOProtos_Data_Quests_Quest.DailyCounter()}
      set {_dailyAffectionCounter = newValue}
    }
    /// Returns true if `dailyAffectionCounter` has been explicitly set.
    public var hasDailyAffectionCounter: Bool {return self._dailyAffectionCounter != nil}
    /// Clears the value of `dailyAffectionCounter`. Subsequent reads from it will return its default value.
    public mutating func clearDailyAffectionCounter() {self._dailyAffectionCounter = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _dailyAffectionCounter: POGOProtos_Data_Quests_Quest.DailyCounter? = nil
  }

  public struct MultiPartQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var subQuests: [POGOProtos_Data_Quests_Quest] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DailyQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var currentPeriodBucket: Int32 = 0

    public var currentStreakCount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DailyCounter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var window: Int64 = 0

    public var count: Int32 = 0

    public var bucketsPerDay: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Data_Quests_Quest.Context: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_Quest.Context] = [
    .unset,
    .storyQuest,
    .challengeQuest,
    .dailyCoinQuest,
    .timedStoryQuest,
    .tgcTrackingQuest,
    .evolutionQuest,
  ]
}

extension POGOProtos_Data_Quests_Quest.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_Quest.Status] = [
    .undefined,
    .active,
    .completed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Quests"

extension POGOProtos_Data_Quests_Quest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Quest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quest_type"),
    2: .standard(proto: "daily_quest"),
    3: .standard(proto: "multi_part"),
    4: .standard(proto: "catch_pokemon"),
    5: .standard(proto: "add_friend"),
    6: .standard(proto: "trade_pokemon"),
    7: .standard(proto: "daily_buddy_affection"),
    8: .standard(proto: "quest_walk"),
    9: .standard(proto: "evolve_into_pokemon"),
    10: .standard(proto: "get_stardust"),
    12: .standard(proto: "geotargeted_quest"),
    13: .standard(proto: "buddy_evolution_walk"),
    98: .standard(proto: "with_single_day"),
    99: .standard(proto: "days_in_arow"),
    100: .standard(proto: "quest_id"),
    101: .standard(proto: "quest_seed"),
    102: .standard(proto: "quest_context"),
    103: .standard(proto: "template_id"),
    104: .same(proto: "progress"),
    105: .same(proto: "goal"),
    106: .same(proto: "status"),
    107: .standard(proto: "quest_rewards"),
    108: .standard(proto: "creation_timestamp_ms"),
    109: .standard(proto: "last_update_timestamp_ms"),
    110: .standard(proto: "completion_timestamp_ms"),
    111: .standard(proto: "fort_id"),
    112: .standard(proto: "admin_generated"),
    113: .standard(proto: "stamp_count_override_enabled"),
    114: .standard(proto: "stamp_count_override"),
    115: .standard(proto: "s2_cell_id"),
    116: .standard(proto: "story_quest_template_version"),
    117: .standard(proto: "daily_counter"),
    118: .standard(proto: "reward_pokemon_icon_url"),
    119: .standard(proto: "end_timestamp_ms"),
    120: .standard(proto: "is_bonus_challenge"),
  ]

  fileprivate class _StorageClass {
    var _questType: POGOProtos_Enums_QuestType = .questUnknownType
    var _quest: POGOProtos_Data_Quests_Quest.OneOf_Quest?
    var _withSingleDay: POGOProtos_Data_Quests_Quest.WithSingleDay? = nil
    var _daysInArow: POGOProtos_Data_Quests_Quest.DaysWithARowQuest? = nil
    var _questID: String = String()
    var _questSeed: Int64 = 0
    var _questContext: POGOProtos_Data_Quests_Quest.Context = .unset
    var _templateID: String = String()
    var _progress: Int32 = 0
    var _goal: POGOProtos_Data_Quests_QuestGoal? = nil
    var _status: POGOProtos_Data_Quests_Quest.Status = .undefined
    var _questRewards: [POGOProtos_Data_Quests_QuestReward] = []
    var _creationTimestampMs: Int64 = 0
    var _lastUpdateTimestampMs: Int64 = 0
    var _completionTimestampMs: Int64 = 0
    var _fortID: String = String()
    var _adminGenerated: Bool = false
    var _stampCountOverrideEnabled: Bool = false
    var _stampCountOverride: Int32 = 0
    var _s2CellID: Int64 = 0
    var _storyQuestTemplateVersion: Int32 = 0
    var _dailyCounter: POGOProtos_Data_Quests_Quest.DailyCounter? = nil
    var _rewardPokemonIconURL: String = String()
    var _endTimestampMs: Int64 = 0
    var _isBonusChallenge: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _questType = source._questType
      _quest = source._quest
      _withSingleDay = source._withSingleDay
      _daysInArow = source._daysInArow
      _questID = source._questID
      _questSeed = source._questSeed
      _questContext = source._questContext
      _templateID = source._templateID
      _progress = source._progress
      _goal = source._goal
      _status = source._status
      _questRewards = source._questRewards
      _creationTimestampMs = source._creationTimestampMs
      _lastUpdateTimestampMs = source._lastUpdateTimestampMs
      _completionTimestampMs = source._completionTimestampMs
      _fortID = source._fortID
      _adminGenerated = source._adminGenerated
      _stampCountOverrideEnabled = source._stampCountOverrideEnabled
      _stampCountOverride = source._stampCountOverride
      _s2CellID = source._s2CellID
      _storyQuestTemplateVersion = source._storyQuestTemplateVersion
      _dailyCounter = source._dailyCounter
      _rewardPokemonIconURL = source._rewardPokemonIconURL
      _endTimestampMs = source._endTimestampMs
      _isBonusChallenge = source._isBonusChallenge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._questType) }()
        case 2: try {
          var v: POGOProtos_Data_Quests_Quest.DailyQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .dailyQuest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .dailyQuest(v)}
        }()
        case 3: try {
          var v: POGOProtos_Data_Quests_Quest.MultiPartQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .multiPart(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .multiPart(v)}
        }()
        case 4: try {
          var v: POGOProtos_Data_Quests_CatchPokemonQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .catchPokemon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .catchPokemon(v)}
        }()
        case 5: try {
          var v: POGOProtos_Data_Quests_AddFriendQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .addFriend(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .addFriend(v)}
        }()
        case 6: try {
          var v: POGOProtos_Data_Quests_TradePokemonQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .tradePokemon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .tradePokemon(v)}
        }()
        case 7: try {
          var v: POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .dailyBuddyAffection(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .dailyBuddyAffection(v)}
        }()
        case 8: try {
          var v: POGOProtos_Data_Quests_Quest.QuestWalk?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .questWalk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .questWalk(v)}
        }()
        case 9: try {
          var v: POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .evolveIntoPokemon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .evolveIntoPokemon(v)}
        }()
        case 10: try {
          var v: POGOProtos_Data_Quests_Quest.GetStardustQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .getStardust(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .getStardust(v)}
        }()
        case 12: try {
          var v: POGOProtos_Data_Quests_Quest.GeotargetedQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .geotargetedQuest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .geotargetedQuest(v)}
        }()
        case 13: try {
          var v: POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest?
          if let current = _storage._quest {
            try decoder.handleConflictingOneOf()
            if case .buddyEvolutionWalk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._quest = .buddyEvolutionWalk(v)}
        }()
        case 98: try { try decoder.decodeSingularMessageField(value: &_storage._withSingleDay) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._daysInArow) }()
        case 100: try { try decoder.decodeSingularStringField(value: &_storage._questID) }()
        case 101: try { try decoder.decodeSingularInt64Field(value: &_storage._questSeed) }()
        case 102: try { try decoder.decodeSingularEnumField(value: &_storage._questContext) }()
        case 103: try { try decoder.decodeSingularStringField(value: &_storage._templateID) }()
        case 104: try { try decoder.decodeSingularInt32Field(value: &_storage._progress) }()
        case 105: try { try decoder.decodeSingularMessageField(value: &_storage._goal) }()
        case 106: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 107: try { try decoder.decodeRepeatedMessageField(value: &_storage._questRewards) }()
        case 108: try { try decoder.decodeSingularInt64Field(value: &_storage._creationTimestampMs) }()
        case 109: try { try decoder.decodeSingularInt64Field(value: &_storage._lastUpdateTimestampMs) }()
        case 110: try { try decoder.decodeSingularInt64Field(value: &_storage._completionTimestampMs) }()
        case 111: try { try decoder.decodeSingularStringField(value: &_storage._fortID) }()
        case 112: try { try decoder.decodeSingularBoolField(value: &_storage._adminGenerated) }()
        case 113: try { try decoder.decodeSingularBoolField(value: &_storage._stampCountOverrideEnabled) }()
        case 114: try { try decoder.decodeSingularInt32Field(value: &_storage._stampCountOverride) }()
        case 115: try { try decoder.decodeSingularInt64Field(value: &_storage._s2CellID) }()
        case 116: try { try decoder.decodeSingularInt32Field(value: &_storage._storyQuestTemplateVersion) }()
        case 117: try { try decoder.decodeSingularMessageField(value: &_storage._dailyCounter) }()
        case 118: try { try decoder.decodeSingularStringField(value: &_storage._rewardPokemonIconURL) }()
        case 119: try { try decoder.decodeSingularInt64Field(value: &_storage._endTimestampMs) }()
        case 120: try { try decoder.decodeSingularBoolField(value: &_storage._isBonusChallenge) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._questType != .questUnknownType {
        try visitor.visitSingularEnumField(value: _storage._questType, fieldNumber: 1)
      }
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._quest {
      case .dailyQuest?: try {
        guard case .dailyQuest(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .multiPart?: try {
        guard case .multiPart(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .catchPokemon?: try {
        guard case .catchPokemon(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .addFriend?: try {
        guard case .addFriend(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .tradePokemon?: try {
        guard case .tradePokemon(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .dailyBuddyAffection?: try {
        guard case .dailyBuddyAffection(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .questWalk?: try {
        guard case .questWalk(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .evolveIntoPokemon?: try {
        guard case .evolveIntoPokemon(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .getStardust?: try {
        guard case .getStardust(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .geotargetedQuest?: try {
        guard case .geotargetedQuest(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .buddyEvolutionWalk?: try {
        guard case .buddyEvolutionWalk(let v)? = _storage._quest else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case nil: break
      }
      if let v = _storage._withSingleDay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
      }
      if let v = _storage._daysInArow {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      }
      if !_storage._questID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._questID, fieldNumber: 100)
      }
      if _storage._questSeed != 0 {
        try visitor.visitSingularInt64Field(value: _storage._questSeed, fieldNumber: 101)
      }
      if _storage._questContext != .unset {
        try visitor.visitSingularEnumField(value: _storage._questContext, fieldNumber: 102)
      }
      if !_storage._templateID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._templateID, fieldNumber: 103)
      }
      if _storage._progress != 0 {
        try visitor.visitSingularInt32Field(value: _storage._progress, fieldNumber: 104)
      }
      if let v = _storage._goal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      }
      if _storage._status != .undefined {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 106)
      }
      if !_storage._questRewards.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._questRewards, fieldNumber: 107)
      }
      if _storage._creationTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._creationTimestampMs, fieldNumber: 108)
      }
      if _storage._lastUpdateTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdateTimestampMs, fieldNumber: 109)
      }
      if _storage._completionTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._completionTimestampMs, fieldNumber: 110)
      }
      if !_storage._fortID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fortID, fieldNumber: 111)
      }
      if _storage._adminGenerated != false {
        try visitor.visitSingularBoolField(value: _storage._adminGenerated, fieldNumber: 112)
      }
      if _storage._stampCountOverrideEnabled != false {
        try visitor.visitSingularBoolField(value: _storage._stampCountOverrideEnabled, fieldNumber: 113)
      }
      if _storage._stampCountOverride != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stampCountOverride, fieldNumber: 114)
      }
      if _storage._s2CellID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._s2CellID, fieldNumber: 115)
      }
      if _storage._storyQuestTemplateVersion != 0 {
        try visitor.visitSingularInt32Field(value: _storage._storyQuestTemplateVersion, fieldNumber: 116)
      }
      if let v = _storage._dailyCounter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
      }
      if !_storage._rewardPokemonIconURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._rewardPokemonIconURL, fieldNumber: 118)
      }
      if _storage._endTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTimestampMs, fieldNumber: 119)
      }
      if _storage._isBonusChallenge != false {
        try visitor.visitSingularBoolField(value: _storage._isBonusChallenge, fieldNumber: 120)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest, rhs: POGOProtos_Data_Quests_Quest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._questType != rhs_storage._questType {return false}
        if _storage._quest != rhs_storage._quest {return false}
        if _storage._withSingleDay != rhs_storage._withSingleDay {return false}
        if _storage._daysInArow != rhs_storage._daysInArow {return false}
        if _storage._questID != rhs_storage._questID {return false}
        if _storage._questSeed != rhs_storage._questSeed {return false}
        if _storage._questContext != rhs_storage._questContext {return false}
        if _storage._templateID != rhs_storage._templateID {return false}
        if _storage._progress != rhs_storage._progress {return false}
        if _storage._goal != rhs_storage._goal {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._questRewards != rhs_storage._questRewards {return false}
        if _storage._creationTimestampMs != rhs_storage._creationTimestampMs {return false}
        if _storage._lastUpdateTimestampMs != rhs_storage._lastUpdateTimestampMs {return false}
        if _storage._completionTimestampMs != rhs_storage._completionTimestampMs {return false}
        if _storage._fortID != rhs_storage._fortID {return false}
        if _storage._adminGenerated != rhs_storage._adminGenerated {return false}
        if _storage._stampCountOverrideEnabled != rhs_storage._stampCountOverrideEnabled {return false}
        if _storage._stampCountOverride != rhs_storage._stampCountOverride {return false}
        if _storage._s2CellID != rhs_storage._s2CellID {return false}
        if _storage._storyQuestTemplateVersion != rhs_storage._storyQuestTemplateVersion {return false}
        if _storage._dailyCounter != rhs_storage._dailyCounter {return false}
        if _storage._rewardPokemonIconURL != rhs_storage._rewardPokemonIconURL {return false}
        if _storage._endTimestampMs != rhs_storage._endTimestampMs {return false}
        if _storage._isBonusChallenge != rhs_storage._isBonusChallenge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.Context: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "STORY_QUEST"),
    2: .same(proto: "CHALLENGE_QUEST"),
    3: .same(proto: "DAILY_COIN_QUEST"),
    4: .same(proto: "TIMED_STORY_QUEST"),
    7: .same(proto: "TGC_TRACKING_QUEST"),
    8: .same(proto: "EVOLUTION_QUEST"),
  ]
}

extension POGOProtos_Data_Quests_Quest.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNDEFINED"),
    1: .same(proto: "STATUS_ACTIVE"),
    2: .same(proto: "STATUS_COMPLETED"),
  ]
}

extension POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".BuddyEvolutionWalkQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_km_recorded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.lastKmRecorded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastKmRecorded != 0 {
      try visitor.visitSingularFloatField(value: self.lastKmRecorded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest, rhs: POGOProtos_Data_Quests_Quest.BuddyEvolutionWalkQuest) -> Bool {
    if lhs.lastKmRecorded != rhs.lastKmRecorded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.GeotargetedQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".GeotargetedQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "call_to_action_link"),
    3: .standard(proto: "image_url"),
    4: .same(proto: "latitude"),
    5: .same(proto: "longitude"),
    6: .standard(proto: "fort_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.callToActionLink) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fortID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.callToActionLink.isEmpty {
      try visitor.visitSingularStringField(value: self.callToActionLink, fieldNumber: 2)
    }
    if !self.imageURL.isEmpty {
      try visitor.visitSingularStringField(value: self.imageURL, fieldNumber: 3)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 4)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 5)
    }
    if !self.fortID.isEmpty {
      try visitor.visitSingularStringField(value: self.fortID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.GeotargetedQuest, rhs: POGOProtos_Data_Quests_Quest.GeotargetedQuest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.callToActionLink != rhs.callToActionLink {return false}
    if lhs.imageURL != rhs.imageURL {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.fortID != rhs.fortID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.GetStardustQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".GetStardustQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stardust"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.stardust) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stardust != 0 {
      try visitor.visitSingularInt32Field(value: self.stardust, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.GetStardustQuest, rhs: POGOProtos_Data_Quests_Quest.GetStardustQuest) -> Bool {
    if lhs.stardust != rhs.stardust {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.WithSingleDay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".WithSingleDay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_window"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.lastWindow) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastWindow != 0 {
      try visitor.visitSingularInt64Field(value: self.lastWindow, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.WithSingleDay, rhs: POGOProtos_Data_Quests_Quest.WithSingleDay) -> Bool {
    if lhs.lastWindow != rhs.lastWindow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.QuestWalk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".QuestWalk"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quest_start_km_walked"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.questStartKmWalked) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.questStartKmWalked != 0 {
      try visitor.visitSingularFloatField(value: self.questStartKmWalked, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.QuestWalk, rhs: POGOProtos_Data_Quests_Quest.QuestWalk) -> Bool {
    if lhs.questStartKmWalked != rhs.questStartKmWalked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".EvolveIntoPokemonQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_pokemon_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.uniquePokemonID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniquePokemonID.isEmpty {
      try visitor.visitPackedEnumField(value: self.uniquePokemonID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest, rhs: POGOProtos_Data_Quests_Quest.EvolveIntoPokemonQuest) -> Bool {
    if lhs.uniquePokemonID != rhs.uniquePokemonID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.DaysWithARowQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".DaysWithARowQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_window"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lastWindow) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastWindow != 0 {
      try visitor.visitSingularInt32Field(value: self.lastWindow, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.DaysWithARowQuest, rhs: POGOProtos_Data_Quests_Quest.DaysWithARowQuest) -> Bool {
    if lhs.lastWindow != rhs.lastWindow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".DailyBuddyAffectionQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "daily_affection_counter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dailyAffectionCounter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dailyAffectionCounter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest, rhs: POGOProtos_Data_Quests_Quest.DailyBuddyAffectionQuest) -> Bool {
    if lhs._dailyAffectionCounter != rhs._dailyAffectionCounter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.MultiPartQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".MultiPartQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sub_quests"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.subQuests) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subQuests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subQuests, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.MultiPartQuest, rhs: POGOProtos_Data_Quests_Quest.MultiPartQuest) -> Bool {
    if lhs.subQuests != rhs.subQuests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.DailyQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".DailyQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_period_bucket"),
    2: .standard(proto: "current_streak_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.currentPeriodBucket) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.currentStreakCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentPeriodBucket != 0 {
      try visitor.visitSingularInt32Field(value: self.currentPeriodBucket, fieldNumber: 1)
    }
    if self.currentStreakCount != 0 {
      try visitor.visitSingularInt32Field(value: self.currentStreakCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.DailyQuest, rhs: POGOProtos_Data_Quests_Quest.DailyQuest) -> Bool {
    if lhs.currentPeriodBucket != rhs.currentPeriodBucket {return false}
    if lhs.currentStreakCount != rhs.currentStreakCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_Quest.DailyCounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_Quest.protoMessageName + ".DailyCounter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "window"),
    2: .same(proto: "count"),
    3: .standard(proto: "buckets_per_day"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.window) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.bucketsPerDay) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.window != 0 {
      try visitor.visitSingularInt64Field(value: self.window, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.bucketsPerDay != 0 {
      try visitor.visitSingularInt32Field(value: self.bucketsPerDay, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_Quest.DailyCounter, rhs: POGOProtos_Data_Quests_Quest.DailyCounter) -> Bool {
    if lhs.window != rhs.window {return false}
    if lhs.count != rhs.count {return false}
    if lhs.bucketsPerDay != rhs.bucketsPerDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
