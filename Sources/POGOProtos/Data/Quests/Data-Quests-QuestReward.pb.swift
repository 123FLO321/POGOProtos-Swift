// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Quests/QuestReward.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Quests_QuestReward {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: POGOProtos_Data_Quests_QuestReward.TypeEnum = .unset

  public var reward: POGOProtos_Data_Quests_QuestReward.OneOf_Reward? = nil

  public var exp: Int32 {
    get {
      if case .exp(let v)? = reward {return v}
      return 0
    }
    set {reward = .exp(newValue)}
  }

  public var item: POGOProtos_Data_Quests_QuestReward.ItemReward {
    get {
      if case .item(let v)? = reward {return v}
      return POGOProtos_Data_Quests_QuestReward.ItemReward()
    }
    set {reward = .item(newValue)}
  }

  public var stardust: Int32 {
    get {
      if case .stardust(let v)? = reward {return v}
      return 0
    }
    set {reward = .stardust(newValue)}
  }

  public var candy: POGOProtos_Data_Quests_QuestReward.PokemonCandyReward {
    get {
      if case .candy(let v)? = reward {return v}
      return POGOProtos_Data_Quests_QuestReward.PokemonCandyReward()
    }
    set {reward = .candy(newValue)}
  }

  public var avatarTemplateID: String {
    get {
      if case .avatarTemplateID(let v)? = reward {return v}
      return String()
    }
    set {reward = .avatarTemplateID(newValue)}
  }

  public var questTemplateID: String {
    get {
      if case .questTemplateID(let v)? = reward {return v}
      return String()
    }
    set {reward = .questTemplateID(newValue)}
  }

  public var pokemonEncounter: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward {
    get {
      if case .pokemonEncounter(let v)? = reward {return v}
      return POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward()
    }
    set {reward = .pokemonEncounter(newValue)}
  }

  public var pokecoin: Int32 {
    get {
      if case .pokecoin(let v)? = reward {return v}
      return 0
    }
    set {reward = .pokecoin(newValue)}
  }

  public var stickerID: String {
    get {
      if case .stickerID(let v)? = reward {return v}
      return String()
    }
    set {reward = .stickerID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Reward: Equatable {
    case exp(Int32)
    case item(POGOProtos_Data_Quests_QuestReward.ItemReward)
    case stardust(Int32)
    case candy(POGOProtos_Data_Quests_QuestReward.PokemonCandyReward)
    case avatarTemplateID(String)
    case questTemplateID(String)
    case pokemonEncounter(POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward)
    case pokecoin(Int32)
    case stickerID(String)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Quests_QuestReward.OneOf_Reward, rhs: POGOProtos_Data_Quests_QuestReward.OneOf_Reward) -> Bool {
      switch (lhs, rhs) {
      case (.exp(let l), .exp(let r)): return l == r
      case (.item(let l), .item(let r)): return l == r
      case (.stardust(let l), .stardust(let r)): return l == r
      case (.candy(let l), .candy(let r)): return l == r
      case (.avatarTemplateID(let l), .avatarTemplateID(let r)): return l == r
      case (.questTemplateID(let l), .questTemplateID(let r)): return l == r
      case (.pokemonEncounter(let l), .pokemonEncounter(let r)): return l == r
      case (.pokecoin(let l), .pokecoin(let r)): return l == r
      case (.stickerID(let l), .stickerID(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case experience // = 1
    case item // = 2
    case stardust // = 3
    case candy // = 4
    case avatarClothing // = 5
    case quest // = 6
    case pokemonEncounter // = 7
    case pokecoin // = 8
    case sticker // = 11
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .experience
      case 2: self = .item
      case 3: self = .stardust
      case 4: self = .candy
      case 5: self = .avatarClothing
      case 6: self = .quest
      case 7: self = .pokemonEncounter
      case 8: self = .pokecoin
      case 11: self = .sticker
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .experience: return 1
      case .item: return 2
      case .stardust: return 3
      case .candy: return 4
      case .avatarClothing: return 5
      case .quest: return 6
      case .pokemonEncounter: return 7
      case .pokecoin: return 8
      case .sticker: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct ItemReward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var item: POGOProtos_Inventory_Item_ItemId = .itemUnknown

    public var amount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PokemonCandyReward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var pokemonID: POGOProtos_Enums_PokemonId = .missingno

    public var amount: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PokemonEncounterReward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward.OneOf_Type? = nil

    public var pokemonID: POGOProtos_Enums_PokemonId {
      get {
        if case .pokemonID(let v)? = type {return v}
        return .missingno
      }
      set {type = .pokemonID(newValue)}
    }

    public var useQuestPokemonEncounterDistribuition: Bool {
      get {
        if case .useQuestPokemonEncounterDistribuition(let v)? = type {return v}
        return false
      }
      set {type = .useQuestPokemonEncounterDistribuition(newValue)}
    }

    public var pokemonDisplay: POGOProtos_Data_PokemonDisplay {
      get {return _pokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
      set {_pokemonDisplay = newValue}
    }
    /// Returns true if `pokemonDisplay` has been explicitly set.
    public var hasPokemonDisplay: Bool {return self._pokemonDisplay != nil}
    /// Clears the value of `pokemonDisplay`. Subsequent reads from it will return its default value.
    public mutating func clearPokemonDisplay() {self._pokemonDisplay = nil}

    public var isHiddenDitto: Bool = false

    public var dittoDisplay: POGOProtos_Data_PokemonDisplay {
      get {return _dittoDisplay ?? POGOProtos_Data_PokemonDisplay()}
      set {_dittoDisplay = newValue}
    }
    /// Returns true if `dittoDisplay` has been explicitly set.
    public var hasDittoDisplay: Bool {return self._dittoDisplay != nil}
    /// Clears the value of `dittoDisplay`. Subsequent reads from it will return its default value.
    public mutating func clearDittoDisplay() {self._dittoDisplay = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Type: Equatable {
      case pokemonID(POGOProtos_Enums_PokemonId)
      case useQuestPokemonEncounterDistribuition(Bool)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward.OneOf_Type, rhs: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward.OneOf_Type) -> Bool {
        switch (lhs, rhs) {
        case (.pokemonID(let l), .pokemonID(let r)): return l == r
        case (.useQuestPokemonEncounterDistribuition(let l), .useQuestPokemonEncounterDistribuition(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _pokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
    fileprivate var _dittoDisplay: POGOProtos_Data_PokemonDisplay? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_Quests_QuestReward.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestReward.TypeEnum] = [
    .unset,
    .experience,
    .item,
    .stardust,
    .candy,
    .avatarClothing,
    .quest,
    .pokemonEncounter,
    .pokecoin,
    .sticker,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Quests"

extension POGOProtos_Data_Quests_QuestReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "exp"),
    3: .same(proto: "item"),
    4: .same(proto: "stardust"),
    5: .same(proto: "candy"),
    6: .standard(proto: "avatar_template_id"),
    7: .standard(proto: "quest_template_id"),
    8: .standard(proto: "pokemon_encounter"),
    9: .same(proto: "pokecoin"),
    12: .standard(proto: "sticker_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.reward = .exp(v)}
      case 3:
        var v: POGOProtos_Data_Quests_QuestReward.ItemReward?
        if let current = self.reward {
          try decoder.handleConflictingOneOf()
          if case .item(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.reward = .item(v)}
      case 4:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.reward = .stardust(v)}
      case 5:
        var v: POGOProtos_Data_Quests_QuestReward.PokemonCandyReward?
        if let current = self.reward {
          try decoder.handleConflictingOneOf()
          if case .candy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.reward = .candy(v)}
      case 6:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.reward = .avatarTemplateID(v)}
      case 7:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.reward = .questTemplateID(v)}
      case 8:
        var v: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward?
        if let current = self.reward {
          try decoder.handleConflictingOneOf()
          if case .pokemonEncounter(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.reward = .pokemonEncounter(v)}
      case 9:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.reward = .pokecoin(v)}
      case 12:
        if self.reward != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.reward = .stickerID(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    switch self.reward {
    case .exp(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    case .item(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .stardust(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    case .candy(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .avatarTemplateID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    case .questTemplateID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    case .pokemonEncounter(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    case .pokecoin(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    case .stickerID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestReward, rhs: POGOProtos_Data_Quests_QuestReward) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.reward != rhs.reward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestReward.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "EXPERIENCE"),
    2: .same(proto: "ITEM"),
    3: .same(proto: "STARDUST"),
    4: .same(proto: "CANDY"),
    5: .same(proto: "AVATAR_CLOTHING"),
    6: .same(proto: "QUEST"),
    7: .same(proto: "POKEMON_ENCOUNTER"),
    8: .same(proto: "POKECOIN"),
    11: .same(proto: "STICKER"),
  ]
}

extension POGOProtos_Data_Quests_QuestReward.ItemReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestReward.protoMessageName + ".ItemReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.item)
      case 2: try decoder.decodeSingularInt32Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.item != .itemUnknown {
      try visitor.visitSingularEnumField(value: self.item, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestReward.ItemReward, rhs: POGOProtos_Data_Quests_QuestReward.ItemReward) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestReward.PokemonCandyReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestReward.protoMessageName + ".PokemonCandyReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pokemon_id"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.pokemonID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pokemonID != .missingno {
      try visitor.visitSingularEnumField(value: self.pokemonID, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestReward.PokemonCandyReward, rhs: POGOProtos_Data_Quests_QuestReward.PokemonCandyReward) -> Bool {
    if lhs.pokemonID != rhs.pokemonID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestReward.protoMessageName + ".PokemonEncounterReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pokemon_id"),
    2: .standard(proto: "use_quest_pokemon_encounter_distribuition"),
    3: .standard(proto: "pokemon_display"),
    4: .standard(proto: "is_hidden_ditto"),
    5: .standard(proto: "ditto_display"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_PokemonId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .pokemonID(v)}
      case 2:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .useQuestPokemonEncounterDistribuition(v)}
      case 3: try decoder.decodeSingularMessageField(value: &self._pokemonDisplay)
      case 4: try decoder.decodeSingularBoolField(value: &self.isHiddenDitto)
      case 5: try decoder.decodeSingularMessageField(value: &self._dittoDisplay)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.type {
    case .pokemonID(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    case .useQuestPokemonEncounterDistribuition(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    case nil: break
    }
    if let v = self._pokemonDisplay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.isHiddenDitto != false {
      try visitor.visitSingularBoolField(value: self.isHiddenDitto, fieldNumber: 4)
    }
    if let v = self._dittoDisplay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward, rhs: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._pokemonDisplay != rhs._pokemonDisplay {return false}
    if lhs.isHiddenDitto != rhs.isHiddenDitto {return false}
    if lhs._dittoDisplay != rhs._dittoDisplay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
