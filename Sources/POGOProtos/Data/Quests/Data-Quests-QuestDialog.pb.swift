// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Quests/QuestDialog.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Quests_QuestDialog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var expression: POGOProtos_Data_Quests_QuestDialog.CharacterExpression = .expressionUnset

  public var imageUri: String = String()

  public var character: POGOProtos_Data_Quests_QuestDialog.Character = .unset

  public var characterOffset: [Float] = []

  public var textBackgroundColor: String = String()

  public var characterTint: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum CharacterExpression: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case expressionUnset // = 0
    case happy // = 1
    case sympathetic // = 2
    case energetic // = 3
    case pushy // = 4
    case impatient // = 5
    case admiration // = 6
    case sad // = 7
    case idle // = 8
    case idleB // = 9
    case greeting // = 10
    case greetingB // = 11
    case reactAngry // = 12
    case reactCelebration // = 13
    case reactHappy // = 14
    case reactLaugh // = 15
    case reactSad // = 16
    case reactScared // = 17
    case reactSurprised // = 18
    case UNRECOGNIZED(Int)

    public init() {
      self = .expressionUnset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .expressionUnset
      case 1: self = .happy
      case 2: self = .sympathetic
      case 3: self = .energetic
      case 4: self = .pushy
      case 5: self = .impatient
      case 6: self = .admiration
      case 7: self = .sad
      case 8: self = .idle
      case 9: self = .idleB
      case 10: self = .greeting
      case 11: self = .greetingB
      case 12: self = .reactAngry
      case 13: self = .reactCelebration
      case 14: self = .reactHappy
      case 15: self = .reactLaugh
      case 16: self = .reactSad
      case 17: self = .reactScared
      case 18: self = .reactSurprised
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .expressionUnset: return 0
      case .happy: return 1
      case .sympathetic: return 2
      case .energetic: return 3
      case .pushy: return 4
      case .impatient: return 5
      case .admiration: return 6
      case .sad: return 7
      case .idle: return 8
      case .idleB: return 9
      case .greeting: return 10
      case .greetingB: return 11
      case .reactAngry: return 12
      case .reactCelebration: return 13
      case .reactHappy: return 14
      case .reactLaugh: return 15
      case .reactSad: return 16
      case .reactScared: return 17
      case .reactSurprised: return 18
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Character: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case professorWillow // = 1
    case specialGuest1 // = 2
    case specialGuest2 // = 3
    case specialGuest3 // = 4
    case specialGuest4 // = 5
    case specialGuest5 // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .professorWillow
      case 2: self = .specialGuest1
      case 3: self = .specialGuest2
      case 4: self = .specialGuest3
      case 5: self = .specialGuest4
      case 6: self = .specialGuest5
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .professorWillow: return 1
      case .specialGuest1: return 2
      case .specialGuest2: return 3
      case .specialGuest3: return 4
      case .specialGuest4: return 5
      case .specialGuest5: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_Quests_QuestDialog.CharacterExpression: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestDialog.CharacterExpression] = [
    .expressionUnset,
    .happy,
    .sympathetic,
    .energetic,
    .pushy,
    .impatient,
    .admiration,
    .sad,
    .idle,
    .idleB,
    .greeting,
    .greetingB,
    .reactAngry,
    .reactCelebration,
    .reactHappy,
    .reactLaugh,
    .reactSad,
    .reactScared,
    .reactSurprised,
  ]
}

extension POGOProtos_Data_Quests_QuestDialog.Character: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestDialog.Character] = [
    .unset,
    .professorWillow,
    .specialGuest1,
    .specialGuest2,
    .specialGuest3,
    .specialGuest4,
    .specialGuest5,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Quests"

extension POGOProtos_Data_Quests_QuestDialog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestDialog"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "expression"),
    3: .standard(proto: "image_uri"),
    4: .same(proto: "character"),
    5: .standard(proto: "character_offset"),
    6: .standard(proto: "text_background_color"),
    7: .standard(proto: "character_tint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.expression) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageUri) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.character) }()
      case 5: try { try decoder.decodeRepeatedFloatField(value: &self.characterOffset) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.textBackgroundColor) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.characterTint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.expression != .expressionUnset {
      try visitor.visitSingularEnumField(value: self.expression, fieldNumber: 2)
    }
    if !self.imageUri.isEmpty {
      try visitor.visitSingularStringField(value: self.imageUri, fieldNumber: 3)
    }
    if self.character != .unset {
      try visitor.visitSingularEnumField(value: self.character, fieldNumber: 4)
    }
    if !self.characterOffset.isEmpty {
      try visitor.visitPackedFloatField(value: self.characterOffset, fieldNumber: 5)
    }
    if !self.textBackgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.textBackgroundColor, fieldNumber: 6)
    }
    if !self.characterTint.isEmpty {
      try visitor.visitSingularStringField(value: self.characterTint, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestDialog, rhs: POGOProtos_Data_Quests_QuestDialog) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.expression != rhs.expression {return false}
    if lhs.imageUri != rhs.imageUri {return false}
    if lhs.character != rhs.character {return false}
    if lhs.characterOffset != rhs.characterOffset {return false}
    if lhs.textBackgroundColor != rhs.textBackgroundColor {return false}
    if lhs.characterTint != rhs.characterTint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestDialog.CharacterExpression: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXPRESSION_UNSET"),
    1: .same(proto: "HAPPY"),
    2: .same(proto: "SYMPATHETIC"),
    3: .same(proto: "ENERGETIC"),
    4: .same(proto: "PUSHY"),
    5: .same(proto: "IMPATIENT"),
    6: .same(proto: "ADMIRATION"),
    7: .same(proto: "SAD"),
    8: .same(proto: "IDLE"),
    9: .same(proto: "IDLE_B"),
    10: .same(proto: "GREETING"),
    11: .same(proto: "GREETING_B"),
    12: .same(proto: "REACT_ANGRY"),
    13: .same(proto: "REACT_CELEBRATION"),
    14: .same(proto: "REACT_HAPPY"),
    15: .same(proto: "REACT_LAUGH"),
    16: .same(proto: "REACT_SAD"),
    17: .same(proto: "REACT_SCARED"),
    18: .same(proto: "REACT_SURPRISED"),
  ]
}

extension POGOProtos_Data_Quests_QuestDialog.Character: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARACTER_UNSET"),
    1: .same(proto: "PROFESSOR_WILLOW"),
    2: .same(proto: "SPECIAL_GUEST_1"),
    3: .same(proto: "SPECIAL_GUEST_2"),
    4: .same(proto: "SPECIAL_GUEST_3"),
    5: .same(proto: "SPECIAL_GUEST_4"),
    6: .same(proto: "SPECIAL_GUEST_5"),
  ]
}
