// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Quests/QuestPrecondition.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Quests_QuestPrecondition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: POGOProtos_Data_Quests_QuestPrecondition.QuestPreconditionType = .questPreconditionUnset

  public var condition: POGOProtos_Data_Quests_QuestPrecondition.OneOf_Condition? = nil

  public var questTemplateID: String {
    get {
      if case .questTemplateID(let v)? = condition {return v}
      return String()
    }
    set {condition = .questTemplateID(newValue)}
  }

  public var level: POGOProtos_Data_Quests_QuestPrecondition.Level {
    get {
      if case .level(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.Level()
    }
    set {condition = .level(newValue)}
  }

  public var medal: POGOProtos_Data_Quests_QuestPrecondition.Medal {
    get {
      if case .medal(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.Medal()
    }
    set {condition = .medal(newValue)}
  }

  public var quests: POGOProtos_Data_Quests_QuestPrecondition.Quests {
    get {
      if case .quests(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.Quests()
    }
    set {condition = .quests(newValue)}
  }

  public var monthYearBucket: POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket {
    get {
      if case .monthYearBucket(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket()
    }
    set {condition = .monthYearBucket(newValue)}
  }

  public var group: POGOProtos_Data_Quests_QuestPrecondition.Group {
    get {
      if case .group(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.Group()
    }
    set {condition = .group(newValue)}
  }

  public var storyLine: POGOProtos_Data_Quests_QuestPrecondition.StoryLine {
    get {
      if case .storyLine(let v)? = condition {return v}
      return POGOProtos_Data_Quests_QuestPrecondition.StoryLine()
    }
    set {condition = .storyLine(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Condition: Equatable {
    case questTemplateID(String)
    case level(POGOProtos_Data_Quests_QuestPrecondition.Level)
    case medal(POGOProtos_Data_Quests_QuestPrecondition.Medal)
    case quests(POGOProtos_Data_Quests_QuestPrecondition.Quests)
    case monthYearBucket(POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket)
    case group(POGOProtos_Data_Quests_QuestPrecondition.Group)
    case storyLine(POGOProtos_Data_Quests_QuestPrecondition.StoryLine)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.OneOf_Condition, rhs: POGOProtos_Data_Quests_QuestPrecondition.OneOf_Condition) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.questTemplateID, .questTemplateID): return {
        guard case .questTemplateID(let l) = lhs, case .questTemplateID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.level, .level): return {
        guard case .level(let l) = lhs, case .level(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.medal, .medal): return {
        guard case .medal(let l) = lhs, case .medal(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.quests, .quests): return {
        guard case .quests(let l) = lhs, case .quests(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.monthYearBucket, .monthYearBucket): return {
        guard case .monthYearBucket(let l) = lhs, case .monthYearBucket(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.group, .group): return {
        guard case .group(let l) = lhs, case .group(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.storyLine, .storyLine): return {
        guard case .storyLine(let l) = lhs, case .storyLine(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum Operator: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case equals // = 1
    case greaterThan // = 2
    case lessThan // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .equals
      case 2: self = .greaterThan
      case 3: self = .lessThan
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .equals: return 1
      case .greaterThan: return 2
      case .lessThan: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum QuestPreconditionType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case questPreconditionUnset // = 0
    case questPreconditionQuest // = 1
    case questPreconditionLevel // = 2
    case questPreconditionMedal // = 3
    case questPreconditionIsMinor // = 4
    case questPreconditionExclusiveQuests // = 5
    case questPreconditionNever // = 6
    case questPreconditionReceivedAnyListedQuest // = 7
    case questPreconditionMonthYearBucket // = 8
    case questPreconditionExclusiveInProgressGroup // = 9
    case questPreconditionStorylineProgress // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .questPreconditionUnset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .questPreconditionUnset
      case 1: self = .questPreconditionQuest
      case 2: self = .questPreconditionLevel
      case 3: self = .questPreconditionMedal
      case 4: self = .questPreconditionIsMinor
      case 5: self = .questPreconditionExclusiveQuests
      case 6: self = .questPreconditionNever
      case 7: self = .questPreconditionReceivedAnyListedQuest
      case 8: self = .questPreconditionMonthYearBucket
      case 9: self = .questPreconditionExclusiveInProgressGroup
      case 10: self = .questPreconditionStorylineProgress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .questPreconditionUnset: return 0
      case .questPreconditionQuest: return 1
      case .questPreconditionLevel: return 2
      case .questPreconditionMedal: return 3
      case .questPreconditionIsMinor: return 4
      case .questPreconditionExclusiveQuests: return 5
      case .questPreconditionNever: return 6
      case .questPreconditionReceivedAnyListedQuest: return 7
      case .questPreconditionMonthYearBucket: return 8
      case .questPreconditionExclusiveInProgressGroup: return 9
      case .questPreconditionStorylineProgress: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Group {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: POGOProtos_Data_Quests_QuestPrecondition.Group.Name = .unset

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Name: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case unset // = 0
      case giovanni // = 1
      case UNRECOGNIZED(Int)

      public init() {
        self = .unset
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unset
        case 1: self = .giovanni
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .unset: return 0
        case .giovanni: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public struct MonthYearBucket {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var year: Int32 = 0

    public var month: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StoryLine {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mandatoryQuestTemplateID: [String] = []

    public var optionalQuestTemplateID: [String] = []

    public var optionalQuestsCompletedMin: Int32 = 0

    public var optionalQuestsCompletedMax: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Quests {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var questTemplateIds: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Level {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var `operator`: POGOProtos_Data_Quests_QuestPrecondition.Operator = .unset

    public var level: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Medal {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: POGOProtos_Enums_BadgeType = .badgeUnset

    public var `operator`: POGOProtos_Data_Quests_QuestPrecondition.Operator = .unset

    public var badgeRank: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_Quests_QuestPrecondition.Operator: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestPrecondition.Operator] = [
    .unset,
    .equals,
    .greaterThan,
    .lessThan,
  ]
}

extension POGOProtos_Data_Quests_QuestPrecondition.QuestPreconditionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestPrecondition.QuestPreconditionType] = [
    .questPreconditionUnset,
    .questPreconditionQuest,
    .questPreconditionLevel,
    .questPreconditionMedal,
    .questPreconditionIsMinor,
    .questPreconditionExclusiveQuests,
    .questPreconditionNever,
    .questPreconditionReceivedAnyListedQuest,
    .questPreconditionMonthYearBucket,
    .questPreconditionExclusiveInProgressGroup,
    .questPreconditionStorylineProgress,
  ]
}

extension POGOProtos_Data_Quests_QuestPrecondition.Group.Name: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Quests_QuestPrecondition.Group.Name] = [
    .unset,
    .giovanni,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Quests"

extension POGOProtos_Data_Quests_QuestPrecondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuestPrecondition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "quest_template_id"),
    3: .same(proto: "level"),
    4: .same(proto: "medal"),
    5: .same(proto: "quests"),
    6: .standard(proto: "month_year_bucket"),
    7: .same(proto: "group"),
    8: .standard(proto: "story_line"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try {
        if self.condition != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.condition = .questTemplateID(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.Level?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .level(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .level(v)}
      }()
      case 4: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.Medal?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .medal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .medal(v)}
      }()
      case 5: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.Quests?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .quests(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .quests(v)}
      }()
      case 6: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .monthYearBucket(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .monthYearBucket(v)}
      }()
      case 7: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.Group?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .group(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .group(v)}
      }()
      case 8: try {
        var v: POGOProtos_Data_Quests_QuestPrecondition.StoryLine?
        if let current = self.condition {
          try decoder.handleConflictingOneOf()
          if case .storyLine(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.condition = .storyLine(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .questPreconditionUnset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.condition {
    case .questTemplateID?: try {
      guard case .questTemplateID(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .level?: try {
      guard case .level(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .medal?: try {
      guard case .medal(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .quests?: try {
      guard case .quests(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .monthYearBucket?: try {
      guard case .monthYearBucket(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .group?: try {
      guard case .group(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .storyLine?: try {
      guard case .storyLine(let v)? = self.condition else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition, rhs: POGOProtos_Data_Quests_QuestPrecondition) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.condition != rhs.condition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.Operator: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "EQUALS"),
    2: .same(proto: "GREATER_THAN"),
    3: .same(proto: "LESS_THAN"),
  ]
}

extension POGOProtos_Data_Quests_QuestPrecondition.QuestPreconditionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "QUEST_PRECONDITION_UNSET"),
    1: .same(proto: "QUEST_PRECONDITION_QUEST"),
    2: .same(proto: "QUEST_PRECONDITION_LEVEL"),
    3: .same(proto: "QUEST_PRECONDITION_MEDAL"),
    4: .same(proto: "QUEST_PRECONDITION_IS_MINOR"),
    5: .same(proto: "QUEST_PRECONDITION_EXCLUSIVE_QUESTS"),
    6: .same(proto: "QUEST_PRECONDITION_NEVER"),
    7: .same(proto: "QUEST_PRECONDITION_RECEIVED_ANY_LISTED_QUEST"),
    8: .same(proto: "QUEST_PRECONDITION_MONTH_YEAR_BUCKET"),
    9: .same(proto: "QUEST_PRECONDITION_EXCLUSIVE_IN_PROGRESS_GROUP"),
    10: .same(proto: "QUEST_PRECONDITION_STORYLINE_PROGRESS"),
  ]
}

extension POGOProtos_Data_Quests_QuestPrecondition.Group: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".Group"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.name != .unset {
      try visitor.visitSingularEnumField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.Group, rhs: POGOProtos_Data_Quests_QuestPrecondition.Group) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.Group.Name: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "GIOVANNI"),
  ]
}

extension POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".MonthYearBucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.year) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.month) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularInt32Field(value: self.month, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket, rhs: POGOProtos_Data_Quests_QuestPrecondition.MonthYearBucket) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.StoryLine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".StoryLine"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mandatory_quest_template_id"),
    2: .standard(proto: "optional_quest_template_id"),
    3: .standard(proto: "optional_quests_completed_min"),
    4: .standard(proto: "optional_quests_completed_max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.mandatoryQuestTemplateID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.optionalQuestTemplateID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.optionalQuestsCompletedMin) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.optionalQuestsCompletedMax) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mandatoryQuestTemplateID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mandatoryQuestTemplateID, fieldNumber: 1)
    }
    if !self.optionalQuestTemplateID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.optionalQuestTemplateID, fieldNumber: 2)
    }
    if self.optionalQuestsCompletedMin != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalQuestsCompletedMin, fieldNumber: 3)
    }
    if self.optionalQuestsCompletedMax != 0 {
      try visitor.visitSingularInt32Field(value: self.optionalQuestsCompletedMax, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.StoryLine, rhs: POGOProtos_Data_Quests_QuestPrecondition.StoryLine) -> Bool {
    if lhs.mandatoryQuestTemplateID != rhs.mandatoryQuestTemplateID {return false}
    if lhs.optionalQuestTemplateID != rhs.optionalQuestTemplateID {return false}
    if lhs.optionalQuestsCompletedMin != rhs.optionalQuestsCompletedMin {return false}
    if lhs.optionalQuestsCompletedMax != rhs.optionalQuestsCompletedMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.Quests: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".Quests"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quest_template_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.questTemplateIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.questTemplateIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.questTemplateIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.Quests, rhs: POGOProtos_Data_Quests_QuestPrecondition.Quests) -> Bool {
    if lhs.questTemplateIds != rhs.questTemplateIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.Level: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".Level"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
    2: .same(proto: "level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.`operator`) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.level) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.`operator` != .unset {
      try visitor.visitSingularEnumField(value: self.`operator`, fieldNumber: 1)
    }
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.Level, rhs: POGOProtos_Data_Quests_QuestPrecondition.Level) -> Bool {
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Quests_QuestPrecondition.Medal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Quests_QuestPrecondition.protoMessageName + ".Medal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "operator"),
    3: .standard(proto: "badge_rank"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.`operator`) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.badgeRank) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .badgeUnset {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.`operator` != .unset {
      try visitor.visitSingularEnumField(value: self.`operator`, fieldNumber: 2)
    }
    if self.badgeRank != 0 {
      try visitor.visitSingularInt32Field(value: self.badgeRank, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Quests_QuestPrecondition.Medal, rhs: POGOProtos_Data_Quests_QuestPrecondition.Medal) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.badgeRank != rhs.badgeRank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
