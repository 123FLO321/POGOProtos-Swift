// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/PokemonData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_PokemonData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var pokemonID: POGOProtos_Enums_PokemonId {
    get {return _storage._pokemonID}
    set {_uniqueStorage()._pokemonID = newValue}
  }

  public var cp: Int32 {
    get {return _storage._cp}
    set {_uniqueStorage()._cp = newValue}
  }

  public var stamina: Int32 {
    get {return _storage._stamina}
    set {_uniqueStorage()._stamina = newValue}
  }

  public var staminaMax: Int32 {
    get {return _storage._staminaMax}
    set {_uniqueStorage()._staminaMax = newValue}
  }

  public var move1: POGOProtos_Enums_PokemonMove {
    get {return _storage._move1}
    set {_uniqueStorage()._move1 = newValue}
  }

  public var move2: POGOProtos_Enums_PokemonMove {
    get {return _storage._move2}
    set {_uniqueStorage()._move2 = newValue}
  }

  public var deployedFortID: String {
    get {return _storage._deployedFortID}
    set {_uniqueStorage()._deployedFortID = newValue}
  }

  public var ownerName: String {
    get {return _storage._ownerName}
    set {_uniqueStorage()._ownerName = newValue}
  }

  public var isEgg: Bool {
    get {return _storage._isEgg}
    set {_uniqueStorage()._isEgg = newValue}
  }

  public var eggKmWalkedTarget: Double {
    get {return _storage._eggKmWalkedTarget}
    set {_uniqueStorage()._eggKmWalkedTarget = newValue}
  }

  public var eggKmWalkedStart: Double {
    get {return _storage._eggKmWalkedStart}
    set {_uniqueStorage()._eggKmWalkedStart = newValue}
  }

  public var origin: Int32 {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  public var heightM: Float {
    get {return _storage._heightM}
    set {_uniqueStorage()._heightM = newValue}
  }

  public var weightKg: Float {
    get {return _storage._weightKg}
    set {_uniqueStorage()._weightKg = newValue}
  }

  public var individualAttack: Int32 {
    get {return _storage._individualAttack}
    set {_uniqueStorage()._individualAttack = newValue}
  }

  public var individualDefense: Int32 {
    get {return _storage._individualDefense}
    set {_uniqueStorage()._individualDefense = newValue}
  }

  public var individualStamina: Int32 {
    get {return _storage._individualStamina}
    set {_uniqueStorage()._individualStamina = newValue}
  }

  public var cpMultiplier: Float {
    get {return _storage._cpMultiplier}
    set {_uniqueStorage()._cpMultiplier = newValue}
  }

  public var pokeball: POGOProtos_Inventory_Item_ItemId {
    get {return _storage._pokeball}
    set {_uniqueStorage()._pokeball = newValue}
  }

  public var capturedCellID: UInt64 {
    get {return _storage._capturedCellID}
    set {_uniqueStorage()._capturedCellID = newValue}
  }

  public var battlesAttacked: Int32 {
    get {return _storage._battlesAttacked}
    set {_uniqueStorage()._battlesAttacked = newValue}
  }

  public var battlesDefended: Int32 {
    get {return _storage._battlesDefended}
    set {_uniqueStorage()._battlesDefended = newValue}
  }

  public var eggIncubatorID: String {
    get {return _storage._eggIncubatorID}
    set {_uniqueStorage()._eggIncubatorID = newValue}
  }

  public var creationTimeMs: UInt64 {
    get {return _storage._creationTimeMs}
    set {_uniqueStorage()._creationTimeMs = newValue}
  }

  public var numUpgrades: Int32 {
    get {return _storage._numUpgrades}
    set {_uniqueStorage()._numUpgrades = newValue}
  }

  public var additionalCpMultiplier: Float {
    get {return _storage._additionalCpMultiplier}
    set {_uniqueStorage()._additionalCpMultiplier = newValue}
  }

  public var favorite: Int32 {
    get {return _storage._favorite}
    set {_uniqueStorage()._favorite = newValue}
  }

  public var nickname: String {
    get {return _storage._nickname}
    set {_uniqueStorage()._nickname = newValue}
  }

  public var fromFort: Int32 {
    get {return _storage._fromFort}
    set {_uniqueStorage()._fromFort = newValue}
  }

  public var buddyCandyAwarded: Int32 {
    get {return _storage._buddyCandyAwarded}
    set {_uniqueStorage()._buddyCandyAwarded = newValue}
  }

  public var buddyTotalKmWalked: Float {
    get {return _storage._buddyTotalKmWalked}
    set {_uniqueStorage()._buddyTotalKmWalked = newValue}
  }

  public var displayPokemonID: Int32 {
    get {return _storage._displayPokemonID}
    set {_uniqueStorage()._displayPokemonID = newValue}
  }

  public var displayCp: Int32 {
    get {return _storage._displayCp}
    set {_uniqueStorage()._displayCp = newValue}
  }

  public var pokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _storage._pokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_uniqueStorage()._pokemonDisplay = newValue}
  }
  /// Returns true if `pokemonDisplay` has been explicitly set.
  public var hasPokemonDisplay: Bool {return _storage._pokemonDisplay != nil}
  /// Clears the value of `pokemonDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearPokemonDisplay() {_uniqueStorage()._pokemonDisplay = nil}

  public var isBad: Bool {
    get {return _storage._isBad}
    set {_uniqueStorage()._isBad = newValue}
  }

  public var hatchedFromEgg: Bool {
    get {return _storage._hatchedFromEgg}
    set {_uniqueStorage()._hatchedFromEgg = newValue}
  }

  public var coinsReturned: Int32 {
    get {return _storage._coinsReturned}
    set {_uniqueStorage()._coinsReturned = newValue}
  }

  public var deployedDurationMs: Int64 {
    get {return _storage._deployedDurationMs}
    set {_uniqueStorage()._deployedDurationMs = newValue}
  }

  public var deployedReturnedTimestampMs: Int64 {
    get {return _storage._deployedReturnedTimestampMs}
    set {_uniqueStorage()._deployedReturnedTimestampMs = newValue}
  }

  public var cpMultiplierBeforeTrading: Float {
    get {return _storage._cpMultiplierBeforeTrading}
    set {_uniqueStorage()._cpMultiplierBeforeTrading = newValue}
  }

  public var tradingOriginalOwnerHash: Int32 {
    get {return _storage._tradingOriginalOwnerHash}
    set {_uniqueStorage()._tradingOriginalOwnerHash = newValue}
  }

  public var originalOwnerNickname: String {
    get {return _storage._originalOwnerNickname}
    set {_uniqueStorage()._originalOwnerNickname = newValue}
  }

  public var tradedTimeMs: Int64 {
    get {return _storage._tradedTimeMs}
    set {_uniqueStorage()._tradedTimeMs = newValue}
  }

  public var isLucky: Bool {
    get {return _storage._isLucky}
    set {_uniqueStorage()._isLucky = newValue}
  }

  public var move3: POGOProtos_Enums_PokemonMove {
    get {return _storage._move3}
    set {_uniqueStorage()._move3 = newValue}
  }

  public var pvpCombatStats: POGOProtos_Data_Combat_PokemonCombatStats {
    get {return _storage._pvpCombatStats ?? POGOProtos_Data_Combat_PokemonCombatStats()}
    set {_uniqueStorage()._pvpCombatStats = newValue}
  }
  /// Returns true if `pvpCombatStats` has been explicitly set.
  public var hasPvpCombatStats: Bool {return _storage._pvpCombatStats != nil}
  /// Clears the value of `pvpCombatStats`. Subsequent reads from it will return its default value.
  public mutating func clearPvpCombatStats() {_uniqueStorage()._pvpCombatStats = nil}

  public var npcCombatStats: POGOProtos_Data_Combat_PokemonCombatStats {
    get {return _storage._npcCombatStats ?? POGOProtos_Data_Combat_PokemonCombatStats()}
    set {_uniqueStorage()._npcCombatStats = newValue}
  }
  /// Returns true if `npcCombatStats` has been explicitly set.
  public var hasNpcCombatStats: Bool {return _storage._npcCombatStats != nil}
  /// Clears the value of `npcCombatStats`. Subsequent reads from it will return its default value.
  public mutating func clearNpcCombatStats() {_uniqueStorage()._npcCombatStats = nil}

  public var move2IsPurifiedExclusive: Bool {
    get {return _storage._move2IsPurifiedExclusive}
    set {_uniqueStorage()._move2IsPurifiedExclusive = newValue}
  }

  public var limitedPokemonIdentifier: String {
    get {return _storage._limitedPokemonIdentifier}
    set {_uniqueStorage()._limitedPokemonIdentifier = newValue}
  }

  public var preBoostedCp: Int32 {
    get {return _storage._preBoostedCp}
    set {_uniqueStorage()._preBoostedCp = newValue}
  }

  public var preBoostedAdditionalCpMultiplier: Float {
    get {return _storage._preBoostedAdditionalCpMultiplier}
    set {_uniqueStorage()._preBoostedAdditionalCpMultiplier = newValue}
  }

  public var deployedGymLatDegree: Double {
    get {return _storage._deployedGymLatDegree}
    set {_uniqueStorage()._deployedGymLatDegree = newValue}
  }

  public var deployedGymLngDegree: Double {
    get {return _storage._deployedGymLngDegree}
    set {_uniqueStorage()._deployedGymLngDegree = newValue}
  }

  public var hasMegaEvolved_p: Bool {
    get {return _storage._hasMegaEvolved_p}
    set {_uniqueStorage()._hasMegaEvolved_p = newValue}
  }

  public var eggType: POGOProtos_Enums_HoloPokemonEggType {
    get {return _storage._eggType}
    set {_uniqueStorage()._eggType = newValue}
  }

  public var tempEvoCp: Int32 {
    get {return _storage._tempEvoCp}
    set {_uniqueStorage()._tempEvoCp = newValue}
  }

  public var tempEvoStaminaModifier: Float {
    get {return _storage._tempEvoStaminaModifier}
    set {_uniqueStorage()._tempEvoStaminaModifier = newValue}
  }

  public var tempEvoCpMultiplier: Float {
    get {return _storage._tempEvoCpMultiplier}
    set {_uniqueStorage()._tempEvoCpMultiplier = newValue}
  }

  public var megaEvolvedForms: [POGOProtos_Enums_TemporaryEvolutionId] {
    get {return _storage._megaEvolvedForms}
    set {_uniqueStorage()._megaEvolvedForms = newValue}
  }

  public var evolutionQuestInfo: [POGOProtos_Data_PokemonData.PokemonEvolutionQuest] {
    get {return _storage._evolutionQuestInfo}
    set {_uniqueStorage()._evolutionQuestInfo = newValue}
  }

  public var originDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail {
    get {return _storage._originDetail ?? POGOProtos_Data_PokemonData.PokemonCreateDetail()}
    set {_uniqueStorage()._originDetail = newValue}
  }
  /// Returns true if `originDetail` has been explicitly set.
  public var hasOriginDetail: Bool {return _storage._originDetail != nil}
  /// Clears the value of `originDetail`. Subsequent reads from it will return its default value.
  public mutating func clearOriginDetail() {_uniqueStorage()._originDetail = nil}

  public var pokemonTagIds: [UInt64] {
    get {return _storage._pokemonTagIds}
    set {_uniqueStorage()._pokemonTagIds = newValue}
  }

  public var originEvents: [String] {
    get {return _storage._originEvents}
    set {_uniqueStorage()._originEvents = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct PokemonEvolutionQuest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var questRequirement: POGOProtos_Data_Quests_Quest {
      get {return _questRequirement ?? POGOProtos_Data_Quests_Quest()}
      set {_questRequirement = newValue}
    }
    /// Returns true if `questRequirement` has been explicitly set.
    public var hasQuestRequirement: Bool {return self._questRequirement != nil}
    /// Clears the value of `questRequirement`. Subsequent reads from it will return its default value.
    public mutating func clearQuestRequirement() {self._questRequirement = nil}

    public var questInfo: POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo {
      get {return _questInfo ?? POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo()}
      set {_questInfo = newValue}
    }
    /// Returns true if `questInfo` has been explicitly set.
    public var hasQuestInfo: Bool {return self._questInfo != nil}
    /// Clears the value of `questInfo`. Subsequent reads from it will return its default value.
    public mutating func clearQuestInfo() {self._questInfo = nil}

    public var evolution: POGOProtos_Enums_PokemonId = .missingno

    public var form: POGOProtos_Enums_Form = .unset

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct EvolutionQuestInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var questRequirementTemplateID: String = String()

      public var description_p: String = String()

      public var target: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _questRequirement: POGOProtos_Data_Quests_Quest? = nil
    fileprivate var _questInfo: POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo? = nil
  }

  public struct PokemonCreateDetail {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var detail: POGOProtos_Data_PokemonData.PokemonCreateDetail.OneOf_Detail? = nil

    public var wildDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail {
      get {
        if case .wildDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail()
      }
      set {detail = .wildDetail(newValue)}
    }

    public var eggDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail {
      get {
        if case .eggDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail()
      }
      set {detail = .eggDetail(newValue)}
    }

    public var raidDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail {
      get {
        if case .raidDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail()
      }
      set {detail = .raidDetail(newValue)}
    }

    public var questDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail {
      get {
        if case .questDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail()
      }
      set {detail = .questDetail(newValue)}
    }

    public var vsSeekerDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail {
      get {
        if case .vsSeekerDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail()
      }
      set {detail = .vsSeekerDetail(newValue)}
    }

    public var invasionDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail {
      get {
        if case .invasionDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail()
      }
      set {detail = .invasionDetail(newValue)}
    }

    public var photobombDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail {
      get {
        if case .photobombDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail()
      }
      set {detail = .photobombDetail(newValue)}
    }

    public var tutorialDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail {
      get {
        if case .tutorialDetail(let v)? = detail {return v}
        return POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail()
      }
      set {detail = .tutorialDetail(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Detail: Equatable {
      case wildDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail)
      case eggDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail)
      case raidDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail)
      case questDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail)
      case vsSeekerDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail)
      case invasionDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail)
      case photobombDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail)
      case tutorialDetail(POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.OneOf_Detail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.OneOf_Detail) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.wildDetail, .wildDetail): return {
          guard case .wildDetail(let l) = lhs, case .wildDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.eggDetail, .eggDetail): return {
          guard case .eggDetail(let l) = lhs, case .eggDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.raidDetail, .raidDetail): return {
          guard case .raidDetail(let l) = lhs, case .raidDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.questDetail, .questDetail): return {
          guard case .questDetail(let l) = lhs, case .questDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.vsSeekerDetail, .vsSeekerDetail): return {
          guard case .vsSeekerDetail(let l) = lhs, case .vsSeekerDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.invasionDetail, .invasionDetail): return {
          guard case .invasionDetail(let l) = lhs, case .invasionDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.photobombDetail, .photobombDetail): return {
          guard case .photobombDetail(let l) = lhs, case .photobombDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.tutorialDetail, .tutorialDetail): return {
          guard case .tutorialDetail(let l) = lhs, case .tutorialDetail(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct WildCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var caughtInWild: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct EggCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var hatchedTimeMs: Int64 = 0

      public var playerHatchedS2CellID: Int64 = 0

      public var receivedTimeMs: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct RaidCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var isExclusive: Bool = false

      public var isMega: Bool = false

      public var playerCapturedS2CellID: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct QuestCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var origin: POGOProtos_Enums_EncounterType = .spawnPoint

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct VsSeekerCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var season: Int32 = 0

      public var league: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct InvasionCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var origin: POGOProtos_Enums_EnumWrapper.InvasionCharacter = .characterUnset

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct PhotobombCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var caughtInPhotobomb: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct TutorialCreateDetail {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var caughtInWild: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data"

extension POGOProtos_Data_PokemonData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PokemonData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "pokemon_id"),
    3: .same(proto: "cp"),
    4: .same(proto: "stamina"),
    5: .standard(proto: "stamina_max"),
    6: .standard(proto: "move_1"),
    7: .standard(proto: "move_2"),
    8: .standard(proto: "deployed_fort_id"),
    9: .standard(proto: "owner_name"),
    10: .standard(proto: "is_egg"),
    11: .standard(proto: "egg_km_walked_target"),
    12: .standard(proto: "egg_km_walked_start"),
    14: .same(proto: "origin"),
    15: .standard(proto: "height_m"),
    16: .standard(proto: "weight_kg"),
    17: .standard(proto: "individual_attack"),
    18: .standard(proto: "individual_defense"),
    19: .standard(proto: "individual_stamina"),
    20: .standard(proto: "cp_multiplier"),
    21: .same(proto: "pokeball"),
    22: .standard(proto: "captured_cell_id"),
    23: .standard(proto: "battles_attacked"),
    24: .standard(proto: "battles_defended"),
    25: .standard(proto: "egg_incubator_id"),
    26: .standard(proto: "creation_time_ms"),
    27: .standard(proto: "num_upgrades"),
    28: .standard(proto: "additional_cp_multiplier"),
    29: .same(proto: "favorite"),
    30: .same(proto: "nickname"),
    31: .standard(proto: "from_fort"),
    32: .standard(proto: "buddy_candy_awarded"),
    33: .standard(proto: "buddy_total_km_walked"),
    34: .standard(proto: "display_pokemon_id"),
    35: .standard(proto: "display_cp"),
    36: .standard(proto: "pokemon_display"),
    37: .standard(proto: "is_bad"),
    38: .standard(proto: "hatched_from_egg"),
    39: .standard(proto: "coins_returned"),
    40: .standard(proto: "deployed_duration_ms"),
    41: .standard(proto: "deployed_returned_timestamp_ms"),
    42: .standard(proto: "cp_multiplier_before_trading"),
    43: .standard(proto: "trading_original_owner_hash"),
    44: .standard(proto: "original_owner_nickname"),
    45: .standard(proto: "traded_time_ms"),
    46: .standard(proto: "is_lucky"),
    47: .standard(proto: "move_3"),
    48: .standard(proto: "pvp_combat_stats"),
    49: .standard(proto: "npc_combat_stats"),
    50: .standard(proto: "move2_is_purified_exclusive"),
    51: .standard(proto: "limited_pokemon_identifier"),
    52: .standard(proto: "pre_boosted_cp"),
    53: .standard(proto: "pre_boosted_additional_cp_multiplier"),
    55: .standard(proto: "deployed_gym_lat_degree"),
    56: .standard(proto: "deployed_gym_lng_degree"),
    57: .standard(proto: "has_mega_evolved"),
    58: .standard(proto: "egg_type"),
    59: .standard(proto: "temp_evo_cp"),
    60: .standard(proto: "temp_evo_stamina_modifier"),
    61: .standard(proto: "temp_evo_cp_multiplier"),
    63: .standard(proto: "mega_evolved_forms"),
    64: .standard(proto: "evolution_quest_info"),
    66: .standard(proto: "origin_detail"),
    67: .standard(proto: "pokemon_tag_ids"),
    68: .standard(proto: "origin_events"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _pokemonID: POGOProtos_Enums_PokemonId = .missingno
    var _cp: Int32 = 0
    var _stamina: Int32 = 0
    var _staminaMax: Int32 = 0
    var _move1: POGOProtos_Enums_PokemonMove = .moveUnset
    var _move2: POGOProtos_Enums_PokemonMove = .moveUnset
    var _deployedFortID: String = String()
    var _ownerName: String = String()
    var _isEgg: Bool = false
    var _eggKmWalkedTarget: Double = 0
    var _eggKmWalkedStart: Double = 0
    var _origin: Int32 = 0
    var _heightM: Float = 0
    var _weightKg: Float = 0
    var _individualAttack: Int32 = 0
    var _individualDefense: Int32 = 0
    var _individualStamina: Int32 = 0
    var _cpMultiplier: Float = 0
    var _pokeball: POGOProtos_Inventory_Item_ItemId = .itemUnknown
    var _capturedCellID: UInt64 = 0
    var _battlesAttacked: Int32 = 0
    var _battlesDefended: Int32 = 0
    var _eggIncubatorID: String = String()
    var _creationTimeMs: UInt64 = 0
    var _numUpgrades: Int32 = 0
    var _additionalCpMultiplier: Float = 0
    var _favorite: Int32 = 0
    var _nickname: String = String()
    var _fromFort: Int32 = 0
    var _buddyCandyAwarded: Int32 = 0
    var _buddyTotalKmWalked: Float = 0
    var _displayPokemonID: Int32 = 0
    var _displayCp: Int32 = 0
    var _pokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
    var _isBad: Bool = false
    var _hatchedFromEgg: Bool = false
    var _coinsReturned: Int32 = 0
    var _deployedDurationMs: Int64 = 0
    var _deployedReturnedTimestampMs: Int64 = 0
    var _cpMultiplierBeforeTrading: Float = 0
    var _tradingOriginalOwnerHash: Int32 = 0
    var _originalOwnerNickname: String = String()
    var _tradedTimeMs: Int64 = 0
    var _isLucky: Bool = false
    var _move3: POGOProtos_Enums_PokemonMove = .moveUnset
    var _pvpCombatStats: POGOProtos_Data_Combat_PokemonCombatStats? = nil
    var _npcCombatStats: POGOProtos_Data_Combat_PokemonCombatStats? = nil
    var _move2IsPurifiedExclusive: Bool = false
    var _limitedPokemonIdentifier: String = String()
    var _preBoostedCp: Int32 = 0
    var _preBoostedAdditionalCpMultiplier: Float = 0
    var _deployedGymLatDegree: Double = 0
    var _deployedGymLngDegree: Double = 0
    var _hasMegaEvolved_p: Bool = false
    var _eggType: POGOProtos_Enums_HoloPokemonEggType = .eggTypeUnset
    var _tempEvoCp: Int32 = 0
    var _tempEvoStaminaModifier: Float = 0
    var _tempEvoCpMultiplier: Float = 0
    var _megaEvolvedForms: [POGOProtos_Enums_TemporaryEvolutionId] = []
    var _evolutionQuestInfo: [POGOProtos_Data_PokemonData.PokemonEvolutionQuest] = []
    var _originDetail: POGOProtos_Data_PokemonData.PokemonCreateDetail? = nil
    var _pokemonTagIds: [UInt64] = []
    var _originEvents: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _pokemonID = source._pokemonID
      _cp = source._cp
      _stamina = source._stamina
      _staminaMax = source._staminaMax
      _move1 = source._move1
      _move2 = source._move2
      _deployedFortID = source._deployedFortID
      _ownerName = source._ownerName
      _isEgg = source._isEgg
      _eggKmWalkedTarget = source._eggKmWalkedTarget
      _eggKmWalkedStart = source._eggKmWalkedStart
      _origin = source._origin
      _heightM = source._heightM
      _weightKg = source._weightKg
      _individualAttack = source._individualAttack
      _individualDefense = source._individualDefense
      _individualStamina = source._individualStamina
      _cpMultiplier = source._cpMultiplier
      _pokeball = source._pokeball
      _capturedCellID = source._capturedCellID
      _battlesAttacked = source._battlesAttacked
      _battlesDefended = source._battlesDefended
      _eggIncubatorID = source._eggIncubatorID
      _creationTimeMs = source._creationTimeMs
      _numUpgrades = source._numUpgrades
      _additionalCpMultiplier = source._additionalCpMultiplier
      _favorite = source._favorite
      _nickname = source._nickname
      _fromFort = source._fromFort
      _buddyCandyAwarded = source._buddyCandyAwarded
      _buddyTotalKmWalked = source._buddyTotalKmWalked
      _displayPokemonID = source._displayPokemonID
      _displayCp = source._displayCp
      _pokemonDisplay = source._pokemonDisplay
      _isBad = source._isBad
      _hatchedFromEgg = source._hatchedFromEgg
      _coinsReturned = source._coinsReturned
      _deployedDurationMs = source._deployedDurationMs
      _deployedReturnedTimestampMs = source._deployedReturnedTimestampMs
      _cpMultiplierBeforeTrading = source._cpMultiplierBeforeTrading
      _tradingOriginalOwnerHash = source._tradingOriginalOwnerHash
      _originalOwnerNickname = source._originalOwnerNickname
      _tradedTimeMs = source._tradedTimeMs
      _isLucky = source._isLucky
      _move3 = source._move3
      _pvpCombatStats = source._pvpCombatStats
      _npcCombatStats = source._npcCombatStats
      _move2IsPurifiedExclusive = source._move2IsPurifiedExclusive
      _limitedPokemonIdentifier = source._limitedPokemonIdentifier
      _preBoostedCp = source._preBoostedCp
      _preBoostedAdditionalCpMultiplier = source._preBoostedAdditionalCpMultiplier
      _deployedGymLatDegree = source._deployedGymLatDegree
      _deployedGymLngDegree = source._deployedGymLngDegree
      _hasMegaEvolved_p = source._hasMegaEvolved_p
      _eggType = source._eggType
      _tempEvoCp = source._tempEvoCp
      _tempEvoStaminaModifier = source._tempEvoStaminaModifier
      _tempEvoCpMultiplier = source._tempEvoCpMultiplier
      _megaEvolvedForms = source._megaEvolvedForms
      _evolutionQuestInfo = source._evolutionQuestInfo
      _originDetail = source._originDetail
      _pokemonTagIds = source._pokemonTagIds
      _originEvents = source._originEvents
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFixed64Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._pokemonID) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._cp) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._stamina) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._staminaMax) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._move1) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._move2) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._deployedFortID) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._ownerName) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isEgg) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._eggKmWalkedTarget) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._eggKmWalkedStart) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._origin) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._heightM) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._weightKg) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._individualAttack) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._individualDefense) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._individualStamina) }()
        case 20: try { try decoder.decodeSingularFloatField(value: &_storage._cpMultiplier) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._pokeball) }()
        case 22: try { try decoder.decodeSingularUInt64Field(value: &_storage._capturedCellID) }()
        case 23: try { try decoder.decodeSingularInt32Field(value: &_storage._battlesAttacked) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._battlesDefended) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._eggIncubatorID) }()
        case 26: try { try decoder.decodeSingularUInt64Field(value: &_storage._creationTimeMs) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._numUpgrades) }()
        case 28: try { try decoder.decodeSingularFloatField(value: &_storage._additionalCpMultiplier) }()
        case 29: try { try decoder.decodeSingularInt32Field(value: &_storage._favorite) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._nickname) }()
        case 31: try { try decoder.decodeSingularInt32Field(value: &_storage._fromFort) }()
        case 32: try { try decoder.decodeSingularInt32Field(value: &_storage._buddyCandyAwarded) }()
        case 33: try { try decoder.decodeSingularFloatField(value: &_storage._buddyTotalKmWalked) }()
        case 34: try { try decoder.decodeSingularInt32Field(value: &_storage._displayPokemonID) }()
        case 35: try { try decoder.decodeSingularInt32Field(value: &_storage._displayCp) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._pokemonDisplay) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._isBad) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._hatchedFromEgg) }()
        case 39: try { try decoder.decodeSingularInt32Field(value: &_storage._coinsReturned) }()
        case 40: try { try decoder.decodeSingularInt64Field(value: &_storage._deployedDurationMs) }()
        case 41: try { try decoder.decodeSingularInt64Field(value: &_storage._deployedReturnedTimestampMs) }()
        case 42: try { try decoder.decodeSingularFloatField(value: &_storage._cpMultiplierBeforeTrading) }()
        case 43: try { try decoder.decodeSingularInt32Field(value: &_storage._tradingOriginalOwnerHash) }()
        case 44: try { try decoder.decodeSingularStringField(value: &_storage._originalOwnerNickname) }()
        case 45: try { try decoder.decodeSingularInt64Field(value: &_storage._tradedTimeMs) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._isLucky) }()
        case 47: try { try decoder.decodeSingularEnumField(value: &_storage._move3) }()
        case 48: try { try decoder.decodeSingularMessageField(value: &_storage._pvpCombatStats) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._npcCombatStats) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._move2IsPurifiedExclusive) }()
        case 51: try { try decoder.decodeSingularStringField(value: &_storage._limitedPokemonIdentifier) }()
        case 52: try { try decoder.decodeSingularInt32Field(value: &_storage._preBoostedCp) }()
        case 53: try { try decoder.decodeSingularFloatField(value: &_storage._preBoostedAdditionalCpMultiplier) }()
        case 55: try { try decoder.decodeSingularDoubleField(value: &_storage._deployedGymLatDegree) }()
        case 56: try { try decoder.decodeSingularDoubleField(value: &_storage._deployedGymLngDegree) }()
        case 57: try { try decoder.decodeSingularBoolField(value: &_storage._hasMegaEvolved_p) }()
        case 58: try { try decoder.decodeSingularEnumField(value: &_storage._eggType) }()
        case 59: try { try decoder.decodeSingularInt32Field(value: &_storage._tempEvoCp) }()
        case 60: try { try decoder.decodeSingularFloatField(value: &_storage._tempEvoStaminaModifier) }()
        case 61: try { try decoder.decodeSingularFloatField(value: &_storage._tempEvoCpMultiplier) }()
        case 63: try { try decoder.decodeRepeatedEnumField(value: &_storage._megaEvolvedForms) }()
        case 64: try { try decoder.decodeRepeatedMessageField(value: &_storage._evolutionQuestInfo) }()
        case 66: try { try decoder.decodeSingularMessageField(value: &_storage._originDetail) }()
        case 67: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._pokemonTagIds) }()
        case 68: try { try decoder.decodeRepeatedStringField(value: &_storage._originEvents) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._pokemonID != .missingno {
        try visitor.visitSingularEnumField(value: _storage._pokemonID, fieldNumber: 2)
      }
      if _storage._cp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._cp, fieldNumber: 3)
      }
      if _storage._stamina != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stamina, fieldNumber: 4)
      }
      if _storage._staminaMax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._staminaMax, fieldNumber: 5)
      }
      if _storage._move1 != .moveUnset {
        try visitor.visitSingularEnumField(value: _storage._move1, fieldNumber: 6)
      }
      if _storage._move2 != .moveUnset {
        try visitor.visitSingularEnumField(value: _storage._move2, fieldNumber: 7)
      }
      if !_storage._deployedFortID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deployedFortID, fieldNumber: 8)
      }
      if !_storage._ownerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerName, fieldNumber: 9)
      }
      if _storage._isEgg != false {
        try visitor.visitSingularBoolField(value: _storage._isEgg, fieldNumber: 10)
      }
      if _storage._eggKmWalkedTarget != 0 {
        try visitor.visitSingularDoubleField(value: _storage._eggKmWalkedTarget, fieldNumber: 11)
      }
      if _storage._eggKmWalkedStart != 0 {
        try visitor.visitSingularDoubleField(value: _storage._eggKmWalkedStart, fieldNumber: 12)
      }
      if _storage._origin != 0 {
        try visitor.visitSingularInt32Field(value: _storage._origin, fieldNumber: 14)
      }
      if _storage._heightM != 0 {
        try visitor.visitSingularFloatField(value: _storage._heightM, fieldNumber: 15)
      }
      if _storage._weightKg != 0 {
        try visitor.visitSingularFloatField(value: _storage._weightKg, fieldNumber: 16)
      }
      if _storage._individualAttack != 0 {
        try visitor.visitSingularInt32Field(value: _storage._individualAttack, fieldNumber: 17)
      }
      if _storage._individualDefense != 0 {
        try visitor.visitSingularInt32Field(value: _storage._individualDefense, fieldNumber: 18)
      }
      if _storage._individualStamina != 0 {
        try visitor.visitSingularInt32Field(value: _storage._individualStamina, fieldNumber: 19)
      }
      if _storage._cpMultiplier != 0 {
        try visitor.visitSingularFloatField(value: _storage._cpMultiplier, fieldNumber: 20)
      }
      if _storage._pokeball != .itemUnknown {
        try visitor.visitSingularEnumField(value: _storage._pokeball, fieldNumber: 21)
      }
      if _storage._capturedCellID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._capturedCellID, fieldNumber: 22)
      }
      if _storage._battlesAttacked != 0 {
        try visitor.visitSingularInt32Field(value: _storage._battlesAttacked, fieldNumber: 23)
      }
      if _storage._battlesDefended != 0 {
        try visitor.visitSingularInt32Field(value: _storage._battlesDefended, fieldNumber: 24)
      }
      if !_storage._eggIncubatorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eggIncubatorID, fieldNumber: 25)
      }
      if _storage._creationTimeMs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._creationTimeMs, fieldNumber: 26)
      }
      if _storage._numUpgrades != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numUpgrades, fieldNumber: 27)
      }
      if _storage._additionalCpMultiplier != 0 {
        try visitor.visitSingularFloatField(value: _storage._additionalCpMultiplier, fieldNumber: 28)
      }
      if _storage._favorite != 0 {
        try visitor.visitSingularInt32Field(value: _storage._favorite, fieldNumber: 29)
      }
      if !_storage._nickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nickname, fieldNumber: 30)
      }
      if _storage._fromFort != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fromFort, fieldNumber: 31)
      }
      if _storage._buddyCandyAwarded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._buddyCandyAwarded, fieldNumber: 32)
      }
      if _storage._buddyTotalKmWalked != 0 {
        try visitor.visitSingularFloatField(value: _storage._buddyTotalKmWalked, fieldNumber: 33)
      }
      if _storage._displayPokemonID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._displayPokemonID, fieldNumber: 34)
      }
      if _storage._displayCp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._displayCp, fieldNumber: 35)
      }
      if let v = _storage._pokemonDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }
      if _storage._isBad != false {
        try visitor.visitSingularBoolField(value: _storage._isBad, fieldNumber: 37)
      }
      if _storage._hatchedFromEgg != false {
        try visitor.visitSingularBoolField(value: _storage._hatchedFromEgg, fieldNumber: 38)
      }
      if _storage._coinsReturned != 0 {
        try visitor.visitSingularInt32Field(value: _storage._coinsReturned, fieldNumber: 39)
      }
      if _storage._deployedDurationMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deployedDurationMs, fieldNumber: 40)
      }
      if _storage._deployedReturnedTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deployedReturnedTimestampMs, fieldNumber: 41)
      }
      if _storage._cpMultiplierBeforeTrading != 0 {
        try visitor.visitSingularFloatField(value: _storage._cpMultiplierBeforeTrading, fieldNumber: 42)
      }
      if _storage._tradingOriginalOwnerHash != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tradingOriginalOwnerHash, fieldNumber: 43)
      }
      if !_storage._originalOwnerNickname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._originalOwnerNickname, fieldNumber: 44)
      }
      if _storage._tradedTimeMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._tradedTimeMs, fieldNumber: 45)
      }
      if _storage._isLucky != false {
        try visitor.visitSingularBoolField(value: _storage._isLucky, fieldNumber: 46)
      }
      if _storage._move3 != .moveUnset {
        try visitor.visitSingularEnumField(value: _storage._move3, fieldNumber: 47)
      }
      if let v = _storage._pvpCombatStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      }
      if let v = _storage._npcCombatStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }
      if _storage._move2IsPurifiedExclusive != false {
        try visitor.visitSingularBoolField(value: _storage._move2IsPurifiedExclusive, fieldNumber: 50)
      }
      if !_storage._limitedPokemonIdentifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._limitedPokemonIdentifier, fieldNumber: 51)
      }
      if _storage._preBoostedCp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._preBoostedCp, fieldNumber: 52)
      }
      if _storage._preBoostedAdditionalCpMultiplier != 0 {
        try visitor.visitSingularFloatField(value: _storage._preBoostedAdditionalCpMultiplier, fieldNumber: 53)
      }
      if _storage._deployedGymLatDegree != 0 {
        try visitor.visitSingularDoubleField(value: _storage._deployedGymLatDegree, fieldNumber: 55)
      }
      if _storage._deployedGymLngDegree != 0 {
        try visitor.visitSingularDoubleField(value: _storage._deployedGymLngDegree, fieldNumber: 56)
      }
      if _storage._hasMegaEvolved_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasMegaEvolved_p, fieldNumber: 57)
      }
      if _storage._eggType != .eggTypeUnset {
        try visitor.visitSingularEnumField(value: _storage._eggType, fieldNumber: 58)
      }
      if _storage._tempEvoCp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tempEvoCp, fieldNumber: 59)
      }
      if _storage._tempEvoStaminaModifier != 0 {
        try visitor.visitSingularFloatField(value: _storage._tempEvoStaminaModifier, fieldNumber: 60)
      }
      if _storage._tempEvoCpMultiplier != 0 {
        try visitor.visitSingularFloatField(value: _storage._tempEvoCpMultiplier, fieldNumber: 61)
      }
      if !_storage._megaEvolvedForms.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._megaEvolvedForms, fieldNumber: 63)
      }
      if !_storage._evolutionQuestInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._evolutionQuestInfo, fieldNumber: 64)
      }
      if let v = _storage._originDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      }
      if !_storage._pokemonTagIds.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._pokemonTagIds, fieldNumber: 67)
      }
      if !_storage._originEvents.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._originEvents, fieldNumber: 68)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData, rhs: POGOProtos_Data_PokemonData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._pokemonID != rhs_storage._pokemonID {return false}
        if _storage._cp != rhs_storage._cp {return false}
        if _storage._stamina != rhs_storage._stamina {return false}
        if _storage._staminaMax != rhs_storage._staminaMax {return false}
        if _storage._move1 != rhs_storage._move1 {return false}
        if _storage._move2 != rhs_storage._move2 {return false}
        if _storage._deployedFortID != rhs_storage._deployedFortID {return false}
        if _storage._ownerName != rhs_storage._ownerName {return false}
        if _storage._isEgg != rhs_storage._isEgg {return false}
        if _storage._eggKmWalkedTarget != rhs_storage._eggKmWalkedTarget {return false}
        if _storage._eggKmWalkedStart != rhs_storage._eggKmWalkedStart {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._heightM != rhs_storage._heightM {return false}
        if _storage._weightKg != rhs_storage._weightKg {return false}
        if _storage._individualAttack != rhs_storage._individualAttack {return false}
        if _storage._individualDefense != rhs_storage._individualDefense {return false}
        if _storage._individualStamina != rhs_storage._individualStamina {return false}
        if _storage._cpMultiplier != rhs_storage._cpMultiplier {return false}
        if _storage._pokeball != rhs_storage._pokeball {return false}
        if _storage._capturedCellID != rhs_storage._capturedCellID {return false}
        if _storage._battlesAttacked != rhs_storage._battlesAttacked {return false}
        if _storage._battlesDefended != rhs_storage._battlesDefended {return false}
        if _storage._eggIncubatorID != rhs_storage._eggIncubatorID {return false}
        if _storage._creationTimeMs != rhs_storage._creationTimeMs {return false}
        if _storage._numUpgrades != rhs_storage._numUpgrades {return false}
        if _storage._additionalCpMultiplier != rhs_storage._additionalCpMultiplier {return false}
        if _storage._favorite != rhs_storage._favorite {return false}
        if _storage._nickname != rhs_storage._nickname {return false}
        if _storage._fromFort != rhs_storage._fromFort {return false}
        if _storage._buddyCandyAwarded != rhs_storage._buddyCandyAwarded {return false}
        if _storage._buddyTotalKmWalked != rhs_storage._buddyTotalKmWalked {return false}
        if _storage._displayPokemonID != rhs_storage._displayPokemonID {return false}
        if _storage._displayCp != rhs_storage._displayCp {return false}
        if _storage._pokemonDisplay != rhs_storage._pokemonDisplay {return false}
        if _storage._isBad != rhs_storage._isBad {return false}
        if _storage._hatchedFromEgg != rhs_storage._hatchedFromEgg {return false}
        if _storage._coinsReturned != rhs_storage._coinsReturned {return false}
        if _storage._deployedDurationMs != rhs_storage._deployedDurationMs {return false}
        if _storage._deployedReturnedTimestampMs != rhs_storage._deployedReturnedTimestampMs {return false}
        if _storage._cpMultiplierBeforeTrading != rhs_storage._cpMultiplierBeforeTrading {return false}
        if _storage._tradingOriginalOwnerHash != rhs_storage._tradingOriginalOwnerHash {return false}
        if _storage._originalOwnerNickname != rhs_storage._originalOwnerNickname {return false}
        if _storage._tradedTimeMs != rhs_storage._tradedTimeMs {return false}
        if _storage._isLucky != rhs_storage._isLucky {return false}
        if _storage._move3 != rhs_storage._move3 {return false}
        if _storage._pvpCombatStats != rhs_storage._pvpCombatStats {return false}
        if _storage._npcCombatStats != rhs_storage._npcCombatStats {return false}
        if _storage._move2IsPurifiedExclusive != rhs_storage._move2IsPurifiedExclusive {return false}
        if _storage._limitedPokemonIdentifier != rhs_storage._limitedPokemonIdentifier {return false}
        if _storage._preBoostedCp != rhs_storage._preBoostedCp {return false}
        if _storage._preBoostedAdditionalCpMultiplier != rhs_storage._preBoostedAdditionalCpMultiplier {return false}
        if _storage._deployedGymLatDegree != rhs_storage._deployedGymLatDegree {return false}
        if _storage._deployedGymLngDegree != rhs_storage._deployedGymLngDegree {return false}
        if _storage._hasMegaEvolved_p != rhs_storage._hasMegaEvolved_p {return false}
        if _storage._eggType != rhs_storage._eggType {return false}
        if _storage._tempEvoCp != rhs_storage._tempEvoCp {return false}
        if _storage._tempEvoStaminaModifier != rhs_storage._tempEvoStaminaModifier {return false}
        if _storage._tempEvoCpMultiplier != rhs_storage._tempEvoCpMultiplier {return false}
        if _storage._megaEvolvedForms != rhs_storage._megaEvolvedForms {return false}
        if _storage._evolutionQuestInfo != rhs_storage._evolutionQuestInfo {return false}
        if _storage._originDetail != rhs_storage._originDetail {return false}
        if _storage._pokemonTagIds != rhs_storage._pokemonTagIds {return false}
        if _storage._originEvents != rhs_storage._originEvents {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonEvolutionQuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.protoMessageName + ".PokemonEvolutionQuest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quest_requirement"),
    2: .standard(proto: "quest_info"),
    3: .same(proto: "evolution"),
    4: .same(proto: "form"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._questRequirement) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._questInfo) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.evolution) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.form) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._questRequirement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._questInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.evolution != .missingno {
      try visitor.visitSingularEnumField(value: self.evolution, fieldNumber: 3)
    }
    if self.form != .unset {
      try visitor.visitSingularEnumField(value: self.form, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonEvolutionQuest, rhs: POGOProtos_Data_PokemonData.PokemonEvolutionQuest) -> Bool {
    if lhs._questRequirement != rhs._questRequirement {return false}
    if lhs._questInfo != rhs._questInfo {return false}
    if lhs.evolution != rhs.evolution {return false}
    if lhs.form != rhs.form {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonEvolutionQuest.protoMessageName + ".EvolutionQuestInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quest_requirement_template_id"),
    2: .same(proto: "description"),
    3: .same(proto: "target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.questRequirementTemplateID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.target) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.questRequirementTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.questRequirementTemplateID, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.target != 0 {
      try visitor.visitSingularInt32Field(value: self.target, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo, rhs: POGOProtos_Data_PokemonData.PokemonEvolutionQuest.EvolutionQuestInfo) -> Bool {
    if lhs.questRequirementTemplateID != rhs.questRequirementTemplateID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.protoMessageName + ".PokemonCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wild_detail"),
    2: .standard(proto: "egg_detail"),
    3: .standard(proto: "raid_detail"),
    4: .standard(proto: "quest_detail"),
    5: .standard(proto: "vs_seeker_detail"),
    6: .standard(proto: "invasion_detail"),
    7: .standard(proto: "photobomb_detail"),
    8: .standard(proto: "tutorial_detail"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .wildDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .wildDetail(v)}
      }()
      case 2: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .eggDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .eggDetail(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .raidDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .raidDetail(v)}
      }()
      case 4: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .questDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .questDetail(v)}
      }()
      case 5: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .vsSeekerDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .vsSeekerDetail(v)}
      }()
      case 6: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .invasionDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .invasionDetail(v)}
      }()
      case 7: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .photobombDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .photobombDetail(v)}
      }()
      case 8: try {
        var v: POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail?
        if let current = self.detail {
          try decoder.handleConflictingOneOf()
          if case .tutorialDetail(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.detail = .tutorialDetail(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.detail {
    case .wildDetail?: try {
      guard case .wildDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .eggDetail?: try {
      guard case .eggDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .raidDetail?: try {
      guard case .raidDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .questDetail?: try {
      guard case .questDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .vsSeekerDetail?: try {
      guard case .vsSeekerDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .invasionDetail?: try {
      guard case .invasionDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .photobombDetail?: try {
      guard case .photobombDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .tutorialDetail?: try {
      guard case .tutorialDetail(let v)? = self.detail else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail) -> Bool {
    if lhs.detail != rhs.detail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".WildCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "caught_in_wild"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.caughtInWild) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.caughtInWild != false {
      try visitor.visitSingularBoolField(value: self.caughtInWild, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.WildCreateDetail) -> Bool {
    if lhs.caughtInWild != rhs.caughtInWild {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".EggCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "hatched_time_ms"),
    2: .standard(proto: "player_hatched_s2_cell_id"),
    3: .standard(proto: "received_time_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.hatchedTimeMs) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.playerHatchedS2CellID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.receivedTimeMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hatchedTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.hatchedTimeMs, fieldNumber: 1)
    }
    if self.playerHatchedS2CellID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerHatchedS2CellID, fieldNumber: 2)
    }
    if self.receivedTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.receivedTimeMs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.EggCreateDetail) -> Bool {
    if lhs.hatchedTimeMs != rhs.hatchedTimeMs {return false}
    if lhs.playerHatchedS2CellID != rhs.playerHatchedS2CellID {return false}
    if lhs.receivedTimeMs != rhs.receivedTimeMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".RaidCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_exclusive"),
    2: .standard(proto: "is_mega"),
    3: .standard(proto: "player_captured_s2_cell_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isExclusive) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isMega) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.playerCapturedS2CellID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isExclusive != false {
      try visitor.visitSingularBoolField(value: self.isExclusive, fieldNumber: 1)
    }
    if self.isMega != false {
      try visitor.visitSingularBoolField(value: self.isMega, fieldNumber: 2)
    }
    if self.playerCapturedS2CellID != 0 {
      try visitor.visitSingularInt64Field(value: self.playerCapturedS2CellID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.RaidCreateDetail) -> Bool {
    if lhs.isExclusive != rhs.isExclusive {return false}
    if lhs.isMega != rhs.isMega {return false}
    if lhs.playerCapturedS2CellID != rhs.playerCapturedS2CellID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".QuestCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.origin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.origin != .spawnPoint {
      try visitor.visitSingularEnumField(value: self.origin, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.QuestCreateDetail) -> Bool {
    if lhs.origin != rhs.origin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".VsSeekerCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "season"),
    2: .same(proto: "league"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.season) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.league) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.season != 0 {
      try visitor.visitSingularInt32Field(value: self.season, fieldNumber: 1)
    }
    if !self.league.isEmpty {
      try visitor.visitSingularStringField(value: self.league, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.VsSeekerCreateDetail) -> Bool {
    if lhs.season != rhs.season {return false}
    if lhs.league != rhs.league {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".InvasionCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.origin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.origin != .characterUnset {
      try visitor.visitSingularEnumField(value: self.origin, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.InvasionCreateDetail) -> Bool {
    if lhs.origin != rhs.origin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".PhotobombCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "caught_in_photobomb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.caughtInPhotobomb) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.caughtInPhotobomb != false {
      try visitor.visitSingularBoolField(value: self.caughtInPhotobomb, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.PhotobombCreateDetail) -> Bool {
    if lhs.caughtInPhotobomb != rhs.caughtInPhotobomb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_PokemonData.PokemonCreateDetail.protoMessageName + ".TutorialCreateDetail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "caught_in_wild"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.caughtInWild) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.caughtInWild != false {
      try visitor.visitSingularBoolField(value: self.caughtInWild, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail, rhs: POGOProtos_Data_PokemonData.PokemonCreateDetail.TutorialCreateDetail) -> Bool {
    if lhs.caughtInWild != rhs.caughtInWild {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
