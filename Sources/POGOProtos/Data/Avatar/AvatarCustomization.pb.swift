// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Avatar/AvatarCustomization.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Avatar_AvatarCustomization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var enabled: Bool = false

  public var avatarType: POGOProtos_Data_Player_PlayerAvatarType = .playerAvatarMale

  public var slot: [POGOProtos_Data_Avatar_AvatarCustomization.Slot] = []

  public var bundleName: String = String()

  public var assetName: String = String()

  public var groupName: String = String()

  public var sortOrder: Int32 = 0

  public var unlockType: POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationUnlockType = .unsetUnlockType

  public var promoType: [POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationPromoType] = []

  public var unlockBadgeType: POGOProtos_Enums_BadgeType = .badgeUnset

  public var iapSku: String = String()

  public var unlockBadgeLevel: Int32 = 0

  public var iconName: String = String()

  public var unlockPlayerLevel: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AvatarCustomizationPromoType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsetPromoType // = 0
    case sale // = 1
    case featured // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsetPromoType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsetPromoType
      case 1: self = .sale
      case 2: self = .featured
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsetPromoType: return 0
      case .sale: return 1
      case .featured: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum AvatarCustomizationUnlockType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsetUnlockType // = 0
    case `default` // = 1
    case medalReward // = 2
    case iapClothing // = 3
    case levelReward // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsetUnlockType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsetUnlockType
      case 1: self = .default
      case 2: self = .medalReward
      case 3: self = .iapClothing
      case 4: self = .levelReward
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsetUnlockType: return 0
      case .default: return 1
      case .medalReward: return 2
      case .iapClothing: return 3
      case .levelReward: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Slot: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsetSlot // = 0
    case hair // = 1
    case shirt // = 2
    case pants // = 3
    case hat // = 4
    case shoes // = 5
    case eyes // = 6
    case backpack // = 7
    case gloves // = 8
    case socks // = 9
    case belt // = 10
    case glasses // = 11
    case necklace // = 12
    case skin // = 13
    case pose // = 14
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsetSlot
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsetSlot
      case 1: self = .hair
      case 2: self = .shirt
      case 3: self = .pants
      case 4: self = .hat
      case 5: self = .shoes
      case 6: self = .eyes
      case 7: self = .backpack
      case 8: self = .gloves
      case 9: self = .socks
      case 10: self = .belt
      case 11: self = .glasses
      case 12: self = .necklace
      case 13: self = .skin
      case 14: self = .pose
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsetSlot: return 0
      case .hair: return 1
      case .shirt: return 2
      case .pants: return 3
      case .hat: return 4
      case .shoes: return 5
      case .eyes: return 6
      case .backpack: return 7
      case .gloves: return 8
      case .socks: return 9
      case .belt: return 10
      case .glasses: return 11
      case .necklace: return 12
      case .skin: return 13
      case .pose: return 14
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationPromoType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationPromoType] = [
    .unsetPromoType,
    .sale,
    .featured,
  ]
}

extension POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationUnlockType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationUnlockType] = [
    .unsetUnlockType,
    .default,
    .medalReward,
    .iapClothing,
    .levelReward,
  ]
}

extension POGOProtos_Data_Avatar_AvatarCustomization.Slot: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Avatar_AvatarCustomization.Slot] = [
    .unsetSlot,
    .hair,
    .shirt,
    .pants,
    .hat,
    .shoes,
    .eyes,
    .backpack,
    .gloves,
    .socks,
    .belt,
    .glasses,
    .necklace,
    .skin,
    .pose,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Avatar"

extension POGOProtos_Data_Avatar_AvatarCustomization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AvatarCustomization"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "avatar_type"),
    3: .same(proto: "slot"),
    4: .standard(proto: "bundle_name"),
    5: .standard(proto: "asset_name"),
    6: .standard(proto: "group_name"),
    7: .standard(proto: "sort_order"),
    8: .standard(proto: "unlock_type"),
    9: .standard(proto: "promo_type"),
    10: .standard(proto: "unlock_badge_type"),
    11: .standard(proto: "iap_sku"),
    12: .standard(proto: "unlock_badge_level"),
    13: .standard(proto: "icon_name"),
    14: .standard(proto: "unlock_player_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 2: try decoder.decodeSingularEnumField(value: &self.avatarType)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.slot)
      case 4: try decoder.decodeSingularStringField(value: &self.bundleName)
      case 5: try decoder.decodeSingularStringField(value: &self.assetName)
      case 6: try decoder.decodeSingularStringField(value: &self.groupName)
      case 7: try decoder.decodeSingularInt32Field(value: &self.sortOrder)
      case 8: try decoder.decodeSingularEnumField(value: &self.unlockType)
      case 9: try decoder.decodeRepeatedEnumField(value: &self.promoType)
      case 10: try decoder.decodeSingularEnumField(value: &self.unlockBadgeType)
      case 11: try decoder.decodeSingularStringField(value: &self.iapSku)
      case 12: try decoder.decodeSingularInt32Field(value: &self.unlockBadgeLevel)
      case 13: try decoder.decodeSingularStringField(value: &self.iconName)
      case 14: try decoder.decodeSingularInt32Field(value: &self.unlockPlayerLevel)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if self.avatarType != .playerAvatarMale {
      try visitor.visitSingularEnumField(value: self.avatarType, fieldNumber: 2)
    }
    if !self.slot.isEmpty {
      try visitor.visitPackedEnumField(value: self.slot, fieldNumber: 3)
    }
    if !self.bundleName.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleName, fieldNumber: 4)
    }
    if !self.assetName.isEmpty {
      try visitor.visitSingularStringField(value: self.assetName, fieldNumber: 5)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 6)
    }
    if self.sortOrder != 0 {
      try visitor.visitSingularInt32Field(value: self.sortOrder, fieldNumber: 7)
    }
    if self.unlockType != .unsetUnlockType {
      try visitor.visitSingularEnumField(value: self.unlockType, fieldNumber: 8)
    }
    if !self.promoType.isEmpty {
      try visitor.visitPackedEnumField(value: self.promoType, fieldNumber: 9)
    }
    if self.unlockBadgeType != .badgeUnset {
      try visitor.visitSingularEnumField(value: self.unlockBadgeType, fieldNumber: 10)
    }
    if !self.iapSku.isEmpty {
      try visitor.visitSingularStringField(value: self.iapSku, fieldNumber: 11)
    }
    if self.unlockBadgeLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.unlockBadgeLevel, fieldNumber: 12)
    }
    if !self.iconName.isEmpty {
      try visitor.visitSingularStringField(value: self.iconName, fieldNumber: 13)
    }
    if self.unlockPlayerLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.unlockPlayerLevel, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Avatar_AvatarCustomization, rhs: POGOProtos_Data_Avatar_AvatarCustomization) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.avatarType != rhs.avatarType {return false}
    if lhs.slot != rhs.slot {return false}
    if lhs.bundleName != rhs.bundleName {return false}
    if lhs.assetName != rhs.assetName {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.sortOrder != rhs.sortOrder {return false}
    if lhs.unlockType != rhs.unlockType {return false}
    if lhs.promoType != rhs.promoType {return false}
    if lhs.unlockBadgeType != rhs.unlockBadgeType {return false}
    if lhs.iapSku != rhs.iapSku {return false}
    if lhs.unlockBadgeLevel != rhs.unlockBadgeLevel {return false}
    if lhs.iconName != rhs.iconName {return false}
    if lhs.unlockPlayerLevel != rhs.unlockPlayerLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationPromoType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_PROMO_TYPE"),
    1: .same(proto: "SALE"),
    2: .same(proto: "FEATURED"),
  ]
}

extension POGOProtos_Data_Avatar_AvatarCustomization.AvatarCustomizationUnlockType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_UNLOCK_TYPE"),
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "MEDAL_REWARD"),
    3: .same(proto: "IAP_CLOTHING"),
    4: .same(proto: "LEVEL_REWARD"),
  ]
}

extension POGOProtos_Data_Avatar_AvatarCustomization.Slot: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_SLOT"),
    1: .same(proto: "HAIR"),
    2: .same(proto: "SHIRT"),
    3: .same(proto: "PANTS"),
    4: .same(proto: "HAT"),
    5: .same(proto: "SHOES"),
    6: .same(proto: "EYES"),
    7: .same(proto: "BACKPACK"),
    8: .same(proto: "GLOVES"),
    9: .same(proto: "SOCKS"),
    10: .same(proto: "BELT"),
    11: .same(proto: "GLASSES"),
    12: .same(proto: "NECKLACE"),
    13: .same(proto: "SKIN"),
    14: .same(proto: "POSE"),
  ]
}
