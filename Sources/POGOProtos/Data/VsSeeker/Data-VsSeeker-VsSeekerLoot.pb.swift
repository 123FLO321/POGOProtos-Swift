// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/VsSeeker/VsSeekerLoot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_VsSeeker_VsSeekerLoot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rankLevel: Int32 = 0

  public var reward: [POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward] = []

  public var rewardTrack: POGOProtos_Data_VsSeeker_VsSeekerRewardTrack = .free

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Reward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rewardType: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType? = nil

    public var item: POGOProtos_Inventory_LootItem {
      get {
        if case .item(let v)? = rewardType {return v}
        return POGOProtos_Inventory_LootItem()
      }
      set {rewardType = .item(newValue)}
    }

    public var pokemonReward: Bool {
      get {
        if case .pokemonReward(let v)? = rewardType {return v}
        return false
      }
      set {rewardType = .pokemonReward(newValue)}
    }

    public var itemLootTable: Bool {
      get {
        if case .itemLootTable(let v)? = rewardType {return v}
        return false
      }
      set {rewardType = .itemLootTable(newValue)}
    }

    public var itemLootTableCount: Int32 {
      get {
        if case .itemLootTableCount(let v)? = rewardType {return v}
        return 0
      }
      set {rewardType = .itemLootTableCount(newValue)}
    }

    public var itemRankingLootTableCount: Int32 {
      get {
        if case .itemRankingLootTableCount(let v)? = rewardType {return v}
        return 0
      }
      set {rewardType = .itemRankingLootTableCount(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_RewardType: Equatable {
      case item(POGOProtos_Inventory_LootItem)
      case pokemonReward(Bool)
      case itemLootTable(Bool)
      case itemLootTableCount(Int32)
      case itemRankingLootTableCount(Int32)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.item, .item): return {
          guard case .item(let l) = lhs, case .item(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.pokemonReward, .pokemonReward): return {
          guard case .pokemonReward(let l) = lhs, case .pokemonReward(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.itemLootTable, .itemLootTable): return {
          guard case .itemLootTable(let l) = lhs, case .itemLootTable(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.itemLootTableCount, .itemLootTableCount): return {
          guard case .itemLootTableCount(let l) = lhs, case .itemLootTableCount(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.itemRankingLootTableCount, .itemRankingLootTableCount): return {
          guard case .itemRankingLootTableCount(let l) = lhs, case .itemRankingLootTableCount(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.VsSeeker"

extension POGOProtos_Data_VsSeeker_VsSeekerLoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VsSeekerLoot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_level"),
    2: .same(proto: "reward"),
    3: .standard(proto: "reward_track"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.rankLevel) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.reward) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.rewardTrack) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rankLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.rankLevel, fieldNumber: 1)
    }
    if !self.reward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reward, fieldNumber: 2)
    }
    if self.rewardTrack != .free {
      try visitor.visitSingularEnumField(value: self.rewardTrack, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot) -> Bool {
    if lhs.rankLevel != rhs.rankLevel {return false}
    if lhs.reward != rhs.reward {return false}
    if lhs.rewardTrack != rhs.rewardTrack {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerLoot.protoMessageName + ".Reward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .standard(proto: "pokemon_reward"),
    3: .standard(proto: "item_loot_table"),
    4: .standard(proto: "item_loot_table_count"),
    5: .standard(proto: "item_ranking_loot_table_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Inventory_LootItem?
        if let current = self.rewardType {
          try decoder.handleConflictingOneOf()
          if case .item(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.rewardType = .item(v)}
      }()
      case 2: try {
        if self.rewardType != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.rewardType = .pokemonReward(v)}
      }()
      case 3: try {
        if self.rewardType != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.rewardType = .itemLootTable(v)}
      }()
      case 4: try {
        if self.rewardType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.rewardType = .itemLootTableCount(v)}
      }()
      case 5: try {
        if self.rewardType != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.rewardType = .itemRankingLootTableCount(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.rewardType {
    case .item?: try {
      guard case .item(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .pokemonReward?: try {
      guard case .pokemonReward(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .itemLootTable?: try {
      guard case .itemLootTable(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .itemLootTableCount?: try {
      guard case .itemLootTableCount(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }()
    case .itemRankingLootTableCount?: try {
      guard case .itemRankingLootTableCount(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward) -> Bool {
    if lhs.rewardType != rhs.rewardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
