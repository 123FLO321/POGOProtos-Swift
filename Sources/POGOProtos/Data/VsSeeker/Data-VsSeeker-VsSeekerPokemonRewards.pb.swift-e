// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/VsSeeker/VsSeekerPokemonRewards.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var availablePokemon: [POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock] = []

  public var rewardTrack: POGOProtos_Data_VsSeeker_VsSeekerRewardTrack = .free

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct OverrideIvRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var overrideType: OneOf_OverrideType? {
      get {return _storage._overrideType}
      set {_uniqueStorage()._overrideType = newValue}
    }

    public var range: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range {
      get {
        if case .range(let v)? = _storage._overrideType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range()
      }
      set {_uniqueStorage()._overrideType = .range(newValue)}
    }

    public var zero: Bool {
      get {
        if case .zero(let v)? = _storage._overrideType {return v}
        return false
      }
      set {_uniqueStorage()._overrideType = .zero(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_OverrideType: Equatable {
      case range(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range)
      case zero(Bool)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType) -> Bool {
        switch (lhs, rhs) {
        case (.range(let l), .range(let r)): return l == r
        case (.zero(let l), .zero(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public struct Range {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var min: Int64 = 0

      public var max: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct PokemonUnlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rewardType: OneOf_RewardType? {
      get {return _storage._rewardType}
      set {_uniqueStorage()._rewardType = newValue}
    }

    public var pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward {
      get {
        if case .pokemon(let v)? = _storage._rewardType {return v}
        return POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward()
      }
      set {_uniqueStorage()._rewardType = .pokemon(newValue)}
    }

    public var limitedPokemonReward: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward {
      get {
        if case .limitedPokemonReward(let v)? = _storage._rewardType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward()
      }
      set {_uniqueStorage()._rewardType = .limitedPokemonReward(newValue)}
    }

    public var guaranteedLimitedPokemonReward: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward {
      get {
        if case .guaranteedLimitedPokemonReward(let v)? = _storage._rewardType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward()
      }
      set {_uniqueStorage()._rewardType = .guaranteedLimitedPokemonReward(newValue)}
    }

    public var unlockedAtRank: Int32 {
      get {return _storage._unlockedAtRank}
      set {_uniqueStorage()._unlockedAtRank = newValue}
    }

    public var weight: Float {
      get {return _storage._weight}
      set {_uniqueStorage()._weight = newValue}
    }

    public var attackIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _storage._attackIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_uniqueStorage()._attackIvOverride = newValue}
    }
    /// Returns true if `attackIvOverride` has been explicitly set.
    public var hasAttackIvOverride: Bool {return _storage._attackIvOverride != nil}
    /// Clears the value of `attackIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearAttackIvOverride() {_uniqueStorage()._attackIvOverride = nil}

    public var defenseIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _storage._defenseIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_uniqueStorage()._defenseIvOverride = newValue}
    }
    /// Returns true if `defenseIvOverride` has been explicitly set.
    public var hasDefenseIvOverride: Bool {return _storage._defenseIvOverride != nil}
    /// Clears the value of `defenseIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearDefenseIvOverride() {_uniqueStorage()._defenseIvOverride = nil}

    public var staminaIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _storage._staminaIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_uniqueStorage()._staminaIvOverride = newValue}
    }
    /// Returns true if `staminaIvOverride` has been explicitly set.
    public var hasStaminaIvOverride: Bool {return _storage._staminaIvOverride != nil}
    /// Clears the value of `staminaIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearStaminaIvOverride() {_uniqueStorage()._staminaIvOverride = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_RewardType: Equatable {
      case pokemon(POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward)
      case limitedPokemonReward(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward)
      case guaranteedLimitedPokemonReward(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType) -> Bool {
        switch (lhs, rhs) {
        case (.pokemon(let l), .pokemon(let r)): return l == r
        case (.limitedPokemonReward(let l), .limitedPokemonReward(let r)): return l == r
        case (.guaranteedLimitedPokemonReward(let l), .guaranteedLimitedPokemonReward(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public struct LimitedEditionPokemonEncounterReward {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward {
        get {return _storage._pokemon ?? POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward()}
        set {_uniqueStorage()._pokemon = newValue}
      }
      /// Returns true if `pokemon` has been explicitly set.
      public var hasPokemon: Bool {return _storage._pokemon != nil}
      /// Clears the value of `pokemon`. Subsequent reads from it will return its default value.
      public mutating func clearPokemon() {_uniqueStorage()._pokemon = nil}

      public var identifier: String {
        get {return _storage._identifier}
        set {_uniqueStorage()._identifier = newValue}
      }

      public var limit: OneOf_Limit? {
        get {return _storage._limit}
        set {_uniqueStorage()._limit = newValue}
      }

      public var lifetimeMaxCount: Int32 {
        get {
          if case .lifetimeMaxCount(let v)? = _storage._limit {return v}
          return 0
        }
        set {_uniqueStorage()._limit = .lifetimeMaxCount(newValue)}
      }

      public var perCompetitiveCombatSeasonMaxCount: Int32 {
        get {
          if case .perCompetitiveCombatSeasonMaxCount(let v)? = _storage._limit {return v}
          return 0
        }
        set {_uniqueStorage()._limit = .perCompetitiveCombatSeasonMaxCount(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Limit: Equatable {
        case lifetimeMaxCount(Int32)
        case perCompetitiveCombatSeasonMaxCount(Int32)

      #if !swift(>=4.1)
        public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit) -> Bool {
          switch (lhs, rhs) {
          case (.lifetimeMaxCount(let l), .lifetimeMaxCount(let r)): return l == r
          case (.perCompetitiveCombatSeasonMaxCount(let l), .perCompetitiveCombatSeasonMaxCount(let r)): return l == r
          default: return false
          }
        }
      #endif
      }

      public init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.VsSeeker"

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VsSeekerPokemonRewards"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "available_pokemon"),
    2: .standard(proto: "reward_track"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.availablePokemon)
      case 2: try decoder.decodeSingularEnumField(value: &self.rewardTrack)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.availablePokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availablePokemon, fieldNumber: 1)
    }
    if self.rewardTrack != .free {
      try visitor.visitSingularEnumField(value: self.rewardTrack, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards) -> Bool {
    if lhs.availablePokemon != rhs.availablePokemon {return false}
    if lhs.rewardTrack != rhs.rewardTrack {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.protoMessageName + ".OverrideIvRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "range"),
    2: .same(proto: "zero"),
  ]

  fileprivate class _StorageClass {
    var _overrideType: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _overrideType = source._overrideType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range?
          if let current = _storage._overrideType {
            try decoder.handleConflictingOneOf()
            if case .range(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._overrideType = .range(v)}
        case 2:
          if _storage._overrideType != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._overrideType = .zero(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._overrideType {
      case .range(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .zero(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._overrideType != rhs_storage._overrideType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.protoMessageName + ".Range"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.min)
      case 2: try decoder.decodeSingularInt64Field(value: &self.max)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularInt64Field(value: self.min, fieldNumber: 1)
    }
    if self.max != 0 {
      try visitor.visitSingularInt64Field(value: self.max, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.protoMessageName + ".PokemonUnlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .standard(proto: "limited_pokemon_reward"),
    3: .standard(proto: "guaranteed_limited_pokemon_reward"),
    4: .standard(proto: "unlocked_at_rank"),
    5: .same(proto: "weight"),
    6: .standard(proto: "attack_iv_override"),
    7: .standard(proto: "defense_iv_override"),
    8: .standard(proto: "stamina_iv_override"),
  ]

  fileprivate class _StorageClass {
    var _rewardType: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType?
    var _unlockedAtRank: Int32 = 0
    var _weight: Float = 0
    var _attackIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil
    var _defenseIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil
    var _staminaIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rewardType = source._rewardType
      _unlockedAtRank = source._unlockedAtRank
      _weight = source._weight
      _attackIvOverride = source._attackIvOverride
      _defenseIvOverride = source._defenseIvOverride
      _staminaIvOverride = source._staminaIvOverride
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward?
          if let current = _storage._rewardType {
            try decoder.handleConflictingOneOf()
            if case .pokemon(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._rewardType = .pokemon(v)}
        case 2:
          var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward?
          if let current = _storage._rewardType {
            try decoder.handleConflictingOneOf()
            if case .limitedPokemonReward(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._rewardType = .limitedPokemonReward(v)}
        case 3:
          var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward?
          if let current = _storage._rewardType {
            try decoder.handleConflictingOneOf()
            if case .guaranteedLimitedPokemonReward(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._rewardType = .guaranteedLimitedPokemonReward(v)}
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._unlockedAtRank)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._weight)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._attackIvOverride)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._defenseIvOverride)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._staminaIvOverride)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._rewardType {
      case .pokemon(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .limitedPokemonReward(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .guaranteedLimitedPokemonReward(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
      if _storage._unlockedAtRank != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unlockedAtRank, fieldNumber: 4)
      }
      if _storage._weight != 0 {
        try visitor.visitSingularFloatField(value: _storage._weight, fieldNumber: 5)
      }
      if let v = _storage._attackIvOverride {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._defenseIvOverride {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._staminaIvOverride {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rewardType != rhs_storage._rewardType {return false}
        if _storage._unlockedAtRank != rhs_storage._unlockedAtRank {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._attackIvOverride != rhs_storage._attackIvOverride {return false}
        if _storage._defenseIvOverride != rhs_storage._defenseIvOverride {return false}
        if _storage._staminaIvOverride != rhs_storage._staminaIvOverride {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.protoMessageName + ".LimitedEditionPokemonEncounterReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .same(proto: "identifier"),
    3: .standard(proto: "lifetime_max_count"),
    4: .standard(proto: "per_competitive_combat_season_max_count"),
  ]

  fileprivate class _StorageClass {
    var _pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward? = nil
    var _identifier: String = String()
    var _limit: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pokemon = source._pokemon
      _identifier = source._identifier
      _limit = source._limit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pokemon)
        case 2: try decoder.decodeSingularStringField(value: &_storage._identifier)
        case 3:
          if _storage._limit != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._limit = .lifetimeMaxCount(v)}
        case 4:
          if _storage._limit != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._limit = .perCompetitiveCombatSeasonMaxCount(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._identifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identifier, fieldNumber: 2)
      }
      switch _storage._limit {
      case .lifetimeMaxCount(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      case .perCompetitiveCombatSeasonMaxCount(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pokemon != rhs_storage._pokemon {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._limit != rhs_storage._limit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
