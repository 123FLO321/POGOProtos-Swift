// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/VsSeeker/VsSeekerLoot.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_VsSeeker_VsSeekerLoot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rankLevel: Int32 = 0

  public var reward: [POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward] = []

  public var rewardTrack: POGOProtos_Data_VsSeeker_VsSeekerRewardTrack = .free

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Reward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rewardType: OneOf_RewardType? {
      get {return _storage._rewardType}
      set {_uniqueStorage()._rewardType = newValue}
    }

    public var item: POGOProtos_Inventory_LootItem {
      get {
        if case .item(let v)? = _storage._rewardType {return v}
        return POGOProtos_Inventory_LootItem()
      }
      set {_uniqueStorage()._rewardType = .item(newValue)}
    }

    public var pokemonReward: Bool {
      get {
        if case .pokemonReward(let v)? = _storage._rewardType {return v}
        return false
      }
      set {_uniqueStorage()._rewardType = .pokemonReward(newValue)}
    }

    public var itemLootTable: Bool {
      get {
        if case .itemLootTable(let v)? = _storage._rewardType {return v}
        return false
      }
      set {_uniqueStorage()._rewardType = .itemLootTable(newValue)}
    }

    public var itemLootTableCount: Int32 {
      get {
        if case .itemLootTableCount(let v)? = _storage._rewardType {return v}
        return 0
      }
      set {_uniqueStorage()._rewardType = .itemLootTableCount(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_RewardType: Equatable {
      case item(POGOProtos_Inventory_LootItem)
      case pokemonReward(Bool)
      case itemLootTable(Bool)
      case itemLootTableCount(Int32)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType) -> Bool {
        switch (lhs, rhs) {
        case (.item(let l), .item(let r)): return l == r
        case (.pokemonReward(let l), .pokemonReward(let r)): return l == r
        case (.itemLootTable(let l), .itemLootTable(let r)): return l == r
        case (.itemLootTableCount(let l), .itemLootTableCount(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.VsSeeker"

extension POGOProtos_Data_VsSeeker_VsSeekerLoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VsSeekerLoot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rank_level"),
    2: .same(proto: "reward"),
    3: .standard(proto: "reward_track"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.rankLevel)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.reward)
      case 3: try decoder.decodeSingularEnumField(value: &self.rewardTrack)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rankLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.rankLevel, fieldNumber: 1)
    }
    if !self.reward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reward, fieldNumber: 2)
    }
    if self.rewardTrack != .free {
      try visitor.visitSingularEnumField(value: self.rewardTrack, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot) -> Bool {
    if lhs.rankLevel != rhs.rankLevel {return false}
    if lhs.reward != rhs.reward {return false}
    if lhs.rewardTrack != rhs.rewardTrack {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerLoot.protoMessageName + ".Reward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .standard(proto: "pokemon_reward"),
    3: .standard(proto: "item_loot_table"),
    4: .standard(proto: "item_loot_table_count"),
  ]

  fileprivate class _StorageClass {
    var _rewardType: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward.OneOf_RewardType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rewardType = source._rewardType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: POGOProtos_Inventory_LootItem?
          if let current = _storage._rewardType {
            try decoder.handleConflictingOneOf()
            if case .item(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._rewardType = .item(v)}
        case 2:
          if _storage._rewardType != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._rewardType = .pokemonReward(v)}
        case 3:
          if _storage._rewardType != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._rewardType = .itemLootTable(v)}
        case 4:
          if _storage._rewardType != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._rewardType = .itemLootTableCount(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._rewardType {
      case .item(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .pokemonReward(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      case .itemLootTable(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      case .itemLootTableCount(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward, rhs: POGOProtos_Data_VsSeeker_VsSeekerLoot.Reward) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rewardType != rhs_storage._rewardType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
