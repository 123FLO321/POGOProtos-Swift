// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/VsSeeker/VsSeekerPokemonRewards.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var availablePokemon: [POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock] = []

  public var rewardTrack: POGOProtos_Data_VsSeeker_VsSeekerRewardTrack = .free

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct OverrideIvRange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var overrideType: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType? = nil

    public var range: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range {
      get {
        if case .range(let v)? = overrideType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range()
      }
      set {overrideType = .range(newValue)}
    }

    public var zero: Bool {
      get {
        if case .zero(let v)? = overrideType {return v}
        return false
      }
      set {overrideType = .zero(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_OverrideType: Equatable {
      case range(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range)
      case zero(Bool)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.OneOf_OverrideType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.range, .range): return {
          guard case .range(let l) = lhs, case .range(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.zero, .zero): return {
          guard case .zero(let l) = lhs, case .zero(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct Range {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var min: Int64 = 0

      public var max: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct PokemonUnlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rewardType: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType? = nil

    public var pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward {
      get {
        if case .pokemon(let v)? = rewardType {return v}
        return POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward()
      }
      set {rewardType = .pokemon(newValue)}
    }

    public var limitedPokemonReward: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward {
      get {
        if case .limitedPokemonReward(let v)? = rewardType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward()
      }
      set {rewardType = .limitedPokemonReward(newValue)}
    }

    public var guaranteedLimitedPokemonReward: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward {
      get {
        if case .guaranteedLimitedPokemonReward(let v)? = rewardType {return v}
        return POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward()
      }
      set {rewardType = .guaranteedLimitedPokemonReward(newValue)}
    }

    public var unlockedAtRank: Int32 = 0

    public var weight: Float = 0

    public var attackIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _attackIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_attackIvOverride = newValue}
    }
    /// Returns true if `attackIvOverride` has been explicitly set.
    public var hasAttackIvOverride: Bool {return self._attackIvOverride != nil}
    /// Clears the value of `attackIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearAttackIvOverride() {self._attackIvOverride = nil}

    public var defenseIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _defenseIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_defenseIvOverride = newValue}
    }
    /// Returns true if `defenseIvOverride` has been explicitly set.
    public var hasDefenseIvOverride: Bool {return self._defenseIvOverride != nil}
    /// Clears the value of `defenseIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearDefenseIvOverride() {self._defenseIvOverride = nil}

    public var staminaIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange {
      get {return _staminaIvOverride ?? POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange()}
      set {_staminaIvOverride = newValue}
    }
    /// Returns true if `staminaIvOverride` has been explicitly set.
    public var hasStaminaIvOverride: Bool {return self._staminaIvOverride != nil}
    /// Clears the value of `staminaIvOverride`. Subsequent reads from it will return its default value.
    public mutating func clearStaminaIvOverride() {self._staminaIvOverride = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_RewardType: Equatable {
      case pokemon(POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward)
      case limitedPokemonReward(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward)
      case guaranteedLimitedPokemonReward(POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.OneOf_RewardType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.pokemon, .pokemon): return {
          guard case .pokemon(let l) = lhs, case .pokemon(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.limitedPokemonReward, .limitedPokemonReward): return {
          guard case .limitedPokemonReward(let l) = lhs, case .limitedPokemonReward(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.guaranteedLimitedPokemonReward, .guaranteedLimitedPokemonReward): return {
          guard case .guaranteedLimitedPokemonReward(let l) = lhs, case .guaranteedLimitedPokemonReward(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct LimitedEditionPokemonEncounterReward {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward {
        get {return _pokemon ?? POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward()}
        set {_pokemon = newValue}
      }
      /// Returns true if `pokemon` has been explicitly set.
      public var hasPokemon: Bool {return self._pokemon != nil}
      /// Clears the value of `pokemon`. Subsequent reads from it will return its default value.
      public mutating func clearPokemon() {self._pokemon = nil}

      public var identifier: String = String()

      public var limit: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit? = nil

      public var lifetimeMaxCount: Int32 {
        get {
          if case .lifetimeMaxCount(let v)? = limit {return v}
          return 0
        }
        set {limit = .lifetimeMaxCount(newValue)}
      }

      public var perCompetitiveCombatSeasonMaxCount: Int32 {
        get {
          if case .perCompetitiveCombatSeasonMaxCount(let v)? = limit {return v}
          return 0
        }
        set {limit = .perCompetitiveCombatSeasonMaxCount(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Limit: Equatable {
        case lifetimeMaxCount(Int32)
        case perCompetitiveCombatSeasonMaxCount(Int32)

      #if !swift(>=4.1)
        public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward.OneOf_Limit) -> Bool {
          // The use of inline closures is to circumvent an issue where the compiler
          // allocates stack space for every case branch when no optimizations are
          // enabled. https://github.com/apple/swift-protobuf/issues/1034
          switch (lhs, rhs) {
          case (.lifetimeMaxCount, .lifetimeMaxCount): return {
            guard case .lifetimeMaxCount(let l) = lhs, case .lifetimeMaxCount(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.perCompetitiveCombatSeasonMaxCount, .perCompetitiveCombatSeasonMaxCount): return {
            guard case .perCompetitiveCombatSeasonMaxCount(let l) = lhs, case .perCompetitiveCombatSeasonMaxCount(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          default: return false
          }
        }
      #endif
      }

      public init() {}

      fileprivate var _pokemon: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward? = nil
    }

    public init() {}

    fileprivate var _attackIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil
    fileprivate var _defenseIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil
    fileprivate var _staminaIvOverride: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange? = nil
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.VsSeeker"

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VsSeekerPokemonRewards"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "available_pokemon"),
    2: .standard(proto: "reward_track"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.availablePokemon) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.rewardTrack) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.availablePokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availablePokemon, fieldNumber: 1)
    }
    if self.rewardTrack != .free {
      try visitor.visitSingularEnumField(value: self.rewardTrack, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards) -> Bool {
    if lhs.availablePokemon != rhs.availablePokemon {return false}
    if lhs.rewardTrack != rhs.rewardTrack {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.protoMessageName + ".OverrideIvRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "range"),
    2: .same(proto: "zero"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range?
        if let current = self.overrideType {
          try decoder.handleConflictingOneOf()
          if case .range(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.overrideType = .range(v)}
      }()
      case 2: try {
        if self.overrideType != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.overrideType = .zero(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.overrideType {
    case .range?: try {
      guard case .range(let v)? = self.overrideType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .zero?: try {
      guard case .zero(let v)? = self.overrideType else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange) -> Bool {
    if lhs.overrideType != rhs.overrideType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.protoMessageName + ".Range"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.min) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.max) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularInt64Field(value: self.min, fieldNumber: 1)
    }
    if self.max != 0 {
      try visitor.visitSingularInt64Field(value: self.max, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.OverrideIvRange.Range) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.protoMessageName + ".PokemonUnlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .standard(proto: "limited_pokemon_reward"),
    3: .standard(proto: "guaranteed_limited_pokemon_reward"),
    4: .standard(proto: "unlocked_at_rank"),
    5: .same(proto: "weight"),
    6: .standard(proto: "attack_iv_override"),
    7: .standard(proto: "defense_iv_override"),
    8: .standard(proto: "stamina_iv_override"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_Quests_QuestReward.PokemonEncounterReward?
        if let current = self.rewardType {
          try decoder.handleConflictingOneOf()
          if case .pokemon(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.rewardType = .pokemon(v)}
      }()
      case 2: try {
        var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward?
        if let current = self.rewardType {
          try decoder.handleConflictingOneOf()
          if case .limitedPokemonReward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.rewardType = .limitedPokemonReward(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward?
        if let current = self.rewardType {
          try decoder.handleConflictingOneOf()
          if case .guaranteedLimitedPokemonReward(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.rewardType = .guaranteedLimitedPokemonReward(v)}
      }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.unlockedAtRank) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.weight) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._attackIvOverride) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._defenseIvOverride) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._staminaIvOverride) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.rewardType {
    case .pokemon?: try {
      guard case .pokemon(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .limitedPokemonReward?: try {
      guard case .limitedPokemonReward(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .guaranteedLimitedPokemonReward?: try {
      guard case .guaranteedLimitedPokemonReward(let v)? = self.rewardType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if self.unlockedAtRank != 0 {
      try visitor.visitSingularInt32Field(value: self.unlockedAtRank, fieldNumber: 4)
    }
    if self.weight != 0 {
      try visitor.visitSingularFloatField(value: self.weight, fieldNumber: 5)
    }
    if let v = self._attackIvOverride {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._defenseIvOverride {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._staminaIvOverride {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock) -> Bool {
    if lhs.rewardType != rhs.rewardType {return false}
    if lhs.unlockedAtRank != rhs.unlockedAtRank {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs._attackIvOverride != rhs._attackIvOverride {return false}
    if lhs._defenseIvOverride != rhs._defenseIvOverride {return false}
    if lhs._staminaIvOverride != rhs._staminaIvOverride {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.protoMessageName + ".LimitedEditionPokemonEncounterReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .same(proto: "identifier"),
    3: .standard(proto: "lifetime_max_count"),
    4: .standard(proto: "per_competitive_combat_season_max_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pokemon) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 3: try {
        if self.limit != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.limit = .lifetimeMaxCount(v)}
      }()
      case 4: try {
        if self.limit != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.limit = .perCompetitiveCombatSeasonMaxCount(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.limit {
    case .lifetimeMaxCount?: try {
      guard case .lifetimeMaxCount(let v)? = self.limit else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }()
    case .perCompetitiveCombatSeasonMaxCount?: try {
      guard case .perCompetitiveCombatSeasonMaxCount(let v)? = self.limit else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward, rhs: POGOProtos_Data_VsSeeker_VsSeekerPokemonRewards.PokemonUnlock.LimitedEditionPokemonEncounterReward) -> Bool {
    if lhs._pokemon != rhs._pokemon {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
