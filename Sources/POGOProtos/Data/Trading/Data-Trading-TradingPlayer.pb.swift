// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Trading/TradingPlayer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Trading_TradingPlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: String = String()

  public var publicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _publicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_publicProfile = newValue}
  }
  /// Returns true if `publicProfile` has been explicitly set.
  public var hasPublicProfile: Bool {return self._publicProfile != nil}
  /// Clears the value of `publicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearPublicProfile() {self._publicProfile = nil}

  public var excludedPokemon: [POGOProtos_Data_Trading_ExcludedPokemon] = []

  public var tradingPokemon: POGOProtos_Data_Trading_TradingPokemon {
    get {return _tradingPokemon ?? POGOProtos_Data_Trading_TradingPokemon()}
    set {_tradingPokemon = newValue}
  }
  /// Returns true if `tradingPokemon` has been explicitly set.
  public var hasTradingPokemon: Bool {return self._tradingPokemon != nil}
  /// Clears the value of `tradingPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearTradingPokemon() {self._tradingPokemon = nil}

  public var bonus: POGOProtos_Inventory_Loot {
    get {return _bonus ?? POGOProtos_Inventory_Loot()}
    set {_bonus = newValue}
  }
  /// Returns true if `bonus` has been explicitly set.
  public var hasBonus: Bool {return self._bonus != nil}
  /// Clears the value of `bonus`. Subsequent reads from it will return its default value.
  public mutating func clearBonus() {self._bonus = nil}

  public var price: POGOProtos_Inventory_Loot {
    get {return _price ?? POGOProtos_Inventory_Loot()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {self._price = nil}

  public var canAffordTrading: Bool = false

  public var hasConfirmed_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _publicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
  fileprivate var _tradingPokemon: POGOProtos_Data_Trading_TradingPokemon? = nil
  fileprivate var _bonus: POGOProtos_Inventory_Loot? = nil
  fileprivate var _price: POGOProtos_Inventory_Loot? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Trading"

extension POGOProtos_Data_Trading_TradingPlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingPlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "public_profile"),
    3: .standard(proto: "excluded_pokemon"),
    4: .standard(proto: "trading_pokemon"),
    5: .same(proto: "bonus"),
    6: .same(proto: "price"),
    7: .standard(proto: "can_afford_trading"),
    8: .standard(proto: "has_confirmed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.playerID)
      case 2: try decoder.decodeSingularMessageField(value: &self._publicProfile)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.excludedPokemon)
      case 4: try decoder.decodeSingularMessageField(value: &self._tradingPokemon)
      case 5: try decoder.decodeSingularMessageField(value: &self._bonus)
      case 6: try decoder.decodeSingularMessageField(value: &self._price)
      case 7: try decoder.decodeSingularBoolField(value: &self.canAffordTrading)
      case 8: try decoder.decodeSingularBoolField(value: &self.hasConfirmed_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerID.isEmpty {
      try visitor.visitSingularStringField(value: self.playerID, fieldNumber: 1)
    }
    if let v = self._publicProfile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.excludedPokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.excludedPokemon, fieldNumber: 3)
    }
    if let v = self._tradingPokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._bonus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._price {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.canAffordTrading != false {
      try visitor.visitSingularBoolField(value: self.canAffordTrading, fieldNumber: 7)
    }
    if self.hasConfirmed_p != false {
      try visitor.visitSingularBoolField(value: self.hasConfirmed_p, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Trading_TradingPlayer, rhs: POGOProtos_Data_Trading_TradingPlayer) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs._publicProfile != rhs._publicProfile {return false}
    if lhs.excludedPokemon != rhs.excludedPokemon {return false}
    if lhs._tradingPokemon != rhs._tradingPokemon {return false}
    if lhs._bonus != rhs._bonus {return false}
    if lhs._price != rhs._price {return false}
    if lhs.canAffordTrading != rhs.canAffordTrading {return false}
    if lhs.hasConfirmed_p != rhs.hasConfirmed_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
