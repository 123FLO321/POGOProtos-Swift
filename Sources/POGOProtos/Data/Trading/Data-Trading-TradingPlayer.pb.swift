// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Trading/TradingPlayer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Trading_TradingPlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: String {
    get {return _storage._playerID}
    set {_uniqueStorage()._playerID = newValue}
  }

  public var publicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _storage._publicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_uniqueStorage()._publicProfile = newValue}
  }
  /// Returns true if `publicProfile` has been explicitly set.
  public var hasPublicProfile: Bool {return _storage._publicProfile != nil}
  /// Clears the value of `publicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearPublicProfile() {_uniqueStorage()._publicProfile = nil}

  public var excludedPokemon: [POGOProtos_Data_Trading_ExcludedPokemon] {
    get {return _storage._excludedPokemon}
    set {_uniqueStorage()._excludedPokemon = newValue}
  }

  public var tradingPokemon: POGOProtos_Data_Trading_TradingPokemon {
    get {return _storage._tradingPokemon ?? POGOProtos_Data_Trading_TradingPokemon()}
    set {_uniqueStorage()._tradingPokemon = newValue}
  }
  /// Returns true if `tradingPokemon` has been explicitly set.
  public var hasTradingPokemon: Bool {return _storage._tradingPokemon != nil}
  /// Clears the value of `tradingPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearTradingPokemon() {_uniqueStorage()._tradingPokemon = nil}

  public var bonus: POGOProtos_Inventory_Loot {
    get {return _storage._bonus ?? POGOProtos_Inventory_Loot()}
    set {_uniqueStorage()._bonus = newValue}
  }
  /// Returns true if `bonus` has been explicitly set.
  public var hasBonus: Bool {return _storage._bonus != nil}
  /// Clears the value of `bonus`. Subsequent reads from it will return its default value.
  public mutating func clearBonus() {_uniqueStorage()._bonus = nil}

  public var price: POGOProtos_Inventory_Loot {
    get {return _storage._price ?? POGOProtos_Inventory_Loot()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  public var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  public mutating func clearPrice() {_uniqueStorage()._price = nil}

  public var canAffordTrading: Bool {
    get {return _storage._canAffordTrading}
    set {_uniqueStorage()._canAffordTrading = newValue}
  }

  public var hasConfirmed_p: Bool {
    get {return _storage._hasConfirmed_p}
    set {_uniqueStorage()._hasConfirmed_p = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Trading"

extension POGOProtos_Data_Trading_TradingPlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TradingPlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "public_profile"),
    3: .standard(proto: "excluded_pokemon"),
    4: .standard(proto: "trading_pokemon"),
    5: .same(proto: "bonus"),
    6: .same(proto: "price"),
    7: .standard(proto: "can_afford_trading"),
    8: .standard(proto: "has_confirmed"),
  ]

  fileprivate class _StorageClass {
    var _playerID: String = String()
    var _publicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
    var _excludedPokemon: [POGOProtos_Data_Trading_ExcludedPokemon] = []
    var _tradingPokemon: POGOProtos_Data_Trading_TradingPokemon? = nil
    var _bonus: POGOProtos_Inventory_Loot? = nil
    var _price: POGOProtos_Inventory_Loot? = nil
    var _canAffordTrading: Bool = false
    var _hasConfirmed_p: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _playerID = source._playerID
      _publicProfile = source._publicProfile
      _excludedPokemon = source._excludedPokemon
      _tradingPokemon = source._tradingPokemon
      _bonus = source._bonus
      _price = source._price
      _canAffordTrading = source._canAffordTrading
      _hasConfirmed_p = source._hasConfirmed_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._playerID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._publicProfile) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._excludedPokemon) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._tradingPokemon) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._bonus) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._price) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._canAffordTrading) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._hasConfirmed_p) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._playerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playerID, fieldNumber: 1)
      }
      if let v = _storage._publicProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._excludedPokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._excludedPokemon, fieldNumber: 3)
      }
      if let v = _storage._tradingPokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._bonus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._canAffordTrading != false {
        try visitor.visitSingularBoolField(value: _storage._canAffordTrading, fieldNumber: 7)
      }
      if _storage._hasConfirmed_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasConfirmed_p, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Trading_TradingPlayer, rhs: POGOProtos_Data_Trading_TradingPlayer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._playerID != rhs_storage._playerID {return false}
        if _storage._publicProfile != rhs_storage._publicProfile {return false}
        if _storage._excludedPokemon != rhs_storage._excludedPokemon {return false}
        if _storage._tradingPokemon != rhs_storage._tradingPokemon {return false}
        if _storage._bonus != rhs_storage._bonus {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._canAffordTrading != rhs_storage._canAffordTrading {return false}
        if _storage._hasConfirmed_p != rhs_storage._hasConfirmed_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
