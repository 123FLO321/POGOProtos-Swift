// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Trading/Trading.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Trading_Trading {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: POGOProtos_Data_Trading_Trading.TradingState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var expirationMs: UInt64 {
    get {return _storage._expirationMs}
    set {_uniqueStorage()._expirationMs = newValue}
  }

  public var player: POGOProtos_Data_Trading_TradingPlayer {
    get {return _storage._player ?? POGOProtos_Data_Trading_TradingPlayer()}
    set {_uniqueStorage()._player = newValue}
  }
  /// Returns true if `player` has been explicitly set.
  public var hasPlayer: Bool {return _storage._player != nil}
  /// Clears the value of `player`. Subsequent reads from it will return its default value.
  public mutating func clearPlayer() {_uniqueStorage()._player = nil}

  public var friend: POGOProtos_Data_Trading_TradingPlayer {
    get {return _storage._friend ?? POGOProtos_Data_Trading_TradingPlayer()}
    set {_uniqueStorage()._friend = newValue}
  }
  /// Returns true if `friend` has been explicitly set.
  public var hasFriend: Bool {return _storage._friend != nil}
  /// Clears the value of `friend`. Subsequent reads from it will return its default value.
  public mutating func clearFriend() {_uniqueStorage()._friend = nil}

  public var tradingS2CellID: Int64 {
    get {return _storage._tradingS2CellID}
    set {_uniqueStorage()._tradingS2CellID = newValue}
  }

  public var transactionLog: String {
    get {return _storage._transactionLog}
    set {_uniqueStorage()._transactionLog = newValue}
  }

  public var friendshipLevelData: POGOProtos_Data_Friends_FriendshipLevelData {
    get {return _storage._friendshipLevelData ?? POGOProtos_Data_Friends_FriendshipLevelData()}
    set {_uniqueStorage()._friendshipLevelData = newValue}
  }
  /// Returns true if `friendshipLevelData` has been explicitly set.
  public var hasFriendshipLevelData: Bool {return _storage._friendshipLevelData != nil}
  /// Clears the value of `friendshipLevelData`. Subsequent reads from it will return its default value.
  public mutating func clearFriendshipLevelData() {_uniqueStorage()._friendshipLevelData = nil}

  public var isSpecialTrading: Bool {
    get {return _storage._isSpecialTrading}
    set {_uniqueStorage()._isSpecialTrading = newValue}
  }

  public var preTradingFriendshipLevel: POGOProtos_Data_Friends_FriendshipLevelData {
    get {return _storage._preTradingFriendshipLevel ?? POGOProtos_Data_Friends_FriendshipLevelData()}
    set {_uniqueStorage()._preTradingFriendshipLevel = newValue}
  }
  /// Returns true if `preTradingFriendshipLevel` has been explicitly set.
  public var hasPreTradingFriendshipLevel: Bool {return _storage._preTradingFriendshipLevel != nil}
  /// Clears the value of `preTradingFriendshipLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPreTradingFriendshipLevel() {_uniqueStorage()._preTradingFriendshipLevel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TradingState: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case primordial // = 1
    case wait // = 2
    case active // = 3
    case confirmed // = 4
    case finished // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .primordial
      case 2: self = .wait
      case 3: self = .active
      case 4: self = .confirmed
      case 5: self = .finished
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .primordial: return 1
      case .wait: return 2
      case .active: return 3
      case .confirmed: return 4
      case .finished: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Data_Trading_Trading.TradingState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Trading_Trading.TradingState] = [
    .unset,
    .primordial,
    .wait,
    .active,
    .confirmed,
    .finished,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Trading"

extension POGOProtos_Data_Trading_Trading: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Trading"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "expiration_ms"),
    3: .same(proto: "player"),
    4: .same(proto: "friend"),
    5: .standard(proto: "trading_s2_cell_id"),
    6: .standard(proto: "transaction_log"),
    7: .standard(proto: "friendship_level_data"),
    8: .standard(proto: "is_special_trading"),
    9: .standard(proto: "pre_trading_friendship_level"),
  ]

  fileprivate class _StorageClass {
    var _state: POGOProtos_Data_Trading_Trading.TradingState = .unset
    var _expirationMs: UInt64 = 0
    var _player: POGOProtos_Data_Trading_TradingPlayer? = nil
    var _friend: POGOProtos_Data_Trading_TradingPlayer? = nil
    var _tradingS2CellID: Int64 = 0
    var _transactionLog: String = String()
    var _friendshipLevelData: POGOProtos_Data_Friends_FriendshipLevelData? = nil
    var _isSpecialTrading: Bool = false
    var _preTradingFriendshipLevel: POGOProtos_Data_Friends_FriendshipLevelData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _expirationMs = source._expirationMs
      _player = source._player
      _friend = source._friend
      _tradingS2CellID = source._tradingS2CellID
      _transactionLog = source._transactionLog
      _friendshipLevelData = source._friendshipLevelData
      _isSpecialTrading = source._isSpecialTrading
      _preTradingFriendshipLevel = source._preTradingFriendshipLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._expirationMs) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._player) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._friend) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._tradingS2CellID) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._transactionLog) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._friendshipLevelData) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isSpecialTrading) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._preTradingFriendshipLevel) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._state != .unset {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 1)
      }
      if _storage._expirationMs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._expirationMs, fieldNumber: 2)
      }
      if let v = _storage._player {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._friend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._tradingS2CellID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._tradingS2CellID, fieldNumber: 5)
      }
      if !_storage._transactionLog.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionLog, fieldNumber: 6)
      }
      if let v = _storage._friendshipLevelData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._isSpecialTrading != false {
        try visitor.visitSingularBoolField(value: _storage._isSpecialTrading, fieldNumber: 8)
      }
      if let v = _storage._preTradingFriendshipLevel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Trading_Trading, rhs: POGOProtos_Data_Trading_Trading) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._expirationMs != rhs_storage._expirationMs {return false}
        if _storage._player != rhs_storage._player {return false}
        if _storage._friend != rhs_storage._friend {return false}
        if _storage._tradingS2CellID != rhs_storage._tradingS2CellID {return false}
        if _storage._transactionLog != rhs_storage._transactionLog {return false}
        if _storage._friendshipLevelData != rhs_storage._friendshipLevelData {return false}
        if _storage._isSpecialTrading != rhs_storage._isSpecialTrading {return false}
        if _storage._preTradingFriendshipLevel != rhs_storage._preTradingFriendshipLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Trading_Trading.TradingState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "PRIMORDIAL"),
    2: .same(proto: "WAIT"),
    3: .same(proto: "ACTIVE"),
    4: .same(proto: "CONFIRMED"),
    5: .same(proto: "FINISHED"),
  ]
}
