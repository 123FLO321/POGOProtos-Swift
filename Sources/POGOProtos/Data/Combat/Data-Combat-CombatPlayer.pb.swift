// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Combat/CombatPlayer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Combat_CombatPlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _storage._publicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_uniqueStorage()._publicProfile = newValue}
  }
  /// Returns true if `publicProfile` has been explicitly set.
  public var hasPublicProfile: Bool {return _storage._publicProfile != nil}
  /// Clears the value of `publicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearPublicProfile() {_uniqueStorage()._publicProfile = nil}

  public var activePokemon: POGOProtos_Data_Combat_CombatPokemon {
    get {return _storage._activePokemon ?? POGOProtos_Data_Combat_CombatPokemon()}
    set {_uniqueStorage()._activePokemon = newValue}
  }
  /// Returns true if `activePokemon` has been explicitly set.
  public var hasActivePokemon: Bool {return _storage._activePokemon != nil}
  /// Clears the value of `activePokemon`. Subsequent reads from it will return its default value.
  public mutating func clearActivePokemon() {_uniqueStorage()._activePokemon = nil}

  public var reservePokemon: [POGOProtos_Data_Combat_CombatPokemon] {
    get {return _storage._reservePokemon}
    set {_uniqueStorage()._reservePokemon = newValue}
  }

  public var faintedPokemon: [POGOProtos_Data_Combat_CombatPokemon] {
    get {return _storage._faintedPokemon}
    set {_uniqueStorage()._faintedPokemon = newValue}
  }

  public var currentAction: POGOProtos_Data_Combat_CombatAction {
    get {return _storage._currentAction ?? POGOProtos_Data_Combat_CombatAction()}
    set {_uniqueStorage()._currentAction = newValue}
  }
  /// Returns true if `currentAction` has been explicitly set.
  public var hasCurrentAction: Bool {return _storage._currentAction != nil}
  /// Clears the value of `currentAction`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentAction() {_uniqueStorage()._currentAction = nil}

  public var lockstepAck: Bool {
    get {return _storage._lockstepAck}
    set {_uniqueStorage()._lockstepAck = newValue}
  }

  public var lastUpdatedTurn: Int32 {
    get {return _storage._lastUpdatedTurn}
    set {_uniqueStorage()._lastUpdatedTurn = newValue}
  }

  public var minigameAction: POGOProtos_Data_Combat_CombatAction {
    get {return _storage._minigameAction ?? POGOProtos_Data_Combat_CombatAction()}
    set {_uniqueStorage()._minigameAction = newValue}
  }
  /// Returns true if `minigameAction` has been explicitly set.
  public var hasMinigameAction: Bool {return _storage._minigameAction != nil}
  /// Clears the value of `minigameAction`. Subsequent reads from it will return its default value.
  public mutating func clearMinigameAction() {_uniqueStorage()._minigameAction = nil}

  public var quickSwapAvailableMs: Int64 {
    get {return _storage._quickSwapAvailableMs}
    set {_uniqueStorage()._quickSwapAvailableMs = newValue}
  }

  public var minigameDefenseChancesLeft: Int32 {
    get {return _storage._minigameDefenseChancesLeft}
    set {_uniqueStorage()._minigameDefenseChancesLeft = newValue}
  }

  public var combatNpcPersonalityID: String {
    get {return _storage._combatNpcPersonalityID}
    set {_uniqueStorage()._combatNpcPersonalityID = newValue}
  }

  public var timesCombatActionsCalled: Int32 {
    get {return _storage._timesCombatActionsCalled}
    set {_uniqueStorage()._timesCombatActionsCalled = newValue}
  }

  public var lobbyJoinTimeMs: Int64 {
    get {return _storage._lobbyJoinTimeMs}
    set {_uniqueStorage()._lobbyJoinTimeMs = newValue}
  }

  public var superEffectiveChargeAttacksUsed: Int32 {
    get {return _storage._superEffectiveChargeAttacksUsed}
    set {_uniqueStorage()._superEffectiveChargeAttacksUsed = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Combat"

extension POGOProtos_Data_Combat_CombatPlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CombatPlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_profile"),
    2: .standard(proto: "active_pokemon"),
    3: .standard(proto: "reserve_pokemon"),
    4: .standard(proto: "fainted_pokemon"),
    5: .standard(proto: "current_action"),
    6: .standard(proto: "lockstep_ack"),
    7: .standard(proto: "last_updated_turn"),
    8: .standard(proto: "minigame_action"),
    9: .standard(proto: "quick_swap_available_ms"),
    10: .standard(proto: "minigame_defense_chances_left"),
    11: .standard(proto: "combat_npc_personality_id"),
    12: .standard(proto: "times_combat_actions_called"),
    13: .standard(proto: "lobby_join_time_ms"),
    14: .standard(proto: "super_effective_charge_attacks_used"),
  ]

  fileprivate class _StorageClass {
    var _publicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
    var _activePokemon: POGOProtos_Data_Combat_CombatPokemon? = nil
    var _reservePokemon: [POGOProtos_Data_Combat_CombatPokemon] = []
    var _faintedPokemon: [POGOProtos_Data_Combat_CombatPokemon] = []
    var _currentAction: POGOProtos_Data_Combat_CombatAction? = nil
    var _lockstepAck: Bool = false
    var _lastUpdatedTurn: Int32 = 0
    var _minigameAction: POGOProtos_Data_Combat_CombatAction? = nil
    var _quickSwapAvailableMs: Int64 = 0
    var _minigameDefenseChancesLeft: Int32 = 0
    var _combatNpcPersonalityID: String = String()
    var _timesCombatActionsCalled: Int32 = 0
    var _lobbyJoinTimeMs: Int64 = 0
    var _superEffectiveChargeAttacksUsed: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _publicProfile = source._publicProfile
      _activePokemon = source._activePokemon
      _reservePokemon = source._reservePokemon
      _faintedPokemon = source._faintedPokemon
      _currentAction = source._currentAction
      _lockstepAck = source._lockstepAck
      _lastUpdatedTurn = source._lastUpdatedTurn
      _minigameAction = source._minigameAction
      _quickSwapAvailableMs = source._quickSwapAvailableMs
      _minigameDefenseChancesLeft = source._minigameDefenseChancesLeft
      _combatNpcPersonalityID = source._combatNpcPersonalityID
      _timesCombatActionsCalled = source._timesCombatActionsCalled
      _lobbyJoinTimeMs = source._lobbyJoinTimeMs
      _superEffectiveChargeAttacksUsed = source._superEffectiveChargeAttacksUsed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._publicProfile) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._activePokemon) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._reservePokemon) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._faintedPokemon) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._currentAction) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._lockstepAck) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._lastUpdatedTurn) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._minigameAction) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._quickSwapAvailableMs) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._minigameDefenseChancesLeft) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._combatNpcPersonalityID) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._timesCombatActionsCalled) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._lobbyJoinTimeMs) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._superEffectiveChargeAttacksUsed) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._publicProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._activePokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._reservePokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reservePokemon, fieldNumber: 3)
      }
      if !_storage._faintedPokemon.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._faintedPokemon, fieldNumber: 4)
      }
      if let v = _storage._currentAction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._lockstepAck != false {
        try visitor.visitSingularBoolField(value: _storage._lockstepAck, fieldNumber: 6)
      }
      if _storage._lastUpdatedTurn != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lastUpdatedTurn, fieldNumber: 7)
      }
      if let v = _storage._minigameAction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._quickSwapAvailableMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._quickSwapAvailableMs, fieldNumber: 9)
      }
      if _storage._minigameDefenseChancesLeft != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minigameDefenseChancesLeft, fieldNumber: 10)
      }
      if !_storage._combatNpcPersonalityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._combatNpcPersonalityID, fieldNumber: 11)
      }
      if _storage._timesCombatActionsCalled != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timesCombatActionsCalled, fieldNumber: 12)
      }
      if _storage._lobbyJoinTimeMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lobbyJoinTimeMs, fieldNumber: 13)
      }
      if _storage._superEffectiveChargeAttacksUsed != 0 {
        try visitor.visitSingularInt32Field(value: _storage._superEffectiveChargeAttacksUsed, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Combat_CombatPlayer, rhs: POGOProtos_Data_Combat_CombatPlayer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._publicProfile != rhs_storage._publicProfile {return false}
        if _storage._activePokemon != rhs_storage._activePokemon {return false}
        if _storage._reservePokemon != rhs_storage._reservePokemon {return false}
        if _storage._faintedPokemon != rhs_storage._faintedPokemon {return false}
        if _storage._currentAction != rhs_storage._currentAction {return false}
        if _storage._lockstepAck != rhs_storage._lockstepAck {return false}
        if _storage._lastUpdatedTurn != rhs_storage._lastUpdatedTurn {return false}
        if _storage._minigameAction != rhs_storage._minigameAction {return false}
        if _storage._quickSwapAvailableMs != rhs_storage._quickSwapAvailableMs {return false}
        if _storage._minigameDefenseChancesLeft != rhs_storage._minigameDefenseChancesLeft {return false}
        if _storage._combatNpcPersonalityID != rhs_storage._combatNpcPersonalityID {return false}
        if _storage._timesCombatActionsCalled != rhs_storage._timesCombatActionsCalled {return false}
        if _storage._lobbyJoinTimeMs != rhs_storage._lobbyJoinTimeMs {return false}
        if _storage._superEffectiveChargeAttacksUsed != rhs_storage._superEffectiveChargeAttacksUsed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
