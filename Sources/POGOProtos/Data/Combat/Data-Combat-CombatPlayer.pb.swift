// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Combat/CombatPlayer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Combat_CombatPlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _publicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_publicProfile = newValue}
  }
  /// Returns true if `publicProfile` has been explicitly set.
  public var hasPublicProfile: Bool {return self._publicProfile != nil}
  /// Clears the value of `publicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearPublicProfile() {self._publicProfile = nil}

  public var activePokemon: POGOProtos_Data_Combat_CombatPokemon {
    get {return _activePokemon ?? POGOProtos_Data_Combat_CombatPokemon()}
    set {_activePokemon = newValue}
  }
  /// Returns true if `activePokemon` has been explicitly set.
  public var hasActivePokemon: Bool {return self._activePokemon != nil}
  /// Clears the value of `activePokemon`. Subsequent reads from it will return its default value.
  public mutating func clearActivePokemon() {self._activePokemon = nil}

  public var reservePokemon: [POGOProtos_Data_Combat_CombatPokemon] = []

  public var faintedPokemon: [POGOProtos_Data_Combat_CombatPokemon] = []

  public var currentAction: POGOProtos_Data_Combat_CombatAction {
    get {return _currentAction ?? POGOProtos_Data_Combat_CombatAction()}
    set {_currentAction = newValue}
  }
  /// Returns true if `currentAction` has been explicitly set.
  public var hasCurrentAction: Bool {return self._currentAction != nil}
  /// Clears the value of `currentAction`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentAction() {self._currentAction = nil}

  public var lockstepAck: Bool = false

  public var lastUpdatedTurn: Int32 = 0

  public var minigameAction: POGOProtos_Data_Combat_CombatAction {
    get {return _minigameAction ?? POGOProtos_Data_Combat_CombatAction()}
    set {_minigameAction = newValue}
  }
  /// Returns true if `minigameAction` has been explicitly set.
  public var hasMinigameAction: Bool {return self._minigameAction != nil}
  /// Clears the value of `minigameAction`. Subsequent reads from it will return its default value.
  public mutating func clearMinigameAction() {self._minigameAction = nil}

  public var quickSwapAvailableMs: Int64 = 0

  public var minigameDefenseChancesLeft: Int32 = 0

  public var combatNpcPersonalityID: String = String()

  public var timesCombatActionsCalled: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _publicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
  fileprivate var _activePokemon: POGOProtos_Data_Combat_CombatPokemon? = nil
  fileprivate var _currentAction: POGOProtos_Data_Combat_CombatAction? = nil
  fileprivate var _minigameAction: POGOProtos_Data_Combat_CombatAction? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Combat"

extension POGOProtos_Data_Combat_CombatPlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CombatPlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_profile"),
    2: .standard(proto: "active_pokemon"),
    3: .standard(proto: "reserve_pokemon"),
    4: .standard(proto: "fainted_pokemon"),
    5: .standard(proto: "current_action"),
    6: .standard(proto: "lockstep_ack"),
    7: .standard(proto: "last_updated_turn"),
    8: .standard(proto: "minigame_action"),
    9: .standard(proto: "quick_swap_available_ms"),
    10: .standard(proto: "minigame_defense_chances_left"),
    11: .standard(proto: "combat_npc_personality_id"),
    12: .standard(proto: "times_combat_actions_called"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._publicProfile)
      case 2: try decoder.decodeSingularMessageField(value: &self._activePokemon)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.reservePokemon)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.faintedPokemon)
      case 5: try decoder.decodeSingularMessageField(value: &self._currentAction)
      case 6: try decoder.decodeSingularBoolField(value: &self.lockstepAck)
      case 7: try decoder.decodeSingularInt32Field(value: &self.lastUpdatedTurn)
      case 8: try decoder.decodeSingularMessageField(value: &self._minigameAction)
      case 9: try decoder.decodeSingularInt64Field(value: &self.quickSwapAvailableMs)
      case 10: try decoder.decodeSingularInt32Field(value: &self.minigameDefenseChancesLeft)
      case 11: try decoder.decodeSingularStringField(value: &self.combatNpcPersonalityID)
      case 12: try decoder.decodeSingularInt32Field(value: &self.timesCombatActionsCalled)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._publicProfile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._activePokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.reservePokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reservePokemon, fieldNumber: 3)
    }
    if !self.faintedPokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.faintedPokemon, fieldNumber: 4)
    }
    if let v = self._currentAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.lockstepAck != false {
      try visitor.visitSingularBoolField(value: self.lockstepAck, fieldNumber: 6)
    }
    if self.lastUpdatedTurn != 0 {
      try visitor.visitSingularInt32Field(value: self.lastUpdatedTurn, fieldNumber: 7)
    }
    if let v = self._minigameAction {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.quickSwapAvailableMs != 0 {
      try visitor.visitSingularInt64Field(value: self.quickSwapAvailableMs, fieldNumber: 9)
    }
    if self.minigameDefenseChancesLeft != 0 {
      try visitor.visitSingularInt32Field(value: self.minigameDefenseChancesLeft, fieldNumber: 10)
    }
    if !self.combatNpcPersonalityID.isEmpty {
      try visitor.visitSingularStringField(value: self.combatNpcPersonalityID, fieldNumber: 11)
    }
    if self.timesCombatActionsCalled != 0 {
      try visitor.visitSingularInt32Field(value: self.timesCombatActionsCalled, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Combat_CombatPlayer, rhs: POGOProtos_Data_Combat_CombatPlayer) -> Bool {
    if lhs._publicProfile != rhs._publicProfile {return false}
    if lhs._activePokemon != rhs._activePokemon {return false}
    if lhs.reservePokemon != rhs.reservePokemon {return false}
    if lhs.faintedPokemon != rhs.faintedPokemon {return false}
    if lhs._currentAction != rhs._currentAction {return false}
    if lhs.lockstepAck != rhs.lockstepAck {return false}
    if lhs.lastUpdatedTurn != rhs.lastUpdatedTurn {return false}
    if lhs._minigameAction != rhs._minigameAction {return false}
    if lhs.quickSwapAvailableMs != rhs.quickSwapAvailableMs {return false}
    if lhs.minigameDefenseChancesLeft != rhs.minigameDefenseChancesLeft {return false}
    if lhs.combatNpcPersonalityID != rhs.combatNpcPersonalityID {return false}
    if lhs.timesCombatActionsCalled != rhs.timesCombatActionsCalled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
