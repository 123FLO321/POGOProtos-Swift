// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Combat/ChallengePlayer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Combat_ChallengePlayer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerID: String {
    get {return _storage._playerID}
    set {_uniqueStorage()._playerID = newValue}
  }

  public var playerAvatar: POGOProtos_Data_Player_PlayerAvatar {
    get {return _storage._playerAvatar ?? POGOProtos_Data_Player_PlayerAvatar()}
    set {_uniqueStorage()._playerAvatar = newValue}
  }
  /// Returns true if `playerAvatar` has been explicitly set.
  public var hasPlayerAvatar: Bool {return _storage._playerAvatar != nil}
  /// Clears the value of `playerAvatar`. Subsequent reads from it will return its default value.
  public mutating func clearPlayerAvatar() {_uniqueStorage()._playerAvatar = nil}

  public var combatPlayerS2CellID: Int64 {
    get {return _storage._combatPlayerS2CellID}
    set {_uniqueStorage()._combatPlayerS2CellID = newValue}
  }

  public var attackingPokemonID: [UInt64] {
    get {return _storage._attackingPokemonID}
    set {_uniqueStorage()._attackingPokemonID = newValue}
  }

  public var publicProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _storage._publicProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_uniqueStorage()._publicProfile = newValue}
  }
  /// Returns true if `publicProfile` has been explicitly set.
  public var hasPublicProfile: Bool {return _storage._publicProfile != nil}
  /// Clears the value of `publicProfile`. Subsequent reads from it will return its default value.
  public mutating func clearPublicProfile() {_uniqueStorage()._publicProfile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Combat"

extension POGOProtos_Data_Combat_ChallengePlayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChallengePlayer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "player_avatar"),
    3: .standard(proto: "combat_player_s2_cell_id"),
    4: .standard(proto: "attacking_pokemon_id"),
    5: .standard(proto: "public_profile"),
  ]

  fileprivate class _StorageClass {
    var _playerID: String = String()
    var _playerAvatar: POGOProtos_Data_Player_PlayerAvatar? = nil
    var _combatPlayerS2CellID: Int64 = 0
    var _attackingPokemonID: [UInt64] = []
    var _publicProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _playerID = source._playerID
      _playerAvatar = source._playerAvatar
      _combatPlayerS2CellID = source._combatPlayerS2CellID
      _attackingPokemonID = source._attackingPokemonID
      _publicProfile = source._publicProfile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._playerID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._playerAvatar) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._combatPlayerS2CellID) }()
        case 4: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._attackingPokemonID) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._publicProfile) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._playerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._playerID, fieldNumber: 1)
      }
      if let v = _storage._playerAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._combatPlayerS2CellID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._combatPlayerS2CellID, fieldNumber: 3)
      }
      if !_storage._attackingPokemonID.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._attackingPokemonID, fieldNumber: 4)
      }
      if let v = _storage._publicProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Combat_ChallengePlayer, rhs: POGOProtos_Data_Combat_ChallengePlayer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._playerID != rhs_storage._playerID {return false}
        if _storage._playerAvatar != rhs_storage._playerAvatar {return false}
        if _storage._combatPlayerS2CellID != rhs_storage._combatPlayerS2CellID {return false}
        if _storage._attackingPokemonID != rhs_storage._attackingPokemonID {return false}
        if _storage._publicProfile != rhs_storage._publicProfile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
