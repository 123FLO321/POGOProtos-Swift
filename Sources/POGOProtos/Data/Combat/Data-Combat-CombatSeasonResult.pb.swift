// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Combat/CombatSeasonResult.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Combat_CombatSeasonResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var season: Int32 = 0

  public var rank: Int32 = 0

  public var totalBattles: Int32 = 0

  public var totalWins: Int32 = 0

  public var rating: Float = 0

  public var longestWinStreak: Int32 = 0

  public var currentStreak: Int32 = 0

  public var stardustEarned: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Combat"

extension POGOProtos_Data_Combat_CombatSeasonResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CombatSeasonResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "season"),
    2: .same(proto: "rank"),
    3: .standard(proto: "total_battles"),
    4: .standard(proto: "total_wins"),
    5: .same(proto: "rating"),
    6: .standard(proto: "longest_win_streak"),
    7: .standard(proto: "current_streak"),
    8: .standard(proto: "stardust_earned"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.season) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.rank) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.totalBattles) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalWins) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.rating) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.longestWinStreak) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.currentStreak) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.stardustEarned) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.season != 0 {
      try visitor.visitSingularInt32Field(value: self.season, fieldNumber: 1)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt32Field(value: self.rank, fieldNumber: 2)
    }
    if self.totalBattles != 0 {
      try visitor.visitSingularInt32Field(value: self.totalBattles, fieldNumber: 3)
    }
    if self.totalWins != 0 {
      try visitor.visitSingularInt32Field(value: self.totalWins, fieldNumber: 4)
    }
    if self.rating != 0 {
      try visitor.visitSingularFloatField(value: self.rating, fieldNumber: 5)
    }
    if self.longestWinStreak != 0 {
      try visitor.visitSingularInt32Field(value: self.longestWinStreak, fieldNumber: 6)
    }
    if self.currentStreak != 0 {
      try visitor.visitSingularInt32Field(value: self.currentStreak, fieldNumber: 7)
    }
    if self.stardustEarned != 0 {
      try visitor.visitSingularInt64Field(value: self.stardustEarned, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Combat_CombatSeasonResult, rhs: POGOProtos_Data_Combat_CombatSeasonResult) -> Bool {
    if lhs.season != rhs.season {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.totalBattles != rhs.totalBattles {return false}
    if lhs.totalWins != rhs.totalWins {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.longestWinStreak != rhs.longestWinStreak {return false}
    if lhs.currentStreak != rhs.currentStreak {return false}
    if lhs.stardustEarned != rhs.stardustEarned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
