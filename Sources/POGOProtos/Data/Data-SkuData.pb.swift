// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/SkuData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_SkuData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var isEnabled: Bool = false

  public var content: [POGOProtos_Data_SkuData.SkuContent] = []

  public var price: [POGOProtos_Data_SkuData.SkuPrice] = []

  public var paymentType: POGOProtos_Data_SkuData.SkuPaymentType = .unset

  public var lastModifiedTimestampMs: Int64 = 0

  public var presentationData: [POGOProtos_Data_SkuData.SkuPresentationData] = []

  public var enabledWindowStartMs: Int64 = 0

  public var enabledWindowEndMs: Int64 = 0

  public var subscriptionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SkuPaymentType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case thirdParty // = 1
    case inGame // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .thirdParty
      case 2: self = .inGame
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .thirdParty: return 1
      case .inGame: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct SkuContent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var itemType: String = String()

    public var quantity: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SkuPrice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var currencyType: String = String()

    public var price: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SkuPresentationData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Data_SkuData.SkuPaymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_SkuData.SkuPaymentType] = [
    .unset,
    .thirdParty,
    .inGame,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data"

extension POGOProtos_Data_SkuData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SkuData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_enabled"),
    3: .same(proto: "content"),
    4: .same(proto: "price"),
    5: .standard(proto: "payment_type"),
    6: .standard(proto: "last_modified_timestamp_ms"),
    7: .standard(proto: "presentation_data"),
    8: .standard(proto: "enabled_window_start_ms"),
    9: .standard(proto: "enabled_window_end_ms"),
    10: .standard(proto: "subscription_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isEnabled) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.content) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.price) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.paymentType) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastModifiedTimestampMs) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.presentationData) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.enabledWindowStartMs) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.enabledWindowEndMs) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.subscriptionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.isEnabled != false {
      try visitor.visitSingularBoolField(value: self.isEnabled, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 3)
    }
    if !self.price.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.price, fieldNumber: 4)
    }
    if self.paymentType != .unset {
      try visitor.visitSingularEnumField(value: self.paymentType, fieldNumber: 5)
    }
    if self.lastModifiedTimestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.lastModifiedTimestampMs, fieldNumber: 6)
    }
    if !self.presentationData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.presentationData, fieldNumber: 7)
    }
    if self.enabledWindowStartMs != 0 {
      try visitor.visitSingularInt64Field(value: self.enabledWindowStartMs, fieldNumber: 8)
    }
    if self.enabledWindowEndMs != 0 {
      try visitor.visitSingularInt64Field(value: self.enabledWindowEndMs, fieldNumber: 9)
    }
    if !self.subscriptionID.isEmpty {
      try visitor.visitSingularStringField(value: self.subscriptionID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_SkuData, rhs: POGOProtos_Data_SkuData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.isEnabled != rhs.isEnabled {return false}
    if lhs.content != rhs.content {return false}
    if lhs.price != rhs.price {return false}
    if lhs.paymentType != rhs.paymentType {return false}
    if lhs.lastModifiedTimestampMs != rhs.lastModifiedTimestampMs {return false}
    if lhs.presentationData != rhs.presentationData {return false}
    if lhs.enabledWindowStartMs != rhs.enabledWindowStartMs {return false}
    if lhs.enabledWindowEndMs != rhs.enabledWindowEndMs {return false}
    if lhs.subscriptionID != rhs.subscriptionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_SkuData.SkuPaymentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "THIRD_PARTY"),
    2: .same(proto: "IN_GAME"),
  ]
}

extension POGOProtos_Data_SkuData.SkuContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_SkuData.protoMessageName + ".SkuContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "item_type"),
    2: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.itemType) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemType.isEmpty {
      try visitor.visitSingularStringField(value: self.itemType, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_SkuData.SkuContent, rhs: POGOProtos_Data_SkuData.SkuContent) -> Bool {
    if lhs.itemType != rhs.itemType {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_SkuData.SkuPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_SkuData.protoMessageName + ".SkuPrice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "currency_type"),
    2: .same(proto: "price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.currencyType) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.price) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currencyType.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyType, fieldNumber: 1)
    }
    if self.price != 0 {
      try visitor.visitSingularInt32Field(value: self.price, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_SkuData.SkuPrice, rhs: POGOProtos_Data_SkuData.SkuPrice) -> Bool {
    if lhs.currencyType != rhs.currencyType {return false}
    if lhs.price != rhs.price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_SkuData.SkuPresentationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_SkuData.protoMessageName + ".SkuPresentationData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_SkuData.SkuPresentationData, rhs: POGOProtos_Data_SkuData.SkuPresentationData) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
