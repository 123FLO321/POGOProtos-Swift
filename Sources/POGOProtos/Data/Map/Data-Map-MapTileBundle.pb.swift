// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Map/MapTileBundle.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Map_MapTileBundle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mapTile: [POGOProtos_Data_Map_MapTileBundle.MapTileData] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct MapTileData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var mapTile: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile {
      get {return _storage._mapTile ?? POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile()}
      set {_uniqueStorage()._mapTile = newValue}
    }
    /// Returns true if `mapTile` has been explicitly set.
    public var hasMapTile: Bool {return _storage._mapTile != nil}
    /// Clears the value of `mapTile`. Subsequent reads from it will return its default value.
    public mutating func clearMapTile() {_uniqueStorage()._mapTile = nil}

    public var tileData: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot {
      get {return _storage._tileData ?? POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot()}
      set {_uniqueStorage()._tileData = newValue}
    }
    /// Returns true if `tileData` has been explicitly set.
    public var hasTileData: Bool {return _storage._tileData != nil}
    /// Clears the value of `tileData`. Subsequent reads from it will return its default value.
    public mutating func clearTileData() {_uniqueStorage()._tileData = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct MapTile {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var tileVariant: UInt32 = 0

      public var tileIndexX: Int32 = 0

      public var tileIndexY: Int32 = 0

      public var zoomLevel: Int32 = 0

      public var indoorLevelID: String = String()

      public var pertileEpoch: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum TextSizeEnum: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case unset // = 0
        case small // = 1
        case medium // = 2
        case large // = 3
        case UNRECOGNIZED(Int)

        public init() {
          self = .unset
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unset
          case 1: self = .small
          case 2: self = .medium
          case 3: self = .large
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unset: return 0
          case .small: return 1
          case .medium: return 2
          case .large: return 3
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public enum TileTypeEnum: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case unset // = 0
        case mapAtlas // = 2
        case satellite // = 3
        case traffic // = 4
        case gifAtlas // = 5
        case hybrid // = 6
        case terrain // = 7
        case clickableLayer // = 8
        case streetView // = 9
        case vectorAtlas // = 10
        case roadGraph // = 11
        case terrainNoLabels // = 12
        case vectorTransit // = 13
        case indoor // = 14
        case labelsOnly // = 15
        case personalizedSmartmaps // = 16
        case UNRECOGNIZED(Int)

        public init() {
          self = .unset
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unset
          case 2: self = .mapAtlas
          case 3: self = .satellite
          case 4: self = .traffic
          case 5: self = .gifAtlas
          case 6: self = .hybrid
          case 7: self = .terrain
          case 8: self = .clickableLayer
          case 9: self = .streetView
          case 10: self = .vectorAtlas
          case 11: self = .roadGraph
          case 12: self = .terrainNoLabels
          case 13: self = .vectorTransit
          case 14: self = .indoor
          case 15: self = .labelsOnly
          case 16: self = .personalizedSmartmaps
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unset: return 0
          case .mapAtlas: return 2
          case .satellite: return 3
          case .traffic: return 4
          case .gifAtlas: return 5
          case .hybrid: return 6
          case .terrain: return 7
          case .clickableLayer: return 8
          case .streetView: return 9
          case .vectorAtlas: return 10
          case .roadGraph: return 11
          case .terrainNoLabels: return 12
          case .vectorTransit: return 13
          case .indoor: return 14
          case .labelsOnly: return 15
          case .personalizedSmartmaps: return 16
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}
    }

    public struct MapCompositionRoot {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var mapArea: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea] = []

      public var mapProvider: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider] = []

      public var namedMapSettings: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.NamedMapSettings] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct MapArea {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var description_p: String = String()

        public var epoch: Int32 = 0

        public var mapProvider: String = String()

        public var boundingRect: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea.BoundingRect] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct BoundingRect {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var north: Double = 0

          public var south: Double = 0

          public var east: Double = 0

          public var west: Double = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}
      }

      public struct MapProvider {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var name: String {
          get {return _storage._name}
          set {_uniqueStorage()._name = newValue}
        }

        public var baseURL: String {
          get {return _storage._baseURL}
          set {_uniqueStorage()._baseURL = newValue}
        }

        public var queryFormat: String {
          get {return _storage._queryFormat}
          set {_uniqueStorage()._queryFormat = newValue}
        }

        public var settings: OneOf_Settings? {
          get {return _storage._settings}
          set {_uniqueStorage()._settings = newValue}
        }

        public var gmmSettings: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings {
          get {
            if case .gmmSettings(let v)? = _storage._settings {return v}
            return POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings()
          }
          set {_uniqueStorage()._settings = .gmmSettings(newValue)}
        }

        public var settingsName: String {
          get {
            if case .settingsName(let v)? = _storage._settings {return v}
            return String()
          }
          set {_uniqueStorage()._settings = .settingsName(newValue)}
        }

        public var mapType: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.MapType {
          get {return _storage._mapType}
          set {_uniqueStorage()._mapType = newValue}
        }

        public var hideAttribution: Bool {
          get {return _storage._hideAttribution}
          set {_uniqueStorage()._hideAttribution = newValue}
        }

        public var minTileLevel: Int32 {
          get {return _storage._minTileLevel}
          set {_uniqueStorage()._minTileLevel = newValue}
        }

        public var maxTileLevel: Int32 {
          get {return _storage._maxTileLevel}
          set {_uniqueStorage()._maxTileLevel = newValue}
        }

        public var bundleZoomRange: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.BundleZoomRange] {
          get {return _storage._bundleZoomRange}
          set {_uniqueStorage()._bundleZoomRange = newValue}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Settings: Equatable {
          case gmmSettings(POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings)
          case settingsName(String)

        #if !swift(>=4.1)
          public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.OneOf_Settings, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.OneOf_Settings) -> Bool {
            switch (lhs, rhs) {
            case (.gmmSettings(let l), .gmmSettings(let r)): return l == r
            case (.settingsName(let l), .settingsName(let r)): return l == r
            default: return false
            }
          }
        #endif
        }

        public enum MapType: SwiftProtobuf.Enum {
          public typealias RawValue = Int
          case unset // = 0
          case gmm // = 1
          case osm // = 2
          case blank // = 3
          case gmmBundle // = 4
          case UNRECOGNIZED(Int)

          public init() {
            self = .unset
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unset
            case 1: self = .gmm
            case 2: self = .osm
            case 3: self = .blank
            case 4: self = .gmmBundle
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .unset: return 0
            case .gmm: return 1
            case .osm: return 2
            case .blank: return 3
            case .gmmBundle: return 4
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        public struct BundleZoomRange {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var minZoom: Int32 = 0

          public var maxZoom: Int32 = 0

          public var requestZoomOffset: Int32 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      public struct NamedMapSettings {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var name: String {
          get {return _storage._name}
          set {_uniqueStorage()._name = newValue}
        }

        public var gmmSettings: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings {
          get {return _storage._gmmSettings ?? POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings()}
          set {_uniqueStorage()._gmmSettings = newValue}
        }
        /// Returns true if `gmmSettings` has been explicitly set.
        public var hasGmmSettings: Bool {return _storage._gmmSettings != nil}
        /// Clears the value of `gmmSettings`. Subsequent reads from it will return its default value.
        public mutating func clearGmmSettings() {_uniqueStorage()._gmmSettings = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      public struct GmmSettings {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var layerRules: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct LayerRule {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var fillColors: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.MaskedColor] = []

          public var roadPriority: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.GmmRoadPriority] = []

          public var roadAttributeBitfield: UInt32 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum GmmLayerType: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case area // = 0
            case road // = 1
            case building // = 2
            case lineMesh // = 3
            case UNRECOGNIZED(Int)

            public init() {
              self = .area
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .area
              case 1: self = .road
              case 2: self = .building
              case 3: self = .lineMesh
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .area: return 0
              case .road: return 1
              case .building: return 2
              case .lineMesh: return 3
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          public enum GmmRoadPriority: SwiftProtobuf.Enum {
            public typealias RawValue = Int
            case priorityNone // = 0
            case priorityTerminal // = 1
            case priorityLocal // = 2
            case priorityMinorArterial // = 3
            case priorityMajorArterial // = 4
            case prioritySecondaryRoad // = 5
            case priorityPrimaryHighway // = 6
            case priorityLimitedAccess // = 7
            case priorityControlledAccess // = 8
            case priorityNonTraffic // = 9
            case UNRECOGNIZED(Int)

            public init() {
              self = .priorityNone
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .priorityNone
              case 1: self = .priorityTerminal
              case 2: self = .priorityLocal
              case 3: self = .priorityMinorArterial
              case 4: self = .priorityMajorArterial
              case 5: self = .prioritySecondaryRoad
              case 6: self = .priorityPrimaryHighway
              case 7: self = .priorityLimitedAccess
              case 8: self = .priorityControlledAccess
              case 9: self = .priorityNonTraffic
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .priorityNone: return 0
              case .priorityTerminal: return 1
              case .priorityLocal: return 2
              case .priorityMinorArterial: return 3
              case .priorityMajorArterial: return 4
              case .prioritySecondaryRoad: return 5
              case .priorityPrimaryHighway: return 6
              case .priorityLimitedAccess: return 7
              case .priorityControlledAccess: return 8
              case .priorityNonTraffic: return 9
              case .UNRECOGNIZED(let i): return i
              }
            }

          }

          public struct MaskedColor {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var colorArgb: UInt32 = 0

            public var colorMaskArgb: UInt32 = 0

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public init() {}
      }

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Map"

extension POGOProtos_Data_Map_MapTileBundle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MapTileBundle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "map_tile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.mapTile)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mapTile.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mapTile, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle, rhs: POGOProtos_Data_Map_MapTileBundle) -> Bool {
    if lhs.mapTile != rhs.mapTile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.protoMessageName + ".MapTileData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "map_tile"),
    2: .standard(proto: "tile_data"),
  ]

  fileprivate class _StorageClass {
    var _mapTile: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile? = nil
    var _tileData: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mapTile = source._mapTile
      _tileData = source._tileData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mapTile)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tileData)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mapTile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._tileData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mapTile != rhs_storage._mapTile {return false}
        if _storage._tileData != rhs_storage._tileData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.protoMessageName + ".MapTile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tile_variant"),
    2: .standard(proto: "tile_index_x"),
    3: .standard(proto: "tile_index_y"),
    4: .standard(proto: "zoom_level"),
    5: .standard(proto: "indoor_level_id"),
    6: .standard(proto: "pertile_epoch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.tileVariant)
      case 2: try decoder.decodeSingularInt32Field(value: &self.tileIndexX)
      case 3: try decoder.decodeSingularInt32Field(value: &self.tileIndexY)
      case 4: try decoder.decodeSingularInt32Field(value: &self.zoomLevel)
      case 5: try decoder.decodeSingularStringField(value: &self.indoorLevelID)
      case 6: try decoder.decodeSingularInt32Field(value: &self.pertileEpoch)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tileVariant != 0 {
      try visitor.visitSingularUInt32Field(value: self.tileVariant, fieldNumber: 1)
    }
    if self.tileIndexX != 0 {
      try visitor.visitSingularInt32Field(value: self.tileIndexX, fieldNumber: 2)
    }
    if self.tileIndexY != 0 {
      try visitor.visitSingularInt32Field(value: self.tileIndexY, fieldNumber: 3)
    }
    if self.zoomLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.zoomLevel, fieldNumber: 4)
    }
    if !self.indoorLevelID.isEmpty {
      try visitor.visitSingularStringField(value: self.indoorLevelID, fieldNumber: 5)
    }
    if self.pertileEpoch != 0 {
      try visitor.visitSingularInt32Field(value: self.pertileEpoch, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile) -> Bool {
    if lhs.tileVariant != rhs.tileVariant {return false}
    if lhs.tileIndexX != rhs.tileIndexX {return false}
    if lhs.tileIndexY != rhs.tileIndexY {return false}
    if lhs.zoomLevel != rhs.zoomLevel {return false}
    if lhs.indoorLevelID != rhs.indoorLevelID {return false}
    if lhs.pertileEpoch != rhs.pertileEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile.TextSizeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT_SIZE_ENUM_UNSET"),
    1: .same(proto: "SMALL"),
    2: .same(proto: "MEDIUM"),
    3: .same(proto: "LARGE"),
  ]
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapTile.TileTypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TILE_TYPE_ENUM_UNSET"),
    2: .same(proto: "MAP_ATLAS"),
    3: .same(proto: "SATELLITE"),
    4: .same(proto: "TRAFFIC"),
    5: .same(proto: "GIF_ATLAS"),
    6: .same(proto: "HYBRID"),
    7: .same(proto: "TERRAIN"),
    8: .same(proto: "CLICKABLE_LAYER"),
    9: .same(proto: "STREET_VIEW"),
    10: .same(proto: "VECTOR_ATLAS"),
    11: .same(proto: "ROAD_GRAPH"),
    12: .same(proto: "TERRAIN_NO_LABELS"),
    13: .same(proto: "VECTOR_TRANSIT"),
    14: .same(proto: "INDOOR"),
    15: .same(proto: "LABELS_ONLY"),
    16: .same(proto: "PERSONALIZED_SMARTMAPS"),
  ]
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.protoMessageName + ".MapCompositionRoot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "map_area"),
    2: .standard(proto: "map_provider"),
    3: .standard(proto: "named_map_settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.mapArea)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.mapProvider)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.namedMapSettings)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mapArea.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mapArea, fieldNumber: 1)
    }
    if !self.mapProvider.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mapProvider, fieldNumber: 2)
    }
    if !self.namedMapSettings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.namedMapSettings, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot) -> Bool {
    if lhs.mapArea != rhs.mapArea {return false}
    if lhs.mapProvider != rhs.mapProvider {return false}
    if lhs.namedMapSettings != rhs.namedMapSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.protoMessageName + ".MapArea"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "epoch"),
    3: .standard(proto: "map_provider"),
    4: .standard(proto: "bounding_rect"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.description_p)
      case 2: try decoder.decodeSingularInt32Field(value: &self.epoch)
      case 3: try decoder.decodeSingularStringField(value: &self.mapProvider)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.boundingRect)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if self.epoch != 0 {
      try visitor.visitSingularInt32Field(value: self.epoch, fieldNumber: 2)
    }
    if !self.mapProvider.isEmpty {
      try visitor.visitSingularStringField(value: self.mapProvider, fieldNumber: 3)
    }
    if !self.boundingRect.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.boundingRect, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.mapProvider != rhs.mapProvider {return false}
    if lhs.boundingRect != rhs.boundingRect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea.BoundingRect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea.protoMessageName + ".BoundingRect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "north"),
    2: .same(proto: "south"),
    3: .same(proto: "east"),
    4: .same(proto: "west"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.north)
      case 2: try decoder.decodeSingularDoubleField(value: &self.south)
      case 3: try decoder.decodeSingularDoubleField(value: &self.east)
      case 4: try decoder.decodeSingularDoubleField(value: &self.west)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.north != 0 {
      try visitor.visitSingularDoubleField(value: self.north, fieldNumber: 1)
    }
    if self.south != 0 {
      try visitor.visitSingularDoubleField(value: self.south, fieldNumber: 2)
    }
    if self.east != 0 {
      try visitor.visitSingularDoubleField(value: self.east, fieldNumber: 3)
    }
    if self.west != 0 {
      try visitor.visitSingularDoubleField(value: self.west, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea.BoundingRect, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapArea.BoundingRect) -> Bool {
    if lhs.north != rhs.north {return false}
    if lhs.south != rhs.south {return false}
    if lhs.east != rhs.east {return false}
    if lhs.west != rhs.west {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.protoMessageName + ".MapProvider"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "base_url"),
    3: .standard(proto: "query_format"),
    4: .standard(proto: "gmm_settings"),
    5: .standard(proto: "settings_name"),
    6: .standard(proto: "map_type"),
    7: .standard(proto: "hide_attribution"),
    8: .standard(proto: "min_tile_level"),
    9: .standard(proto: "max_tile_level"),
    10: .standard(proto: "bundle_zoom_range"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _baseURL: String = String()
    var _queryFormat: String = String()
    var _settings: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.OneOf_Settings?
    var _mapType: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.MapType = .unset
    var _hideAttribution: Bool = false
    var _minTileLevel: Int32 = 0
    var _maxTileLevel: Int32 = 0
    var _bundleZoomRange: [POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.BundleZoomRange] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _baseURL = source._baseURL
      _queryFormat = source._queryFormat
      _settings = source._settings
      _mapType = source._mapType
      _hideAttribution = source._hideAttribution
      _minTileLevel = source._minTileLevel
      _maxTileLevel = source._maxTileLevel
      _bundleZoomRange = source._bundleZoomRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._baseURL)
        case 3: try decoder.decodeSingularStringField(value: &_storage._queryFormat)
        case 4:
          var v: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings?
          if let current = _storage._settings {
            try decoder.handleConflictingOneOf()
            if case .gmmSettings(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._settings = .gmmSettings(v)}
        case 5:
          if _storage._settings != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._settings = .settingsName(v)}
        case 6: try decoder.decodeSingularEnumField(value: &_storage._mapType)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._hideAttribution)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._minTileLevel)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._maxTileLevel)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._bundleZoomRange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._baseURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._baseURL, fieldNumber: 2)
      }
      if !_storage._queryFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._queryFormat, fieldNumber: 3)
      }
      switch _storage._settings {
      case .gmmSettings(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .settingsName(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      case nil: break
      }
      if _storage._mapType != .unset {
        try visitor.visitSingularEnumField(value: _storage._mapType, fieldNumber: 6)
      }
      if _storage._hideAttribution != false {
        try visitor.visitSingularBoolField(value: _storage._hideAttribution, fieldNumber: 7)
      }
      if _storage._minTileLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minTileLevel, fieldNumber: 8)
      }
      if _storage._maxTileLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxTileLevel, fieldNumber: 9)
      }
      if !_storage._bundleZoomRange.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bundleZoomRange, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._baseURL != rhs_storage._baseURL {return false}
        if _storage._queryFormat != rhs_storage._queryFormat {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._mapType != rhs_storage._mapType {return false}
        if _storage._hideAttribution != rhs_storage._hideAttribution {return false}
        if _storage._minTileLevel != rhs_storage._minTileLevel {return false}
        if _storage._maxTileLevel != rhs_storage._maxTileLevel {return false}
        if _storage._bundleZoomRange != rhs_storage._bundleZoomRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.MapType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "GMM"),
    2: .same(proto: "OSM"),
    3: .same(proto: "BLANK"),
    4: .same(proto: "GMM_BUNDLE"),
  ]
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.BundleZoomRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.protoMessageName + ".BundleZoomRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_zoom"),
    2: .standard(proto: "max_zoom"),
    3: .standard(proto: "request_zoom_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.minZoom)
      case 2: try decoder.decodeSingularInt32Field(value: &self.maxZoom)
      case 3: try decoder.decodeSingularInt32Field(value: &self.requestZoomOffset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minZoom != 0 {
      try visitor.visitSingularInt32Field(value: self.minZoom, fieldNumber: 1)
    }
    if self.maxZoom != 0 {
      try visitor.visitSingularInt32Field(value: self.maxZoom, fieldNumber: 2)
    }
    if self.requestZoomOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.requestZoomOffset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.BundleZoomRange, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.MapProvider.BundleZoomRange) -> Bool {
    if lhs.minZoom != rhs.minZoom {return false}
    if lhs.maxZoom != rhs.maxZoom {return false}
    if lhs.requestZoomOffset != rhs.requestZoomOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.NamedMapSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.protoMessageName + ".NamedMapSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "gmm_settings"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _gmmSettings: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _gmmSettings = source._gmmSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gmmSettings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._gmmSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.NamedMapSettings, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.NamedMapSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._gmmSettings != rhs_storage._gmmSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.protoMessageName + ".GmmSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "layer_rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.layerRules)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.layerRules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.layerRules, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings) -> Bool {
    if lhs.layerRules != rhs.layerRules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.protoMessageName + ".LayerRule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fill_colors"),
    2: .standard(proto: "road_priority"),
    3: .standard(proto: "road_attribute_bitfield"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.fillColors)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.roadPriority)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.roadAttributeBitfield)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fillColors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fillColors, fieldNumber: 1)
    }
    if !self.roadPriority.isEmpty {
      try visitor.visitPackedEnumField(value: self.roadPriority, fieldNumber: 2)
    }
    if self.roadAttributeBitfield != 0 {
      try visitor.visitSingularUInt32Field(value: self.roadAttributeBitfield, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule) -> Bool {
    if lhs.fillColors != rhs.fillColors {return false}
    if lhs.roadPriority != rhs.roadPriority {return false}
    if lhs.roadAttributeBitfield != rhs.roadAttributeBitfield {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.GmmLayerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AREA"),
    1: .same(proto: "ROAD"),
    2: .same(proto: "BUILDING"),
    3: .same(proto: "LINE_MESH"),
  ]
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.GmmRoadPriority: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIORITY_NONE"),
    1: .same(proto: "PRIORITY_TERMINAL"),
    2: .same(proto: "PRIORITY_LOCAL"),
    3: .same(proto: "PRIORITY_MINOR_ARTERIAL"),
    4: .same(proto: "PRIORITY_MAJOR_ARTERIAL"),
    5: .same(proto: "PRIORITY_SECONDARY_ROAD"),
    6: .same(proto: "PRIORITY_PRIMARY_HIGHWAY"),
    7: .same(proto: "PRIORITY_LIMITED_ACCESS"),
    8: .same(proto: "PRIORITY_CONTROLLED_ACCESS"),
    9: .same(proto: "PRIORITY_NON_TRAFFIC"),
  ]
}

extension POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.MaskedColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.protoMessageName + ".MaskedColor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "color_argb"),
    2: .standard(proto: "color_mask_argb"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.colorArgb)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.colorMaskArgb)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.colorArgb != 0 {
      try visitor.visitSingularUInt32Field(value: self.colorArgb, fieldNumber: 1)
    }
    if self.colorMaskArgb != 0 {
      try visitor.visitSingularUInt32Field(value: self.colorMaskArgb, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.MaskedColor, rhs: POGOProtos_Data_Map_MapTileBundle.MapTileData.MapCompositionRoot.GmmSettings.LayerRule.MaskedColor) -> Bool {
    if lhs.colorArgb != rhs.colorArgb {return false}
    if lhs.colorMaskArgb != rhs.colorMaskArgb {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
