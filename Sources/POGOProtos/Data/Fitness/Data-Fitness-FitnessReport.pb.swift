// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Fitness/FitnessReport.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Fitness_FitnessReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var window: OneOf_Window? {
    get {return _storage._window}
    set {_uniqueStorage()._window = newValue}
  }

  public var dayOffsetFromNow: Int32 {
    get {
      if case .dayOffsetFromNow(let v)? = _storage._window {return v}
      return 0
    }
    set {_uniqueStorage()._window = .dayOffsetFromNow(newValue)}
  }

  public var weekOffsetFromNow: Int32 {
    get {
      if case .weekOffsetFromNow(let v)? = _storage._window {return v}
      return 0
    }
    set {_uniqueStorage()._window = .weekOffsetFromNow(newValue)}
  }

  public var metrics: POGOProtos_Data_Fitness_FitnessMetrics {
    get {return _storage._metrics ?? POGOProtos_Data_Fitness_FitnessMetrics()}
    set {_uniqueStorage()._metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  public var hasMetrics: Bool {return _storage._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  public mutating func clearMetrics() {_uniqueStorage()._metrics = nil}

  public var gameData: Data {
    get {return _storage._gameData}
    set {_uniqueStorage()._gameData = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Window: Equatable {
    case dayOffsetFromNow(Int32)
    case weekOffsetFromNow(Int32)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window, rhs: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window) -> Bool {
      switch (lhs, rhs) {
      case (.dayOffsetFromNow(let l), .dayOffsetFromNow(let r)): return l == r
      case (.weekOffsetFromNow(let l), .weekOffsetFromNow(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Fitness"

extension POGOProtos_Data_Fitness_FitnessReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FitnessReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "day_offset_from_now"),
    2: .standard(proto: "week_offset_from_now"),
    3: .same(proto: "metrics"),
    4: .standard(proto: "game_data"),
  ]

  fileprivate class _StorageClass {
    var _window: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window?
    var _metrics: POGOProtos_Data_Fitness_FitnessMetrics? = nil
    var _gameData: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _window = source._window
      _metrics = source._metrics
      _gameData = source._gameData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._window != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._window = .dayOffsetFromNow(v)}
        case 2:
          if _storage._window != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._window = .weekOffsetFromNow(v)}
        case 3: try decoder.decodeSingularMessageField(value: &_storage._metrics)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._gameData)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._window {
      case .dayOffsetFromNow(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      case .weekOffsetFromNow(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      case nil: break
      }
      if let v = _storage._metrics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._gameData.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._gameData, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Fitness_FitnessReport, rhs: POGOProtos_Data_Fitness_FitnessReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._window != rhs_storage._window {return false}
        if _storage._metrics != rhs_storage._metrics {return false}
        if _storage._gameData != rhs_storage._gameData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
