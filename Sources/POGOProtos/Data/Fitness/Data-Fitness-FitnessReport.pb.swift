// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Fitness/FitnessReport.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Fitness_FitnessReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var window: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window? = nil

  public var dayOffsetFromNow: Int32 {
    get {
      if case .dayOffsetFromNow(let v)? = window {return v}
      return 0
    }
    set {window = .dayOffsetFromNow(newValue)}
  }

  public var weekOffsetFromNow: Int32 {
    get {
      if case .weekOffsetFromNow(let v)? = window {return v}
      return 0
    }
    set {window = .weekOffsetFromNow(newValue)}
  }

  public var metrics: POGOProtos_Data_Fitness_FitnessMetrics {
    get {return _metrics ?? POGOProtos_Data_Fitness_FitnessMetrics()}
    set {_metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  public var hasMetrics: Bool {return self._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  public mutating func clearMetrics() {self._metrics = nil}

  public var gameData: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Window: Equatable {
    case dayOffsetFromNow(Int32)
    case weekOffsetFromNow(Int32)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window, rhs: POGOProtos_Data_Fitness_FitnessReport.OneOf_Window) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.dayOffsetFromNow, .dayOffsetFromNow): return {
        guard case .dayOffsetFromNow(let l) = lhs, case .dayOffsetFromNow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.weekOffsetFromNow, .weekOffsetFromNow): return {
        guard case .weekOffsetFromNow(let l) = lhs, case .weekOffsetFromNow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _metrics: POGOProtos_Data_Fitness_FitnessMetrics? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Fitness"

extension POGOProtos_Data_Fitness_FitnessReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FitnessReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "day_offset_from_now"),
    2: .standard(proto: "week_offset_from_now"),
    3: .same(proto: "metrics"),
    4: .standard(proto: "game_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.window != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.window = .dayOffsetFromNow(v)}
      }()
      case 2: try {
        if self.window != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.window = .weekOffsetFromNow(v)}
      }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metrics) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.gameData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.window {
    case .dayOffsetFromNow?: try {
      guard case .dayOffsetFromNow(let v)? = self.window else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }()
    case .weekOffsetFromNow?: try {
      guard case .weekOffsetFromNow(let v)? = self.window else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if let v = self._metrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.gameData.isEmpty {
      try visitor.visitSingularBytesField(value: self.gameData, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Fitness_FitnessReport, rhs: POGOProtos_Data_Fitness_FitnessReport) -> Bool {
    if lhs.window != rhs.window {return false}
    if lhs._metrics != rhs._metrics {return false}
    if lhs.gameData != rhs.gameData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
