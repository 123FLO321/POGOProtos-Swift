// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Analytics/ClientTelemetryRecord.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Analytics_ClientTelemetryRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var recordID: String = String()

  public var encodedMessage: Data = SwiftProtobuf.Internal.emptyData

  public var clientTimestampMs: Int64 = 0

  public var metricID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Analytics"

extension POGOProtos_Data_Analytics_ClientTelemetryRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientTelemetryRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .standard(proto: "encoded_message"),
    3: .standard(proto: "client_timestamp_ms"),
    4: .standard(proto: "metric_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.recordID)
      case 2: try decoder.decodeSingularBytesField(value: &self.encodedMessage)
      case 3: try decoder.decodeSingularInt64Field(value: &self.clientTimestampMs)
      case 4: try decoder.decodeSingularInt64Field(value: &self.metricID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recordID.isEmpty {
      try visitor.visitSingularStringField(value: self.recordID, fieldNumber: 1)
    }
    if !self.encodedMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.encodedMessage, fieldNumber: 2)
    }
    if self.clientTimestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.clientTimestampMs, fieldNumber: 3)
    }
    if self.metricID != 0 {
      try visitor.visitSingularInt64Field(value: self.metricID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Analytics_ClientTelemetryRecord, rhs: POGOProtos_Data_Analytics_ClientTelemetryRecord) -> Bool {
    if lhs.recordID != rhs.recordID {return false}
    if lhs.encodedMessage != rhs.encodedMessage {return false}
    if lhs.clientTimestampMs != rhs.clientTimestampMs {return false}
    if lhs.metricID != rhs.metricID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
