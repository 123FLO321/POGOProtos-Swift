// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Analytics/ClientTelemetryRecord.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Analytics_ClientTelemetryRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var recordID: String = String()

  public var encodedMessage: Data = Data()

  public var clientTimestampMs: Int64 = 0

  public var metricID: Int64 = 0

  public var commonFilters: POGOProtos_Data_Analytics_ClientTelemetryCommonFilter {
    get {return _commonFilters ?? POGOProtos_Data_Analytics_ClientTelemetryCommonFilter()}
    set {_commonFilters = newValue}
  }
  /// Returns true if `commonFilters` has been explicitly set.
  public var hasCommonFilters: Bool {return self._commonFilters != nil}
  /// Clears the value of `commonFilters`. Subsequent reads from it will return its default value.
  public mutating func clearCommonFilters() {self._commonFilters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _commonFilters: POGOProtos_Data_Analytics_ClientTelemetryCommonFilter? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Analytics"

extension POGOProtos_Data_Analytics_ClientTelemetryRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientTelemetryRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .standard(proto: "encoded_message"),
    3: .standard(proto: "client_timestamp_ms"),
    4: .standard(proto: "metric_id"),
    5: .standard(proto: "common_filters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.recordID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.encodedMessage) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.clientTimestampMs) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.metricID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._commonFilters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recordID.isEmpty {
      try visitor.visitSingularStringField(value: self.recordID, fieldNumber: 1)
    }
    if !self.encodedMessage.isEmpty {
      try visitor.visitSingularBytesField(value: self.encodedMessage, fieldNumber: 2)
    }
    if self.clientTimestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.clientTimestampMs, fieldNumber: 3)
    }
    if self.metricID != 0 {
      try visitor.visitSingularInt64Field(value: self.metricID, fieldNumber: 4)
    }
    if let v = self._commonFilters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Analytics_ClientTelemetryRecord, rhs: POGOProtos_Data_Analytics_ClientTelemetryRecord) -> Bool {
    if lhs.recordID != rhs.recordID {return false}
    if lhs.encodedMessage != rhs.encodedMessage {return false}
    if lhs.clientTimestampMs != rhs.clientTimestampMs {return false}
    if lhs.metricID != rhs.metricID {return false}
    if lhs._commonFilters != rhs._commonFilters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
