// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Geofence/GeofenceMetadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Geofence_GeofenceMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var latitudeDeg: Double = 0

  public var longitudeDeg: Double = 0

  public var radius: Double = 0

  public var identifier: String = String()

  public var expirationMs: Int64 = 0

  public var dwellTimeMs: Int64 = 0

  public var fireOnEntrance: Bool = false

  public var fireOnExit: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Geofence"

extension POGOProtos_Data_Geofence_GeofenceMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GeofenceMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .same(proto: "radius"),
    4: .same(proto: "identifier"),
    5: .standard(proto: "expiration_ms"),
    6: .standard(proto: "dwell_time_ms"),
    7: .standard(proto: "fire_on_entrance"),
    8: .standard(proto: "fire_on_exit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitudeDeg) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitudeDeg) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.radius) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.expirationMs) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.dwellTimeMs) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.fireOnEntrance) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.fireOnExit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.radius != 0 {
      try visitor.visitSingularDoubleField(value: self.radius, fieldNumber: 3)
    }
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 4)
    }
    if self.expirationMs != 0 {
      try visitor.visitSingularInt64Field(value: self.expirationMs, fieldNumber: 5)
    }
    if self.dwellTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.dwellTimeMs, fieldNumber: 6)
    }
    if self.fireOnEntrance != false {
      try visitor.visitSingularBoolField(value: self.fireOnEntrance, fieldNumber: 7)
    }
    if self.fireOnExit != false {
      try visitor.visitSingularBoolField(value: self.fireOnExit, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Geofence_GeofenceMetadata, rhs: POGOProtos_Data_Geofence_GeofenceMetadata) -> Bool {
    if lhs.latitudeDeg != rhs.latitudeDeg {return false}
    if lhs.longitudeDeg != rhs.longitudeDeg {return false}
    if lhs.radius != rhs.radius {return false}
    if lhs.identifier != rhs.identifier {return false}
    if lhs.expirationMs != rhs.expirationMs {return false}
    if lhs.dwellTimeMs != rhs.dwellTimeMs {return false}
    if lhs.fireOnEntrance != rhs.fireOnEntrance {return false}
    if lhs.fireOnExit != rhs.fireOnExit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
