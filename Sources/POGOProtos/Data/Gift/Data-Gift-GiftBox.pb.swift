// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Gift/GiftBox.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Gift_GiftBox {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var giftboxID: UInt64 = 0

  public var senderID: String = String()

  public var receiverID: String = String()

  public var fortID: String = String()

  public var fortLat: Double = 0

  public var fortLng: Double = 0

  public var creationTimestamp: Int64 = 0

  public var sentTimestamp: Int64 = 0

  public var sentBucket: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Gift"

extension POGOProtos_Data_Gift_GiftBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GiftBox"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "giftbox_id"),
    2: .standard(proto: "sender_id"),
    3: .standard(proto: "receiver_id"),
    4: .standard(proto: "fort_id"),
    5: .standard(proto: "fort_lat"),
    6: .standard(proto: "fort_lng"),
    7: .standard(proto: "creation_timestamp"),
    8: .standard(proto: "sent_timestamp"),
    9: .standard(proto: "sent_bucket"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.giftboxID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.senderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.receiverID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.fortID) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.fortLat) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.fortLng) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.creationTimestamp) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.sentTimestamp) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.sentBucket) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.giftboxID != 0 {
      try visitor.visitSingularUInt64Field(value: self.giftboxID, fieldNumber: 1)
    }
    if !self.senderID.isEmpty {
      try visitor.visitSingularStringField(value: self.senderID, fieldNumber: 2)
    }
    if !self.receiverID.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverID, fieldNumber: 3)
    }
    if !self.fortID.isEmpty {
      try visitor.visitSingularStringField(value: self.fortID, fieldNumber: 4)
    }
    if self.fortLat != 0 {
      try visitor.visitSingularDoubleField(value: self.fortLat, fieldNumber: 5)
    }
    if self.fortLng != 0 {
      try visitor.visitSingularDoubleField(value: self.fortLng, fieldNumber: 6)
    }
    if self.creationTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.creationTimestamp, fieldNumber: 7)
    }
    if self.sentTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.sentTimestamp, fieldNumber: 8)
    }
    if self.sentBucket != 0 {
      try visitor.visitSingularInt64Field(value: self.sentBucket, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Gift_GiftBox, rhs: POGOProtos_Data_Gift_GiftBox) -> Bool {
    if lhs.giftboxID != rhs.giftboxID {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs.receiverID != rhs.receiverID {return false}
    if lhs.fortID != rhs.fortID {return false}
    if lhs.fortLat != rhs.fortLat {return false}
    if lhs.fortLng != rhs.fortLng {return false}
    if lhs.creationTimestamp != rhs.creationTimestamp {return false}
    if lhs.sentTimestamp != rhs.sentTimestamp {return false}
    if lhs.sentBucket != rhs.sentBucket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
