// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/ArPhotoSession.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_ArPhotoSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var arType: POGOProtos_Data_Telemetry_ArPhotoSession.ArType {
    get {return _storage._arType}
    set {_uniqueStorage()._arType = newValue}
  }

  public var furthestStepCompleted: POGOProtos_Data_Telemetry_ArPhotoSession.Step {
    get {return _storage._furthestStepCompleted}
    set {_uniqueStorage()._furthestStepCompleted = newValue}
  }

  public var numPhotosTaken: Int32 {
    get {return _storage._numPhotosTaken}
    set {_uniqueStorage()._numPhotosTaken = newValue}
  }

  public var numPhotosShared: Int32 {
    get {return _storage._numPhotosShared}
    set {_uniqueStorage()._numPhotosShared = newValue}
  }

  public var numPhotosTakenOcclusions: Int32 {
    get {return _storage._numPhotosTakenOcclusions}
    set {_uniqueStorage()._numPhotosTakenOcclusions = newValue}
  }

  public var numOcclusionsEnabled: Int32 {
    get {return _storage._numOcclusionsEnabled}
    set {_uniqueStorage()._numOcclusionsEnabled = newValue}
  }

  public var numOcclusionsDisabled: Int32 {
    get {return _storage._numOcclusionsDisabled}
    set {_uniqueStorage()._numOcclusionsDisabled = newValue}
  }

  public var arContext: POGOProtos_Data_Telemetry_ArPhotoSession.ArContext {
    get {return _storage._arContext}
    set {_uniqueStorage()._arContext = newValue}
  }

  public var sessionLength: Int64 {
    get {return _storage._sessionLength}
    set {_uniqueStorage()._sessionLength = newValue}
  }

  public var sessionLengthOcclusions: Int64 {
    get {return _storage._sessionLengthOcclusions}
    set {_uniqueStorage()._sessionLengthOcclusions = newValue}
  }

  public var numPhotosSharedOcclusions: Int32 {
    get {return _storage._numPhotosSharedOcclusions}
    set {_uniqueStorage()._numPhotosSharedOcclusions = newValue}
  }

  public var modelURL: String {
    get {return _storage._modelURL}
    set {_uniqueStorage()._modelURL = newValue}
  }

  public var ardkVersion: String {
    get {return _storage._ardkVersion}
    set {_uniqueStorage()._ardkVersion = newValue}
  }

  public var averageFramerate: Int32 {
    get {return _storage._averageFramerate}
    set {_uniqueStorage()._averageFramerate = newValue}
  }

  public var averageBatteryPerMin: Float {
    get {return _storage._averageBatteryPerMin}
    set {_uniqueStorage()._averageBatteryPerMin = newValue}
  }

  public var averageCpuUsage: Float {
    get {return _storage._averageCpuUsage}
    set {_uniqueStorage()._averageCpuUsage = newValue}
  }

  public var averageGpuUsage: Float {
    get {return _storage._averageGpuUsage}
    set {_uniqueStorage()._averageGpuUsage = newValue}
  }

  public var framerateSamples: [POGOProtos_Data_Telemetry_ArPhotoSession.FramerateSample] {
    get {return _storage._framerateSamples}
    set {_uniqueStorage()._framerateSamples = newValue}
  }

  public var batterySamples: [POGOProtos_Data_Telemetry_ArPhotoSession.BatterySample] {
    get {return _storage._batterySamples}
    set {_uniqueStorage()._batterySamples = newValue}
  }

  public var processorSamples: [POGOProtos_Data_Telemetry_ArPhotoSession.ProcessorSample] {
    get {return _storage._processorSamples}
    set {_uniqueStorage()._processorSamples = newValue}
  }

  public var sessionStartToPlaneDetectionMs: Int32 {
    get {return _storage._sessionStartToPlaneDetectionMs}
    set {_uniqueStorage()._sessionStartToPlaneDetectionMs = newValue}
  }

  public var planeDetectionToUserInteractionMs: Int32 {
    get {return _storage._planeDetectionToUserInteractionMs}
    set {_uniqueStorage()._planeDetectionToUserInteractionMs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum BatteryStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case undetermined // = 0
    case charging // = 1
    case discharging // = 2
    case notCharging // = 3
    case full // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .undetermined
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .undetermined
      case 1: self = .charging
      case 2: self = .discharging
      case 3: self = .notCharging
      case 4: self = .full
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .undetermined: return 0
      case .charging: return 1
      case .discharging: return 2
      case .notCharging: return 3
      case .full: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum ArContext: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case arEncounter // = 1
    case arSnapshot // = 2
    case singleplayerBuddy // = 3
    case multiplayerBuddy // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .arEncounter
      case 2: self = .arSnapshot
      case 3: self = .singleplayerBuddy
      case 4: self = .multiplayerBuddy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .arEncounter: return 1
      case .arSnapshot: return 2
      case .singleplayerBuddy: return 3
      case .multiplayerBuddy: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum ArType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case plus // = 1
    case classic // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .plus
      case 2: self = .classic
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .plus: return 1
      case .classic: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Step: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case cameraPermissionGranted // = 1
    case arplusPlaneFound // = 2
    case arplusPokemonPlaced // = 3
    case photoTaken // = 4
    case photoShared // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .cameraPermissionGranted
      case 2: self = .arplusPlaneFound
      case 3: self = .arplusPokemonPlaced
      case 4: self = .photoTaken
      case 5: self = .photoShared
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .cameraPermissionGranted: return 1
      case .arplusPlaneFound: return 2
      case .arplusPokemonPlaced: return 3
      case .photoTaken: return 4
      case .photoShared: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct ArConditions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var timestamp: Int64 = 0

    public var occlusionsEnabled: Bool = false

    public var currentArStep: POGOProtos_Data_Telemetry_ArPhotoSession.Step = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BatterySample {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions {
      get {return _conditions ?? POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions()}
      set {_conditions = newValue}
    }
    /// Returns true if `conditions` has been explicitly set.
    public var hasConditions: Bool {return self._conditions != nil}
    /// Clears the value of `conditions`. Subsequent reads from it will return its default value.
    public mutating func clearConditions() {self._conditions = nil}

    public var batteryLevel: Float = 0

    public var status: POGOProtos_Data_Telemetry_ArPhotoSession.BatteryStatus = .undetermined

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions? = nil
  }

  public struct FramerateSample {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions {
      get {return _conditions ?? POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions()}
      set {_conditions = newValue}
    }
    /// Returns true if `conditions` has been explicitly set.
    public var hasConditions: Bool {return self._conditions != nil}
    /// Clears the value of `conditions`. Subsequent reads from it will return its default value.
    public mutating func clearConditions() {self._conditions = nil}

    public var framerate: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions? = nil
  }

  public struct ProcessorSample {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions {
      get {return _conditions ?? POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions()}
      set {_conditions = newValue}
    }
    /// Returns true if `conditions` has been explicitly set.
    public var hasConditions: Bool {return self._conditions != nil}
    /// Clears the value of `conditions`. Subsequent reads from it will return its default value.
    public mutating func clearConditions() {self._conditions = nil}

    public var cpuUsage: Float = 0

    public var gpuUsage: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _conditions: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Data_Telemetry_ArPhotoSession.BatteryStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Telemetry_ArPhotoSession.BatteryStatus] = [
    .undetermined,
    .charging,
    .discharging,
    .notCharging,
    .full,
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ArContext: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Telemetry_ArPhotoSession.ArContext] = [
    .none,
    .arEncounter,
    .arSnapshot,
    .singleplayerBuddy,
    .multiplayerBuddy,
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ArType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Telemetry_ArPhotoSession.ArType] = [
    .unset,
    .plus,
    .classic,
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.Step: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Telemetry_ArPhotoSession.Step] = [
    .unknown,
    .cameraPermissionGranted,
    .arplusPlaneFound,
    .arplusPokemonPlaced,
    .photoTaken,
    .photoShared,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_ArPhotoSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArPhotoSession"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ar_type"),
    2: .standard(proto: "furthest_step_completed"),
    3: .standard(proto: "num_photos_taken"),
    4: .standard(proto: "num_photos_shared"),
    5: .standard(proto: "num_photos_taken_occlusions"),
    6: .standard(proto: "num_occlusions_enabled"),
    7: .standard(proto: "num_occlusions_disabled"),
    8: .standard(proto: "ar_context"),
    9: .standard(proto: "session_length"),
    10: .standard(proto: "session_length_occlusions"),
    11: .standard(proto: "num_photos_shared_occlusions"),
    12: .standard(proto: "model_url"),
    13: .standard(proto: "ardk_version"),
    14: .standard(proto: "average_framerate"),
    15: .standard(proto: "average_battery_per_min"),
    16: .standard(proto: "average_cpu_usage"),
    17: .standard(proto: "average_gpu_usage"),
    18: .standard(proto: "framerate_samples"),
    19: .standard(proto: "battery_samples"),
    20: .standard(proto: "processor_samples"),
    21: .standard(proto: "session_start_to_plane_detection_ms"),
    22: .standard(proto: "plane_detection_to_user_interaction_ms"),
  ]

  fileprivate class _StorageClass {
    var _arType: POGOProtos_Data_Telemetry_ArPhotoSession.ArType = .unset
    var _furthestStepCompleted: POGOProtos_Data_Telemetry_ArPhotoSession.Step = .unknown
    var _numPhotosTaken: Int32 = 0
    var _numPhotosShared: Int32 = 0
    var _numPhotosTakenOcclusions: Int32 = 0
    var _numOcclusionsEnabled: Int32 = 0
    var _numOcclusionsDisabled: Int32 = 0
    var _arContext: POGOProtos_Data_Telemetry_ArPhotoSession.ArContext = .none
    var _sessionLength: Int64 = 0
    var _sessionLengthOcclusions: Int64 = 0
    var _numPhotosSharedOcclusions: Int32 = 0
    var _modelURL: String = String()
    var _ardkVersion: String = String()
    var _averageFramerate: Int32 = 0
    var _averageBatteryPerMin: Float = 0
    var _averageCpuUsage: Float = 0
    var _averageGpuUsage: Float = 0
    var _framerateSamples: [POGOProtos_Data_Telemetry_ArPhotoSession.FramerateSample] = []
    var _batterySamples: [POGOProtos_Data_Telemetry_ArPhotoSession.BatterySample] = []
    var _processorSamples: [POGOProtos_Data_Telemetry_ArPhotoSession.ProcessorSample] = []
    var _sessionStartToPlaneDetectionMs: Int32 = 0
    var _planeDetectionToUserInteractionMs: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _arType = source._arType
      _furthestStepCompleted = source._furthestStepCompleted
      _numPhotosTaken = source._numPhotosTaken
      _numPhotosShared = source._numPhotosShared
      _numPhotosTakenOcclusions = source._numPhotosTakenOcclusions
      _numOcclusionsEnabled = source._numOcclusionsEnabled
      _numOcclusionsDisabled = source._numOcclusionsDisabled
      _arContext = source._arContext
      _sessionLength = source._sessionLength
      _sessionLengthOcclusions = source._sessionLengthOcclusions
      _numPhotosSharedOcclusions = source._numPhotosSharedOcclusions
      _modelURL = source._modelURL
      _ardkVersion = source._ardkVersion
      _averageFramerate = source._averageFramerate
      _averageBatteryPerMin = source._averageBatteryPerMin
      _averageCpuUsage = source._averageCpuUsage
      _averageGpuUsage = source._averageGpuUsage
      _framerateSamples = source._framerateSamples
      _batterySamples = source._batterySamples
      _processorSamples = source._processorSamples
      _sessionStartToPlaneDetectionMs = source._sessionStartToPlaneDetectionMs
      _planeDetectionToUserInteractionMs = source._planeDetectionToUserInteractionMs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._arType) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._furthestStepCompleted) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._numPhotosTaken) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._numPhotosShared) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._numPhotosTakenOcclusions) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._numOcclusionsEnabled) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._numOcclusionsDisabled) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._arContext) }()
        case 9: try { try decoder.decodeSingularInt64Field(value: &_storage._sessionLength) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._sessionLengthOcclusions) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._numPhotosSharedOcclusions) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._modelURL) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._ardkVersion) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._averageFramerate) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._averageBatteryPerMin) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._averageCpuUsage) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._averageGpuUsage) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._framerateSamples) }()
        case 19: try { try decoder.decodeRepeatedMessageField(value: &_storage._batterySamples) }()
        case 20: try { try decoder.decodeRepeatedMessageField(value: &_storage._processorSamples) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._sessionStartToPlaneDetectionMs) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._planeDetectionToUserInteractionMs) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._arType != .unset {
        try visitor.visitSingularEnumField(value: _storage._arType, fieldNumber: 1)
      }
      if _storage._furthestStepCompleted != .unknown {
        try visitor.visitSingularEnumField(value: _storage._furthestStepCompleted, fieldNumber: 2)
      }
      if _storage._numPhotosTaken != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numPhotosTaken, fieldNumber: 3)
      }
      if _storage._numPhotosShared != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numPhotosShared, fieldNumber: 4)
      }
      if _storage._numPhotosTakenOcclusions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numPhotosTakenOcclusions, fieldNumber: 5)
      }
      if _storage._numOcclusionsEnabled != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numOcclusionsEnabled, fieldNumber: 6)
      }
      if _storage._numOcclusionsDisabled != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numOcclusionsDisabled, fieldNumber: 7)
      }
      if _storage._arContext != .none {
        try visitor.visitSingularEnumField(value: _storage._arContext, fieldNumber: 8)
      }
      if _storage._sessionLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sessionLength, fieldNumber: 9)
      }
      if _storage._sessionLengthOcclusions != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sessionLengthOcclusions, fieldNumber: 10)
      }
      if _storage._numPhotosSharedOcclusions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numPhotosSharedOcclusions, fieldNumber: 11)
      }
      if !_storage._modelURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._modelURL, fieldNumber: 12)
      }
      if !_storage._ardkVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ardkVersion, fieldNumber: 13)
      }
      if _storage._averageFramerate != 0 {
        try visitor.visitSingularInt32Field(value: _storage._averageFramerate, fieldNumber: 14)
      }
      if _storage._averageBatteryPerMin != 0 {
        try visitor.visitSingularFloatField(value: _storage._averageBatteryPerMin, fieldNumber: 15)
      }
      if _storage._averageCpuUsage != 0 {
        try visitor.visitSingularFloatField(value: _storage._averageCpuUsage, fieldNumber: 16)
      }
      if _storage._averageGpuUsage != 0 {
        try visitor.visitSingularFloatField(value: _storage._averageGpuUsage, fieldNumber: 17)
      }
      if !_storage._framerateSamples.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._framerateSamples, fieldNumber: 18)
      }
      if !_storage._batterySamples.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._batterySamples, fieldNumber: 19)
      }
      if !_storage._processorSamples.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._processorSamples, fieldNumber: 20)
      }
      if _storage._sessionStartToPlaneDetectionMs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sessionStartToPlaneDetectionMs, fieldNumber: 21)
      }
      if _storage._planeDetectionToUserInteractionMs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._planeDetectionToUserInteractionMs, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ArPhotoSession, rhs: POGOProtos_Data_Telemetry_ArPhotoSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._arType != rhs_storage._arType {return false}
        if _storage._furthestStepCompleted != rhs_storage._furthestStepCompleted {return false}
        if _storage._numPhotosTaken != rhs_storage._numPhotosTaken {return false}
        if _storage._numPhotosShared != rhs_storage._numPhotosShared {return false}
        if _storage._numPhotosTakenOcclusions != rhs_storage._numPhotosTakenOcclusions {return false}
        if _storage._numOcclusionsEnabled != rhs_storage._numOcclusionsEnabled {return false}
        if _storage._numOcclusionsDisabled != rhs_storage._numOcclusionsDisabled {return false}
        if _storage._arContext != rhs_storage._arContext {return false}
        if _storage._sessionLength != rhs_storage._sessionLength {return false}
        if _storage._sessionLengthOcclusions != rhs_storage._sessionLengthOcclusions {return false}
        if _storage._numPhotosSharedOcclusions != rhs_storage._numPhotosSharedOcclusions {return false}
        if _storage._modelURL != rhs_storage._modelURL {return false}
        if _storage._ardkVersion != rhs_storage._ardkVersion {return false}
        if _storage._averageFramerate != rhs_storage._averageFramerate {return false}
        if _storage._averageBatteryPerMin != rhs_storage._averageBatteryPerMin {return false}
        if _storage._averageCpuUsage != rhs_storage._averageCpuUsage {return false}
        if _storage._averageGpuUsage != rhs_storage._averageGpuUsage {return false}
        if _storage._framerateSamples != rhs_storage._framerateSamples {return false}
        if _storage._batterySamples != rhs_storage._batterySamples {return false}
        if _storage._processorSamples != rhs_storage._processorSamples {return false}
        if _storage._sessionStartToPlaneDetectionMs != rhs_storage._sessionStartToPlaneDetectionMs {return false}
        if _storage._planeDetectionToUserInteractionMs != rhs_storage._planeDetectionToUserInteractionMs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.BatteryStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNDETERMINED"),
    1: .same(proto: "CHARGING"),
    2: .same(proto: "DISCHARGING"),
    3: .same(proto: "NOT_CHARGING"),
    4: .same(proto: "FULL"),
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ArContext: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "AR_ENCOUNTER"),
    2: .same(proto: "AR_SNAPSHOT"),
    3: .same(proto: "SINGLEPLAYER_BUDDY"),
    4: .same(proto: "MULTIPLAYER_BUDDY"),
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ArType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "PLUS"),
    2: .same(proto: "CLASSIC"),
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.Step: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CAMERA_PERMISSION_GRANTED"),
    2: .same(proto: "ARPLUS_PLANE_FOUND"),
    3: .same(proto: "ARPLUS_POKEMON_PLACED"),
    4: .same(proto: "PHOTO_TAKEN"),
    5: .same(proto: "PHOTO_SHARED"),
  ]
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_ArPhotoSession.protoMessageName + ".ArConditions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "occlusions_enabled"),
    3: .standard(proto: "current_ar_step"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.occlusionsEnabled) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.currentArStep) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if self.occlusionsEnabled != false {
      try visitor.visitSingularBoolField(value: self.occlusionsEnabled, fieldNumber: 2)
    }
    if self.currentArStep != .unknown {
      try visitor.visitSingularEnumField(value: self.currentArStep, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions, rhs: POGOProtos_Data_Telemetry_ArPhotoSession.ArConditions) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.occlusionsEnabled != rhs.occlusionsEnabled {return false}
    if lhs.currentArStep != rhs.currentArStep {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.BatterySample: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_ArPhotoSession.protoMessageName + ".BatterySample"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "conditions"),
    2: .standard(proto: "battery_level"),
    3: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._conditions) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.batteryLevel) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._conditions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.batteryLevel != 0 {
      try visitor.visitSingularFloatField(value: self.batteryLevel, fieldNumber: 2)
    }
    if self.status != .undetermined {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ArPhotoSession.BatterySample, rhs: POGOProtos_Data_Telemetry_ArPhotoSession.BatterySample) -> Bool {
    if lhs._conditions != rhs._conditions {return false}
    if lhs.batteryLevel != rhs.batteryLevel {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.FramerateSample: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_ArPhotoSession.protoMessageName + ".FramerateSample"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "conditions"),
    2: .same(proto: "framerate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._conditions) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.framerate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._conditions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.framerate != 0 {
      try visitor.visitSingularInt32Field(value: self.framerate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ArPhotoSession.FramerateSample, rhs: POGOProtos_Data_Telemetry_ArPhotoSession.FramerateSample) -> Bool {
    if lhs._conditions != rhs._conditions {return false}
    if lhs.framerate != rhs.framerate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_ArPhotoSession.ProcessorSample: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_ArPhotoSession.protoMessageName + ".ProcessorSample"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "conditions"),
    2: .standard(proto: "cpu_usage"),
    3: .standard(proto: "gpu_usage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._conditions) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.cpuUsage) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.gpuUsage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._conditions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.cpuUsage != 0 {
      try visitor.visitSingularFloatField(value: self.cpuUsage, fieldNumber: 2)
    }
    if self.gpuUsage != 0 {
      try visitor.visitSingularFloatField(value: self.gpuUsage, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ArPhotoSession.ProcessorSample, rhs: POGOProtos_Data_Telemetry_ArPhotoSession.ProcessorSample) -> Bool {
    if lhs._conditions != rhs._conditions {return false}
    if lhs.cpuUsage != rhs.cpuUsage {return false}
    if lhs.gpuUsage != rhs.gpuUsage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
