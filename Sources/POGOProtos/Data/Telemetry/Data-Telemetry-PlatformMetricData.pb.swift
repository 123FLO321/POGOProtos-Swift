// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/PlatformMetricData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_PlatformMetricData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commonTelemetry: POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon {
    get {return _commonTelemetry ?? POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon()}
    set {_commonTelemetry = newValue}
  }
  /// Returns true if `commonTelemetry` has been explicitly set.
  public var hasCommonTelemetry: Bool {return self._commonTelemetry != nil}
  /// Clears the value of `commonTelemetry`. Subsequent reads from it will return its default value.
  public mutating func clearCommonTelemetry() {self._commonTelemetry = nil}

  public var datapointValue: POGOProtos_Data_Telemetry_PlatformMetricData.OneOf_DatapointValue? = nil

  public var longValue: Int64 {
    get {
      if case .longValue(let v)? = datapointValue {return v}
      return 0
    }
    set {datapointValue = .longValue(newValue)}
  }

  public var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = datapointValue {return v}
      return 0
    }
    set {datapointValue = .doubleValue(newValue)}
  }

  public var booleanValue: Bool {
    get {
      if case .booleanValue(let v)? = datapointValue {return v}
      return false
    }
    set {datapointValue = .booleanValue(newValue)}
  }

  public var distribution: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution {
    get {
      if case .distribution(let v)? = datapointValue {return v}
      return POGOProtos_Data_Telemetry_PlatformMetricData.Distribution()
    }
    set {datapointValue = .distribution(newValue)}
  }

  public var metricKind: POGOProtos_Data_Telemetry_PlatformMetricData.Kind = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_DatapointValue: Equatable {
    case longValue(Int64)
    case doubleValue(Double)
    case booleanValue(Bool)
    case distribution(POGOProtos_Data_Telemetry_PlatformMetricData.Distribution)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.OneOf_DatapointValue, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.OneOf_DatapointValue) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.longValue, .longValue): return {
        guard case .longValue(let l) = lhs, case .longValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.doubleValue, .doubleValue): return {
        guard case .doubleValue(let l) = lhs, case .doubleValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.booleanValue, .booleanValue): return {
        guard case .booleanValue(let l) = lhs, case .booleanValue(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.distribution, .distribution): return {
        guard case .distribution(let l) = lhs, case .distribution(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case gauge // = 1
    case delta // = 2
    case cumulative // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .gauge
      case 2: self = .delta
      case 3: self = .cumulative
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .gauge: return 1
      case .delta: return 2
      case .cumulative: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct TelemetryCommon {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var timestamp: Int64 = 0

    public var correlationVector: String = String()

    public var eventID: String = String()

    public var clientTimestampMs: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Distribution {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var count: Int64 = 0

    public var mean: Float = 0

    public var sumOfSquaredDeviation: Double = 0

    public var range: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range {
      get {return _range ?? POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range()}
      set {_range = newValue}
    }
    /// Returns true if `range` has been explicitly set.
    public var hasRange: Bool {return self._range != nil}
    /// Clears the value of `range`. Subsequent reads from it will return its default value.
    public mutating func clearRange() {self._range = nil}

    public var bucketOptions: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions {
      get {return _bucketOptions ?? POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions()}
      set {_bucketOptions = newValue}
    }
    /// Returns true if `bucketOptions` has been explicitly set.
    public var hasBucketOptions: Bool {return self._bucketOptions != nil}
    /// Clears the value of `bucketOptions`. Subsequent reads from it will return its default value.
    public mutating func clearBucketOptions() {self._bucketOptions = nil}

    public var bucketCounts: [Int64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct BucketOptions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var bucketType: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.OneOf_BucketType? = nil

      public var linearBuckets: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets {
        get {
          if case .linearBuckets(let v)? = bucketType {return v}
          return POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets()
        }
        set {bucketType = .linearBuckets(newValue)}
      }

      public var exponentialBuckets: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets {
        get {
          if case .exponentialBuckets(let v)? = bucketType {return v}
          return POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets()
        }
        set {bucketType = .exponentialBuckets(newValue)}
      }

      public var explicitBuckets: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets {
        get {
          if case .explicitBuckets(let v)? = bucketType {return v}
          return POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets()
        }
        set {bucketType = .explicitBuckets(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_BucketType: Equatable {
        case linearBuckets(POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets)
        case exponentialBuckets(POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets)
        case explicitBuckets(POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets)

      #if !swift(>=4.1)
        public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.OneOf_BucketType, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.OneOf_BucketType) -> Bool {
          // The use of inline closures is to circumvent an issue where the compiler
          // allocates stack space for every case branch when no optimizations are
          // enabled. https://github.com/apple/swift-protobuf/issues/1034
          switch (lhs, rhs) {
          case (.linearBuckets, .linearBuckets): return {
            guard case .linearBuckets(let l) = lhs, case .linearBuckets(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.exponentialBuckets, .exponentialBuckets): return {
            guard case .exponentialBuckets(let l) = lhs, case .exponentialBuckets(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          case (.explicitBuckets, .explicitBuckets): return {
            guard case .explicitBuckets(let l) = lhs, case .explicitBuckets(let r) = rhs else { preconditionFailure() }
            return l == r
          }()
          default: return false
          }
        }
      #endif
      }

      public struct ExplicitBuckets {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var bounds: [Int64] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct ExponentialBuckets {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var numFiniteBuckets: Int64 = 0

        public var growthFactor: Float = 0

        public var scale: Float = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct LinearBuckets {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var numFiniteBuckets: Int64 = 0

        public var width: Int64 = 0

        public var offset: Int64 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public struct Range {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var min: Int64 = 0

      public var max: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _range: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range? = nil
    fileprivate var _bucketOptions: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions? = nil
  }

  public init() {}

  fileprivate var _commonTelemetry: POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon? = nil
}

#if swift(>=4.2)

extension POGOProtos_Data_Telemetry_PlatformMetricData.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Data_Telemetry_PlatformMetricData.Kind] = [
    .unspecified,
    .gauge,
    .delta,
    .cumulative,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_PlatformMetricData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformMetricData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "common_telemetry"),
    2: .standard(proto: "long_value"),
    3: .standard(proto: "double_value"),
    4: .standard(proto: "boolean_value"),
    5: .same(proto: "distribution"),
    6: .standard(proto: "metric_kind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commonTelemetry) }()
      case 2: try {
        if self.datapointValue != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.datapointValue = .longValue(v)}
      }()
      case 3: try {
        if self.datapointValue != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.datapointValue = .doubleValue(v)}
      }()
      case 4: try {
        if self.datapointValue != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.datapointValue = .booleanValue(v)}
      }()
      case 5: try {
        var v: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution?
        if let current = self.datapointValue {
          try decoder.handleConflictingOneOf()
          if case .distribution(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.datapointValue = .distribution(v)}
      }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.metricKind) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._commonTelemetry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.datapointValue {
    case .longValue?: try {
      guard case .longValue(let v)? = self.datapointValue else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case .doubleValue?: try {
      guard case .doubleValue(let v)? = self.datapointValue else { preconditionFailure() }
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    }()
    case .booleanValue?: try {
      guard case .booleanValue(let v)? = self.datapointValue else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case .distribution?: try {
      guard case .distribution(let v)? = self.datapointValue else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if self.metricKind != .unspecified {
      try visitor.visitSingularEnumField(value: self.metricKind, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData, rhs: POGOProtos_Data_Telemetry_PlatformMetricData) -> Bool {
    if lhs._commonTelemetry != rhs._commonTelemetry {return false}
    if lhs.datapointValue != rhs.datapointValue {return false}
    if lhs.metricKind != rhs.metricKind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "GAUGE"),
    2: .same(proto: "DELTA"),
    3: .same(proto: "CUMULATIVE"),
  ]
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.protoMessageName + ".TelemetryCommon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "correlation_vector"),
    3: .standard(proto: "event_id"),
    4: .standard(proto: "client_timestamp_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.correlationVector) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.eventID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.clientTimestampMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.correlationVector.isEmpty {
      try visitor.visitSingularStringField(value: self.correlationVector, fieldNumber: 2)
    }
    if !self.eventID.isEmpty {
      try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 3)
    }
    if self.clientTimestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.clientTimestampMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.TelemetryCommon) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.correlationVector != rhs.correlationVector {return false}
    if lhs.eventID != rhs.eventID {return false}
    if lhs.clientTimestampMs != rhs.clientTimestampMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.protoMessageName + ".Distribution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "mean"),
    3: .standard(proto: "sum_of_squared_deviation"),
    4: .same(proto: "range"),
    5: .standard(proto: "bucket_options"),
    6: .standard(proto: "bucket_counts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.count) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.mean) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.sumOfSquaredDeviation) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._range) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._bucketOptions) }()
      case 6: try { try decoder.decodeRepeatedInt64Field(value: &self.bucketCounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 1)
    }
    if self.mean != 0 {
      try visitor.visitSingularFloatField(value: self.mean, fieldNumber: 2)
    }
    if self.sumOfSquaredDeviation != 0 {
      try visitor.visitSingularDoubleField(value: self.sumOfSquaredDeviation, fieldNumber: 3)
    }
    if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._bucketOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.bucketCounts.isEmpty {
      try visitor.visitPackedInt64Field(value: self.bucketCounts, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.mean != rhs.mean {return false}
    if lhs.sumOfSquaredDeviation != rhs.sumOfSquaredDeviation {return false}
    if lhs._range != rhs._range {return false}
    if lhs._bucketOptions != rhs._bucketOptions {return false}
    if lhs.bucketCounts != rhs.bucketCounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.protoMessageName + ".BucketOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "linear_buckets"),
    2: .standard(proto: "exponential_buckets"),
    3: .standard(proto: "explicit_buckets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets?
        if let current = self.bucketType {
          try decoder.handleConflictingOneOf()
          if case .linearBuckets(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.bucketType = .linearBuckets(v)}
      }()
      case 2: try {
        var v: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets?
        if let current = self.bucketType {
          try decoder.handleConflictingOneOf()
          if case .exponentialBuckets(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.bucketType = .exponentialBuckets(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets?
        if let current = self.bucketType {
          try decoder.handleConflictingOneOf()
          if case .explicitBuckets(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.bucketType = .explicitBuckets(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.bucketType {
    case .linearBuckets?: try {
      guard case .linearBuckets(let v)? = self.bucketType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .exponentialBuckets?: try {
      guard case .exponentialBuckets(let v)? = self.bucketType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .explicitBuckets?: try {
      guard case .explicitBuckets(let v)? = self.bucketType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions) -> Bool {
    if lhs.bucketType != rhs.bucketType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.protoMessageName + ".ExplicitBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.bounds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bounds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.bounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExplicitBuckets) -> Bool {
    if lhs.bounds != rhs.bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.protoMessageName + ".ExponentialBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .standard(proto: "growth_factor"),
    3: .same(proto: "scale"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.growthFactor) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.scale) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.growthFactor != 0 {
      try visitor.visitSingularFloatField(value: self.growthFactor, fieldNumber: 2)
    }
    if self.scale != 0 {
      try visitor.visitSingularFloatField(value: self.scale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.ExponentialBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.growthFactor != rhs.growthFactor {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.protoMessageName + ".LinearBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .same(proto: "width"),
    3: .same(proto: "offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.offset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 2)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.BucketOptions.LinearBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.width != rhs.width {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.protoMessageName + ".Range"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.min) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.max) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularInt64Field(value: self.min, fieldNumber: 1)
    }
    if self.max != 0 {
      try visitor.visitSingularInt64Field(value: self.max, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range, rhs: POGOProtos_Data_Telemetry_PlatformMetricData.Distribution.Range) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
