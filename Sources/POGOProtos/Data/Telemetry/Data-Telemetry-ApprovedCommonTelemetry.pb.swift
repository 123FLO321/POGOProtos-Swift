// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/ApprovedCommonTelemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_ApprovedCommonTelemetry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var telemetryData: OneOf_TelemetryData? {
    get {return _storage._telemetryData}
    set {_uniqueStorage()._telemetryData = newValue}
  }

  public var bootTime: POGOProtos_Data_Telemetry_CommonTelemetryBootTime {
    get {
      if case .bootTime(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CommonTelemetryBootTime()
    }
    set {_uniqueStorage()._telemetryData = .bootTime(newValue)}
  }

  public var shopClick: POGOProtos_Data_Telemetry_CommonTelemetryShopClick {
    get {
      if case .shopClick(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CommonTelemetryShopClick()
    }
    set {_uniqueStorage()._telemetryData = .shopClick(newValue)}
  }

  public var shopView: POGOProtos_Data_Telemetry_CommonTelemetryShopView {
    get {
      if case .shopView(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CommonTelemetryShopView()
    }
    set {_uniqueStorage()._telemetryData = .shopView(newValue)}
  }

  public var poiSubmissionTelemetry: POGOProtos_Data_Telemetry_PoiSubmissionTelemetry {
    get {
      if case .poiSubmissionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PoiSubmissionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .poiSubmissionTelemetry(newValue)}
  }

  public var poiSubmissionPhotoUploadErrorTelemetry: POGOProtos_Data_Telemetry_PoiSubmissionPhotoUploadErrorTelemetry {
    get {
      if case .poiSubmissionPhotoUploadErrorTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PoiSubmissionPhotoUploadErrorTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .poiSubmissionPhotoUploadErrorTelemetry(newValue)}
  }

  public var logIn: POGOProtos_Data_Telemetry_CommonTelemetryLogIn {
    get {
      if case .logIn(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CommonTelemetryLogIn()
    }
    set {_uniqueStorage()._telemetryData = .logIn(newValue)}
  }

  public var serverData: POGOProtos_Data_Telemetry_ServerRecordMetadata {
    get {return _storage._serverData ?? POGOProtos_Data_Telemetry_ServerRecordMetadata()}
    set {_uniqueStorage()._serverData = newValue}
  }
  /// Returns true if `serverData` has been explicitly set.
  public var hasServerData: Bool {return _storage._serverData != nil}
  /// Clears the value of `serverData`. Subsequent reads from it will return its default value.
  public mutating func clearServerData() {_uniqueStorage()._serverData = nil}

  public var commonFilters: POGOProtos_Data_Analytics_ClientTelemetryCommonFilter {
    get {return _storage._commonFilters ?? POGOProtos_Data_Analytics_ClientTelemetryCommonFilter()}
    set {_uniqueStorage()._commonFilters = newValue}
  }
  /// Returns true if `commonFilters` has been explicitly set.
  public var hasCommonFilters: Bool {return _storage._commonFilters != nil}
  /// Clears the value of `commonFilters`. Subsequent reads from it will return its default value.
  public mutating func clearCommonFilters() {_uniqueStorage()._commonFilters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TelemetryData: Equatable {
    case bootTime(POGOProtos_Data_Telemetry_CommonTelemetryBootTime)
    case shopClick(POGOProtos_Data_Telemetry_CommonTelemetryShopClick)
    case shopView(POGOProtos_Data_Telemetry_CommonTelemetryShopView)
    case poiSubmissionTelemetry(POGOProtos_Data_Telemetry_PoiSubmissionTelemetry)
    case poiSubmissionPhotoUploadErrorTelemetry(POGOProtos_Data_Telemetry_PoiSubmissionPhotoUploadErrorTelemetry)
    case logIn(POGOProtos_Data_Telemetry_CommonTelemetryLogIn)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Telemetry_ApprovedCommonTelemetry.OneOf_TelemetryData, rhs: POGOProtos_Data_Telemetry_ApprovedCommonTelemetry.OneOf_TelemetryData) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.bootTime, .bootTime): return {
        guard case .bootTime(let l) = lhs, case .bootTime(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shopClick, .shopClick): return {
        guard case .shopClick(let l) = lhs, case .shopClick(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shopView, .shopView): return {
        guard case .shopView(let l) = lhs, case .shopView(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.poiSubmissionTelemetry, .poiSubmissionTelemetry): return {
        guard case .poiSubmissionTelemetry(let l) = lhs, case .poiSubmissionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.poiSubmissionPhotoUploadErrorTelemetry, .poiSubmissionPhotoUploadErrorTelemetry): return {
        guard case .poiSubmissionPhotoUploadErrorTelemetry(let l) = lhs, case .poiSubmissionPhotoUploadErrorTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.logIn, .logIn): return {
        guard case .logIn(let l) = lhs, case .logIn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_ApprovedCommonTelemetry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApprovedCommonTelemetry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "boot_time"),
    2: .standard(proto: "shop_click"),
    3: .standard(proto: "shop_view"),
    4: .standard(proto: "poi_submission_telemetry"),
    5: .standard(proto: "poi_submission_photo_upload_error_telemetry"),
    6: .standard(proto: "log_in"),
    7: .standard(proto: "server_data"),
    8: .standard(proto: "common_filters"),
  ]

  fileprivate class _StorageClass {
    var _telemetryData: POGOProtos_Data_Telemetry_ApprovedCommonTelemetry.OneOf_TelemetryData?
    var _serverData: POGOProtos_Data_Telemetry_ServerRecordMetadata? = nil
    var _commonFilters: POGOProtos_Data_Analytics_ClientTelemetryCommonFilter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _telemetryData = source._telemetryData
      _serverData = source._serverData
      _commonFilters = source._commonFilters
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: POGOProtos_Data_Telemetry_CommonTelemetryBootTime?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .bootTime(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .bootTime(v)}
        }()
        case 2: try {
          var v: POGOProtos_Data_Telemetry_CommonTelemetryShopClick?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shopClick(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shopClick(v)}
        }()
        case 3: try {
          var v: POGOProtos_Data_Telemetry_CommonTelemetryShopView?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shopView(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shopView(v)}
        }()
        case 4: try {
          var v: POGOProtos_Data_Telemetry_PoiSubmissionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .poiSubmissionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .poiSubmissionTelemetry(v)}
        }()
        case 5: try {
          var v: POGOProtos_Data_Telemetry_PoiSubmissionPhotoUploadErrorTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .poiSubmissionPhotoUploadErrorTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .poiSubmissionPhotoUploadErrorTelemetry(v)}
        }()
        case 6: try {
          var v: POGOProtos_Data_Telemetry_CommonTelemetryLogIn?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .logIn(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .logIn(v)}
        }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._serverData) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._commonFilters) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._telemetryData {
      case .bootTime?: try {
        guard case .bootTime(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .shopClick?: try {
        guard case .shopClick(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .shopView?: try {
        guard case .shopView(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .poiSubmissionTelemetry?: try {
        guard case .poiSubmissionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .poiSubmissionPhotoUploadErrorTelemetry?: try {
        guard case .poiSubmissionPhotoUploadErrorTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .logIn?: try {
        guard case .logIn(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case nil: break
      }
      if let v = _storage._serverData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._commonFilters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ApprovedCommonTelemetry, rhs: POGOProtos_Data_Telemetry_ApprovedCommonTelemetry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._telemetryData != rhs_storage._telemetryData {return false}
        if _storage._serverData != rhs_storage._serverData {return false}
        if _storage._commonFilters != rhs_storage._commonFilters {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
