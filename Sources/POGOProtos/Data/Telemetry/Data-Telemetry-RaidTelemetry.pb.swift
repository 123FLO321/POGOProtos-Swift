// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/RaidTelemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_RaidTelemetry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var raidTelemetryID: POGOProtos_Enums_RaidTelemetryIds = .undefinedRaidEvent

  public var bundleVersion: String = String()

  public var timeSinceEnterRaid: Float = 0

  public var timeSinceLastRaidTelemetry: Float = 0

  public var raidLevel: Int32 = 0

  public var privateLobby: Bool = false

  public var ticketItem: String = String()

  public var numPlayersInLobby: Int32 = 0

  public var battlePartyNumber: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_RaidTelemetry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RaidTelemetry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "raid_telemetry_id"),
    2: .standard(proto: "bundle_version"),
    3: .standard(proto: "time_since_enter_raid"),
    4: .standard(proto: "time_since_last_raid_telemetry"),
    5: .standard(proto: "raid_level"),
    6: .standard(proto: "private_lobby"),
    7: .standard(proto: "ticket_item"),
    8: .standard(proto: "num_players_in_lobby"),
    9: .standard(proto: "battle_party_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.raidTelemetryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bundleVersion) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.timeSinceEnterRaid) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.timeSinceLastRaidTelemetry) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.raidLevel) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.privateLobby) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.ticketItem) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.numPlayersInLobby) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.battlePartyNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.raidTelemetryID != .undefinedRaidEvent {
      try visitor.visitSingularEnumField(value: self.raidTelemetryID, fieldNumber: 1)
    }
    if !self.bundleVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleVersion, fieldNumber: 2)
    }
    if self.timeSinceEnterRaid != 0 {
      try visitor.visitSingularFloatField(value: self.timeSinceEnterRaid, fieldNumber: 3)
    }
    if self.timeSinceLastRaidTelemetry != 0 {
      try visitor.visitSingularFloatField(value: self.timeSinceLastRaidTelemetry, fieldNumber: 4)
    }
    if self.raidLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.raidLevel, fieldNumber: 5)
    }
    if self.privateLobby != false {
      try visitor.visitSingularBoolField(value: self.privateLobby, fieldNumber: 6)
    }
    if !self.ticketItem.isEmpty {
      try visitor.visitSingularStringField(value: self.ticketItem, fieldNumber: 7)
    }
    if self.numPlayersInLobby != 0 {
      try visitor.visitSingularInt32Field(value: self.numPlayersInLobby, fieldNumber: 8)
    }
    if self.battlePartyNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.battlePartyNumber, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_RaidTelemetry, rhs: POGOProtos_Data_Telemetry_RaidTelemetry) -> Bool {
    if lhs.raidTelemetryID != rhs.raidTelemetryID {return false}
    if lhs.bundleVersion != rhs.bundleVersion {return false}
    if lhs.timeSinceEnterRaid != rhs.timeSinceEnterRaid {return false}
    if lhs.timeSinceLastRaidTelemetry != rhs.timeSinceLastRaidTelemetry {return false}
    if lhs.raidLevel != rhs.raidLevel {return false}
    if lhs.privateLobby != rhs.privateLobby {return false}
    if lhs.ticketItem != rhs.ticketItem {return false}
    if lhs.numPlayersInLobby != rhs.numPlayersInLobby {return false}
    if lhs.battlePartyNumber != rhs.battlePartyNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
