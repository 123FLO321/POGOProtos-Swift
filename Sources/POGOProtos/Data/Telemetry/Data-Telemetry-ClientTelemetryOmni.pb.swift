// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/ClientTelemetryOmni.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_ClientTelemetryOmni {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var telemetryData: OneOf_TelemetryData? {
    get {return _storage._telemetryData}
    set {_uniqueStorage()._telemetryData = newValue}
  }

  public var bootTime: POGOProtos_Data_Telemetry_BootTime {
    get {
      if case .bootTime(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BootTime()
    }
    set {_uniqueStorage()._telemetryData = .bootTime(newValue)}
  }

  public var frameRate: POGOProtos_Data_Telemetry_FrameRate {
    get {
      if case .frameRate(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_FrameRate()
    }
    set {_uniqueStorage()._telemetryData = .frameRate(newValue)}
  }

  public var genericClickTelemetry: POGOProtos_Data_Telemetry_GenericClickTelemetry {
    get {
      if case .genericClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_GenericClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .genericClickTelemetry(newValue)}
  }

  public var mapEventsTelemetry: POGOProtos_Data_Telemetry_MapEventsTelemetry {
    get {
      if case .mapEventsTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_MapEventsTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .mapEventsTelemetry(newValue)}
  }

  public var spinPokestopTelemetry: POGOProtos_Data_Telemetry_SpinPokestopTelemetry {
    get {
      if case .spinPokestopTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_SpinPokestopTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .spinPokestopTelemetry(newValue)}
  }

  public var profilePageTelemetry: POGOProtos_Data_Telemetry_ProfilePageTelemetry {
    get {
      if case .profilePageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ProfilePageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .profilePageTelemetry(newValue)}
  }

  public var shoppingPageTelemetry: POGOProtos_Data_Telemetry_ShoppingPageTelemetry {
    get {
      if case .shoppingPageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ShoppingPageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .shoppingPageTelemetry(newValue)}
  }

  public var encounterPokemonTelemetry: POGOProtos_Data_Telemetry_EncounterPokemonTelemetry {
    get {
      if case .encounterPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_EncounterPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .encounterPokemonTelemetry(newValue)}
  }

  public var catchPokemonTelemetry: POGOProtos_Data_Telemetry_CatchPokemonTelemetry {
    get {
      if case .catchPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CatchPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .catchPokemonTelemetry(newValue)}
  }

  public var deployPokemonTelemetry: POGOProtos_Data_Telemetry_DeployPokemonTelemetry {
    get {
      if case .deployPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeployPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deployPokemonTelemetry(newValue)}
  }

  public var feedPokemonTelemetry: POGOProtos_Data_Telemetry_FeedPokemonTelemetry {
    get {
      if case .feedPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_FeedPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .feedPokemonTelemetry(newValue)}
  }

  public var evolvePokemonTelemetry: POGOProtos_Data_Telemetry_EvolvePokemonTelemetry {
    get {
      if case .evolvePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_EvolvePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .evolvePokemonTelemetry(newValue)}
  }

  public var releasePokemonTelemetry: POGOProtos_Data_Telemetry_ReleasePokemonTelemetry {
    get {
      if case .releasePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ReleasePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .releasePokemonTelemetry(newValue)}
  }

  public var nicknamePokemonTelemetry: POGOProtos_Data_Telemetry_NicknamePokemonTelemetry {
    get {
      if case .nicknamePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_NicknamePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .nicknamePokemonTelemetry(newValue)}
  }

  public var newsPageTelemetry: POGOProtos_Data_Telemetry_NewsPageTelemetry {
    get {
      if case .newsPageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_NewsPageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .newsPageTelemetry(newValue)}
  }

  public var itemTelemetry: POGOProtos_Data_Telemetry_ItemTelemetry {
    get {
      if case .itemTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ItemTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .itemTelemetry(newValue)}
  }

  public var battlePartyTelemetry: POGOProtos_Data_Telemetry_BattlePartyTelemetry {
    get {
      if case .battlePartyTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BattlePartyTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .battlePartyTelemetry(newValue)}
  }

  public var passcodeRedeemTelemetry: POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry {
    get {
      if case .passcodeRedeemTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .passcodeRedeemTelemetry(newValue)}
  }

  public var linkLoginTelemetry: POGOProtos_Data_Telemetry_LinkLoginTelemetry {
    get {
      if case .linkLoginTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LinkLoginTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .linkLoginTelemetry(newValue)}
  }

  public var raidTelemetry: POGOProtos_Data_Telemetry_RaidTelemetry {
    get {
      if case .raidTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RaidTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .raidTelemetry(newValue)}
  }

  public var pushNotificationTelemetry: POGOProtos_Data_Telemetry_PushNotificationTelemetry {
    get {
      if case .pushNotificationTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PushNotificationTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pushNotificationTelemetry(newValue)}
  }

  public var avatarCustomizationTelemetry: POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry {
    get {
      if case .avatarCustomizationTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .avatarCustomizationTelemetry(newValue)}
  }

  public var readPointOfInterestDescriptionTelemetry: POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry {
    get {
      if case .readPointOfInterestDescriptionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .readPointOfInterestDescriptionTelemetry(newValue)}
  }

  public var webTelemetry: POGOProtos_Data_Telemetry_WebTelemetry {
    get {
      if case .webTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_WebTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .webTelemetry(newValue)}
  }

  public var changeArTelemetry: POGOProtos_Data_Telemetry_ChangeArTelemetry {
    get {
      if case .changeArTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ChangeArTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .changeArTelemetry(newValue)}
  }

  public var weatherDetailClickTelemetry: POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry {
    get {
      if case .weatherDetailClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .weatherDetailClickTelemetry(newValue)}
  }

  public var userIssueWeatherReport: POGOProtos_Data_Player_UserIssueWeatherReport {
    get {
      if case .userIssueWeatherReport(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Player_UserIssueWeatherReport()
    }
    set {_uniqueStorage()._telemetryData = .userIssueWeatherReport(newValue)}
  }

  public var pokemonInventoryTelemetry: POGOProtos_Data_Telemetry_PokemonInventoryTelemetry {
    get {
      if case .pokemonInventoryTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonInventoryTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonInventoryTelemetry(newValue)}
  }

  public var socialTelemetry: POGOProtos_Data_Telemetry_SocialTelemetry {
    get {
      if case .socialTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_SocialTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .socialTelemetry(newValue)}
  }

  public var checkEncounterInfoTelemetry: POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry {
    get {
      if case .checkEncounterInfoTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .checkEncounterInfoTelemetry(newValue)}
  }

  public var pokemonGoPlusTelemetry: POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry {
    get {
      if case .pokemonGoPlusTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonGoPlusTelemetry(newValue)}
  }

  public var rpcTimingTelemetry: POGOProtos_Data_Telemetry_RpcResponseTelemetry {
    get {
      if case .rpcTimingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RpcResponseTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .rpcTimingTelemetry(newValue)}
  }

  public var socialGiftCountTelemetry: POGOProtos_Settings_SocialGiftCountTelemetry {
    get {
      if case .socialGiftCountTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Settings_SocialGiftCountTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .socialGiftCountTelemetry(newValue)}
  }

  public var assetBundleTelemetry: POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry {
    get {
      if case .assetBundleTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetBundleTelemetry(newValue)}
  }

  public var assetPoiDownloadTelemetry: POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry {
    get {
      if case .assetPoiDownloadTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetPoiDownloadTelemetry(newValue)}
  }

  public var assetStreamDownloadTelemetry: POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry {
    get {
      if case .assetStreamDownloadTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetStreamDownloadTelemetry(newValue)}
  }

  public var assetStreamCacheCulledTelemetry: POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry {
    get {
      if case .assetStreamCacheCulledTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetStreamCacheCulledTelemetry(newValue)}
  }

  public var rpcSocketTimingTelemetry: POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry {
    get {
      if case .rpcSocketTimingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .rpcSocketTimingTelemetry(newValue)}
  }

  public var permissionsFlow: POGOProtos_Data_Telemetry_PermissionsFlowTelemetry {
    get {
      if case .permissionsFlow(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PermissionsFlowTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .permissionsFlow(newValue)}
  }

  public var deviceServiceToggle: POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry {
    get {
      if case .deviceServiceToggle(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deviceServiceToggle(newValue)}
  }

  public var bootTelemetry: POGOProtos_Data_Telemetry_BootTelemetry {
    get {
      if case .bootTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BootTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .bootTelemetry(newValue)}
  }

  public var userAttributes: POGOProtos_Settings_Master_Item_UserAttributes {
    get {
      if case .userAttributes(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Settings_Master_Item_UserAttributes()
    }
    set {_uniqueStorage()._telemetryData = .userAttributes(newValue)}
  }

  public var onboardingTelemetry: POGOProtos_Data_Telemetry_OnboardingTelemetry {
    get {
      if case .onboardingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_OnboardingTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .onboardingTelemetry(newValue)}
  }

  public var loginActionTelemetry: POGOProtos_Data_Telemetry_LoginActionTelemetry {
    get {
      if case .loginActionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LoginActionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .loginActionTelemetry(newValue)}
  }

  public var arPhotoSessionTelemetry: POGOProtos_Data_Telemetry_ArPhotoSession {
    get {
      if case .arPhotoSessionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ArPhotoSession()
    }
    set {_uniqueStorage()._telemetryData = .arPhotoSessionTelemetry(newValue)}
  }

  public var invasionTelemetry: POGOProtos_Data_Telemetry_InvasionTelemetry {
    get {
      if case .invasionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_InvasionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .invasionTelemetry(newValue)}
  }

  public var combatMinigameTelemetry: POGOProtos_Data_Telemetry_CombatMinigameTelemetry {
    get {
      if case .combatMinigameTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CombatMinigameTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .combatMinigameTelemetry(newValue)}
  }

  public var leavePointOfInterestTelemetry: POGOProtos_Data_Telemetry_LeavePointOfInterestTelemetry {
    get {
      if case .leavePointOfInterestTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LeavePointOfInterestTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .leavePointOfInterestTelemetry(newValue)}
  }

  public var viewPointOfInterestImageTelemetry: POGOProtos_Data_Telemetry_ViewPointOfInterestImageTelemetry {
    get {
      if case .viewPointOfInterestImageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ViewPointOfInterestImageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .viewPointOfInterestImageTelemetry(newValue)}
  }

  public var combatHubEntranceTelemetry: POGOProtos_Data_Telemetry_CombatHubEntranceTelemetry {
    get {
      if case .combatHubEntranceTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CombatHubEntranceTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .combatHubEntranceTelemetry(newValue)}
  }

  public var leaveInteractionRangeTelemetry: POGOProtos_Data_Telemetry_LeaveInteractionRangeTelemetry {
    get {
      if case .leaveInteractionRangeTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LeaveInteractionRangeTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .leaveInteractionRangeTelemetry(newValue)}
  }

  public var shoppingPageClickTelemetry: POGOProtos_Data_Telemetry_ShoppingPageClickTelemetry {
    get {
      if case .shoppingPageClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ShoppingPageClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .shoppingPageClickTelemetry(newValue)}
  }

  public var shoppingPageScrollTelemetry: POGOProtos_Data_Telemetry_ShoppingPageScrollTelemetry {
    get {
      if case .shoppingPageScrollTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ShoppingPageScrollTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .shoppingPageScrollTelemetry(newValue)}
  }

  public var deviceSpecificationsTelemetry: POGOProtos_Data_Telemetry_DeviceSpecificationsTelemetry {
    get {
      if case .deviceSpecificationsTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeviceSpecificationsTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deviceSpecificationsTelemetry(newValue)}
  }

  public var screenResolutionTelemetry: POGOProtos_Data_Telemetry_ScreenResolutionTelemetry {
    get {
      if case .screenResolutionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ScreenResolutionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .screenResolutionTelemetry(newValue)}
  }

  public var arBuddyMultiplayerSessionTelemetry: POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry {
    get {
      if case .arBuddyMultiplayerSessionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .arBuddyMultiplayerSessionTelemetry(newValue)}
  }

  public var buddyMultiplayerConnectionFailedTelemetry: POGOProtos_Data_Buddy_BuddyMultiplayerConnectionFailed {
    get {
      if case .buddyMultiplayerConnectionFailedTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Buddy_BuddyMultiplayerConnectionFailed()
    }
    set {_uniqueStorage()._telemetryData = .buddyMultiplayerConnectionFailedTelemetry(newValue)}
  }

  public var buddyMultiplayerConnectionSucceededTelemetry: POGOProtos_Data_Buddy_BuddyMultiplayerConnectionSucceeded {
    get {
      if case .buddyMultiplayerConnectionSucceededTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Buddy_BuddyMultiplayerConnectionSucceeded()
    }
    set {_uniqueStorage()._telemetryData = .buddyMultiplayerConnectionSucceededTelemetry(newValue)}
  }

  public var buddyMultiplayerTimeToGetSessionTelemetry: POGOProtos_Data_Buddy_BuddyMultiplayerTimeToGetSession {
    get {
      if case .buddyMultiplayerTimeToGetSessionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Buddy_BuddyMultiplayerTimeToGetSession()
    }
    set {_uniqueStorage()._telemetryData = .buddyMultiplayerTimeToGetSessionTelemetry(newValue)}
  }

  public var playerHudNotificationClickTelemetry: POGOProtos_Data_Telemetry_PlayerHudNotificationClickTelemetry {
    get {
      if case .playerHudNotificationClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PlayerHudNotificationClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .playerHudNotificationClickTelemetry(newValue)}
  }

  public var monodepthDownloadTelemetry: POGOProtos_Data_Telemetry_MonodepthDownloadTelemetry {
    get {
      if case .monodepthDownloadTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_MonodepthDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .monodepthDownloadTelemetry(newValue)}
  }

  public var arMappingTelemetry: POGOProtos_Data_Telemetry_ArMappingTelemetry {
    get {
      if case .arMappingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ArMappingTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .arMappingTelemetry(newValue)}
  }

  public var remoteRaidTelemetry: POGOProtos_Data_Telemetry_RemoteRaidTelemetry {
    get {
      if case .remoteRaidTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RemoteRaidTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .remoteRaidTelemetry(newValue)}
  }

  public var deviceOsTelemetry: POGOProtos_Data_Telemetry_DeviceOSTelemetry {
    get {
      if case .deviceOsTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeviceOSTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deviceOsTelemetry(newValue)}
  }

  public var nianticProfileTelemetry: POGOProtos_Data_Telemetry_NianticProfileTelemetry {
    get {
      if case .nianticProfileTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_NianticProfileTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .nianticProfileTelemetry(newValue)}
  }

  public var changeOnlineStatusTelemetry: POGOProtos_Data_Telemetry_ChangeOnlineStatusTelemetry {
    get {
      if case .changeOnlineStatusTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ChangeOnlineStatusTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .changeOnlineStatusTelemetry(newValue)}
  }

  public var deepLinkingTelemetry: POGOProtos_Data_Telemetry_DeepLinkingTelemetry {
    get {
      if case .deepLinkingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeepLinkingTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deepLinkingTelemetry(newValue)}
  }

  public var arMappingSessionTelemetry: POGOProtos_Data_Telemetry_ArMappingSessionTelemetry {
    get {
      if case .arMappingSessionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ArMappingSessionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .arMappingSessionTelemetry(newValue)}
  }

  public var pokemonHomeTelemetry: POGOProtos_Data_Telemetry_PokemonHomeTelemetry {
    get {
      if case .pokemonHomeTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonHomeTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonHomeTelemetry(newValue)}
  }

  public var pokemonSearchTelemetry: POGOProtos_Data_Telemetry_PokemonSearchTelemetry {
    get {
      if case .pokemonSearchTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonSearchTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonSearchTelemetry(newValue)}
  }

  public var serverData: POGOProtos_Data_Telemetry_PlatformServerData {
    get {return _storage._serverData ?? POGOProtos_Data_Telemetry_PlatformServerData()}
    set {_uniqueStorage()._serverData = newValue}
  }
  /// Returns true if `serverData` has been explicitly set.
  public var hasServerData: Bool {return _storage._serverData != nil}
  /// Clears the value of `serverData`. Subsequent reads from it will return its default value.
  public mutating func clearServerData() {_uniqueStorage()._serverData = nil}

  public var commonFilters: POGOProtos_Data_Platform_PlatformCommonFilter {
    get {return _storage._commonFilters ?? POGOProtos_Data_Platform_PlatformCommonFilter()}
    set {_uniqueStorage()._commonFilters = newValue}
  }
  /// Returns true if `commonFilters` has been explicitly set.
  public var hasCommonFilters: Bool {return _storage._commonFilters != nil}
  /// Clears the value of `commonFilters`. Subsequent reads from it will return its default value.
  public mutating func clearCommonFilters() {_uniqueStorage()._commonFilters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TelemetryData: Equatable {
    case bootTime(POGOProtos_Data_Telemetry_BootTime)
    case frameRate(POGOProtos_Data_Telemetry_FrameRate)
    case genericClickTelemetry(POGOProtos_Data_Telemetry_GenericClickTelemetry)
    case mapEventsTelemetry(POGOProtos_Data_Telemetry_MapEventsTelemetry)
    case spinPokestopTelemetry(POGOProtos_Data_Telemetry_SpinPokestopTelemetry)
    case profilePageTelemetry(POGOProtos_Data_Telemetry_ProfilePageTelemetry)
    case shoppingPageTelemetry(POGOProtos_Data_Telemetry_ShoppingPageTelemetry)
    case encounterPokemonTelemetry(POGOProtos_Data_Telemetry_EncounterPokemonTelemetry)
    case catchPokemonTelemetry(POGOProtos_Data_Telemetry_CatchPokemonTelemetry)
    case deployPokemonTelemetry(POGOProtos_Data_Telemetry_DeployPokemonTelemetry)
    case feedPokemonTelemetry(POGOProtos_Data_Telemetry_FeedPokemonTelemetry)
    case evolvePokemonTelemetry(POGOProtos_Data_Telemetry_EvolvePokemonTelemetry)
    case releasePokemonTelemetry(POGOProtos_Data_Telemetry_ReleasePokemonTelemetry)
    case nicknamePokemonTelemetry(POGOProtos_Data_Telemetry_NicknamePokemonTelemetry)
    case newsPageTelemetry(POGOProtos_Data_Telemetry_NewsPageTelemetry)
    case itemTelemetry(POGOProtos_Data_Telemetry_ItemTelemetry)
    case battlePartyTelemetry(POGOProtos_Data_Telemetry_BattlePartyTelemetry)
    case passcodeRedeemTelemetry(POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry)
    case linkLoginTelemetry(POGOProtos_Data_Telemetry_LinkLoginTelemetry)
    case raidTelemetry(POGOProtos_Data_Telemetry_RaidTelemetry)
    case pushNotificationTelemetry(POGOProtos_Data_Telemetry_PushNotificationTelemetry)
    case avatarCustomizationTelemetry(POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry)
    case readPointOfInterestDescriptionTelemetry(POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry)
    case webTelemetry(POGOProtos_Data_Telemetry_WebTelemetry)
    case changeArTelemetry(POGOProtos_Data_Telemetry_ChangeArTelemetry)
    case weatherDetailClickTelemetry(POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry)
    case userIssueWeatherReport(POGOProtos_Data_Player_UserIssueWeatherReport)
    case pokemonInventoryTelemetry(POGOProtos_Data_Telemetry_PokemonInventoryTelemetry)
    case socialTelemetry(POGOProtos_Data_Telemetry_SocialTelemetry)
    case checkEncounterInfoTelemetry(POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry)
    case pokemonGoPlusTelemetry(POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry)
    case rpcTimingTelemetry(POGOProtos_Data_Telemetry_RpcResponseTelemetry)
    case socialGiftCountTelemetry(POGOProtos_Settings_SocialGiftCountTelemetry)
    case assetBundleTelemetry(POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry)
    case assetPoiDownloadTelemetry(POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry)
    case assetStreamDownloadTelemetry(POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry)
    case assetStreamCacheCulledTelemetry(POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry)
    case rpcSocketTimingTelemetry(POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry)
    case permissionsFlow(POGOProtos_Data_Telemetry_PermissionsFlowTelemetry)
    case deviceServiceToggle(POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry)
    case bootTelemetry(POGOProtos_Data_Telemetry_BootTelemetry)
    case userAttributes(POGOProtos_Settings_Master_Item_UserAttributes)
    case onboardingTelemetry(POGOProtos_Data_Telemetry_OnboardingTelemetry)
    case loginActionTelemetry(POGOProtos_Data_Telemetry_LoginActionTelemetry)
    case arPhotoSessionTelemetry(POGOProtos_Data_Telemetry_ArPhotoSession)
    case invasionTelemetry(POGOProtos_Data_Telemetry_InvasionTelemetry)
    case combatMinigameTelemetry(POGOProtos_Data_Telemetry_CombatMinigameTelemetry)
    case leavePointOfInterestTelemetry(POGOProtos_Data_Telemetry_LeavePointOfInterestTelemetry)
    case viewPointOfInterestImageTelemetry(POGOProtos_Data_Telemetry_ViewPointOfInterestImageTelemetry)
    case combatHubEntranceTelemetry(POGOProtos_Data_Telemetry_CombatHubEntranceTelemetry)
    case leaveInteractionRangeTelemetry(POGOProtos_Data_Telemetry_LeaveInteractionRangeTelemetry)
    case shoppingPageClickTelemetry(POGOProtos_Data_Telemetry_ShoppingPageClickTelemetry)
    case shoppingPageScrollTelemetry(POGOProtos_Data_Telemetry_ShoppingPageScrollTelemetry)
    case deviceSpecificationsTelemetry(POGOProtos_Data_Telemetry_DeviceSpecificationsTelemetry)
    case screenResolutionTelemetry(POGOProtos_Data_Telemetry_ScreenResolutionTelemetry)
    case arBuddyMultiplayerSessionTelemetry(POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry)
    case buddyMultiplayerConnectionFailedTelemetry(POGOProtos_Data_Buddy_BuddyMultiplayerConnectionFailed)
    case buddyMultiplayerConnectionSucceededTelemetry(POGOProtos_Data_Buddy_BuddyMultiplayerConnectionSucceeded)
    case buddyMultiplayerTimeToGetSessionTelemetry(POGOProtos_Data_Buddy_BuddyMultiplayerTimeToGetSession)
    case playerHudNotificationClickTelemetry(POGOProtos_Data_Telemetry_PlayerHudNotificationClickTelemetry)
    case monodepthDownloadTelemetry(POGOProtos_Data_Telemetry_MonodepthDownloadTelemetry)
    case arMappingTelemetry(POGOProtos_Data_Telemetry_ArMappingTelemetry)
    case remoteRaidTelemetry(POGOProtos_Data_Telemetry_RemoteRaidTelemetry)
    case deviceOsTelemetry(POGOProtos_Data_Telemetry_DeviceOSTelemetry)
    case nianticProfileTelemetry(POGOProtos_Data_Telemetry_NianticProfileTelemetry)
    case changeOnlineStatusTelemetry(POGOProtos_Data_Telemetry_ChangeOnlineStatusTelemetry)
    case deepLinkingTelemetry(POGOProtos_Data_Telemetry_DeepLinkingTelemetry)
    case arMappingSessionTelemetry(POGOProtos_Data_Telemetry_ArMappingSessionTelemetry)
    case pokemonHomeTelemetry(POGOProtos_Data_Telemetry_PokemonHomeTelemetry)
    case pokemonSearchTelemetry(POGOProtos_Data_Telemetry_PokemonSearchTelemetry)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData, rhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.bootTime, .bootTime): return {
        guard case .bootTime(let l) = lhs, case .bootTime(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.frameRate, .frameRate): return {
        guard case .frameRate(let l) = lhs, case .frameRate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.genericClickTelemetry, .genericClickTelemetry): return {
        guard case .genericClickTelemetry(let l) = lhs, case .genericClickTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.mapEventsTelemetry, .mapEventsTelemetry): return {
        guard case .mapEventsTelemetry(let l) = lhs, case .mapEventsTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.spinPokestopTelemetry, .spinPokestopTelemetry): return {
        guard case .spinPokestopTelemetry(let l) = lhs, case .spinPokestopTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.profilePageTelemetry, .profilePageTelemetry): return {
        guard case .profilePageTelemetry(let l) = lhs, case .profilePageTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shoppingPageTelemetry, .shoppingPageTelemetry): return {
        guard case .shoppingPageTelemetry(let l) = lhs, case .shoppingPageTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.encounterPokemonTelemetry, .encounterPokemonTelemetry): return {
        guard case .encounterPokemonTelemetry(let l) = lhs, case .encounterPokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.catchPokemonTelemetry, .catchPokemonTelemetry): return {
        guard case .catchPokemonTelemetry(let l) = lhs, case .catchPokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deployPokemonTelemetry, .deployPokemonTelemetry): return {
        guard case .deployPokemonTelemetry(let l) = lhs, case .deployPokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.feedPokemonTelemetry, .feedPokemonTelemetry): return {
        guard case .feedPokemonTelemetry(let l) = lhs, case .feedPokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.evolvePokemonTelemetry, .evolvePokemonTelemetry): return {
        guard case .evolvePokemonTelemetry(let l) = lhs, case .evolvePokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.releasePokemonTelemetry, .releasePokemonTelemetry): return {
        guard case .releasePokemonTelemetry(let l) = lhs, case .releasePokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.nicknamePokemonTelemetry, .nicknamePokemonTelemetry): return {
        guard case .nicknamePokemonTelemetry(let l) = lhs, case .nicknamePokemonTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.newsPageTelemetry, .newsPageTelemetry): return {
        guard case .newsPageTelemetry(let l) = lhs, case .newsPageTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.itemTelemetry, .itemTelemetry): return {
        guard case .itemTelemetry(let l) = lhs, case .itemTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.battlePartyTelemetry, .battlePartyTelemetry): return {
        guard case .battlePartyTelemetry(let l) = lhs, case .battlePartyTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.passcodeRedeemTelemetry, .passcodeRedeemTelemetry): return {
        guard case .passcodeRedeemTelemetry(let l) = lhs, case .passcodeRedeemTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.linkLoginTelemetry, .linkLoginTelemetry): return {
        guard case .linkLoginTelemetry(let l) = lhs, case .linkLoginTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.raidTelemetry, .raidTelemetry): return {
        guard case .raidTelemetry(let l) = lhs, case .raidTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pushNotificationTelemetry, .pushNotificationTelemetry): return {
        guard case .pushNotificationTelemetry(let l) = lhs, case .pushNotificationTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.avatarCustomizationTelemetry, .avatarCustomizationTelemetry): return {
        guard case .avatarCustomizationTelemetry(let l) = lhs, case .avatarCustomizationTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.readPointOfInterestDescriptionTelemetry, .readPointOfInterestDescriptionTelemetry): return {
        guard case .readPointOfInterestDescriptionTelemetry(let l) = lhs, case .readPointOfInterestDescriptionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.webTelemetry, .webTelemetry): return {
        guard case .webTelemetry(let l) = lhs, case .webTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.changeArTelemetry, .changeArTelemetry): return {
        guard case .changeArTelemetry(let l) = lhs, case .changeArTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.weatherDetailClickTelemetry, .weatherDetailClickTelemetry): return {
        guard case .weatherDetailClickTelemetry(let l) = lhs, case .weatherDetailClickTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userIssueWeatherReport, .userIssueWeatherReport): return {
        guard case .userIssueWeatherReport(let l) = lhs, case .userIssueWeatherReport(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonInventoryTelemetry, .pokemonInventoryTelemetry): return {
        guard case .pokemonInventoryTelemetry(let l) = lhs, case .pokemonInventoryTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.socialTelemetry, .socialTelemetry): return {
        guard case .socialTelemetry(let l) = lhs, case .socialTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.checkEncounterInfoTelemetry, .checkEncounterInfoTelemetry): return {
        guard case .checkEncounterInfoTelemetry(let l) = lhs, case .checkEncounterInfoTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonGoPlusTelemetry, .pokemonGoPlusTelemetry): return {
        guard case .pokemonGoPlusTelemetry(let l) = lhs, case .pokemonGoPlusTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rpcTimingTelemetry, .rpcTimingTelemetry): return {
        guard case .rpcTimingTelemetry(let l) = lhs, case .rpcTimingTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.socialGiftCountTelemetry, .socialGiftCountTelemetry): return {
        guard case .socialGiftCountTelemetry(let l) = lhs, case .socialGiftCountTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.assetBundleTelemetry, .assetBundleTelemetry): return {
        guard case .assetBundleTelemetry(let l) = lhs, case .assetBundleTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.assetPoiDownloadTelemetry, .assetPoiDownloadTelemetry): return {
        guard case .assetPoiDownloadTelemetry(let l) = lhs, case .assetPoiDownloadTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.assetStreamDownloadTelemetry, .assetStreamDownloadTelemetry): return {
        guard case .assetStreamDownloadTelemetry(let l) = lhs, case .assetStreamDownloadTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.assetStreamCacheCulledTelemetry, .assetStreamCacheCulledTelemetry): return {
        guard case .assetStreamCacheCulledTelemetry(let l) = lhs, case .assetStreamCacheCulledTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rpcSocketTimingTelemetry, .rpcSocketTimingTelemetry): return {
        guard case .rpcSocketTimingTelemetry(let l) = lhs, case .rpcSocketTimingTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.permissionsFlow, .permissionsFlow): return {
        guard case .permissionsFlow(let l) = lhs, case .permissionsFlow(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deviceServiceToggle, .deviceServiceToggle): return {
        guard case .deviceServiceToggle(let l) = lhs, case .deviceServiceToggle(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.bootTelemetry, .bootTelemetry): return {
        guard case .bootTelemetry(let l) = lhs, case .bootTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userAttributes, .userAttributes): return {
        guard case .userAttributes(let l) = lhs, case .userAttributes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.onboardingTelemetry, .onboardingTelemetry): return {
        guard case .onboardingTelemetry(let l) = lhs, case .onboardingTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.loginActionTelemetry, .loginActionTelemetry): return {
        guard case .loginActionTelemetry(let l) = lhs, case .loginActionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.arPhotoSessionTelemetry, .arPhotoSessionTelemetry): return {
        guard case .arPhotoSessionTelemetry(let l) = lhs, case .arPhotoSessionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.invasionTelemetry, .invasionTelemetry): return {
        guard case .invasionTelemetry(let l) = lhs, case .invasionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.combatMinigameTelemetry, .combatMinigameTelemetry): return {
        guard case .combatMinigameTelemetry(let l) = lhs, case .combatMinigameTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leavePointOfInterestTelemetry, .leavePointOfInterestTelemetry): return {
        guard case .leavePointOfInterestTelemetry(let l) = lhs, case .leavePointOfInterestTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.viewPointOfInterestImageTelemetry, .viewPointOfInterestImageTelemetry): return {
        guard case .viewPointOfInterestImageTelemetry(let l) = lhs, case .viewPointOfInterestImageTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.combatHubEntranceTelemetry, .combatHubEntranceTelemetry): return {
        guard case .combatHubEntranceTelemetry(let l) = lhs, case .combatHubEntranceTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leaveInteractionRangeTelemetry, .leaveInteractionRangeTelemetry): return {
        guard case .leaveInteractionRangeTelemetry(let l) = lhs, case .leaveInteractionRangeTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shoppingPageClickTelemetry, .shoppingPageClickTelemetry): return {
        guard case .shoppingPageClickTelemetry(let l) = lhs, case .shoppingPageClickTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shoppingPageScrollTelemetry, .shoppingPageScrollTelemetry): return {
        guard case .shoppingPageScrollTelemetry(let l) = lhs, case .shoppingPageScrollTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deviceSpecificationsTelemetry, .deviceSpecificationsTelemetry): return {
        guard case .deviceSpecificationsTelemetry(let l) = lhs, case .deviceSpecificationsTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.screenResolutionTelemetry, .screenResolutionTelemetry): return {
        guard case .screenResolutionTelemetry(let l) = lhs, case .screenResolutionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.arBuddyMultiplayerSessionTelemetry, .arBuddyMultiplayerSessionTelemetry): return {
        guard case .arBuddyMultiplayerSessionTelemetry(let l) = lhs, case .arBuddyMultiplayerSessionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buddyMultiplayerConnectionFailedTelemetry, .buddyMultiplayerConnectionFailedTelemetry): return {
        guard case .buddyMultiplayerConnectionFailedTelemetry(let l) = lhs, case .buddyMultiplayerConnectionFailedTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buddyMultiplayerConnectionSucceededTelemetry, .buddyMultiplayerConnectionSucceededTelemetry): return {
        guard case .buddyMultiplayerConnectionSucceededTelemetry(let l) = lhs, case .buddyMultiplayerConnectionSucceededTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.buddyMultiplayerTimeToGetSessionTelemetry, .buddyMultiplayerTimeToGetSessionTelemetry): return {
        guard case .buddyMultiplayerTimeToGetSessionTelemetry(let l) = lhs, case .buddyMultiplayerTimeToGetSessionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerHudNotificationClickTelemetry, .playerHudNotificationClickTelemetry): return {
        guard case .playerHudNotificationClickTelemetry(let l) = lhs, case .playerHudNotificationClickTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.monodepthDownloadTelemetry, .monodepthDownloadTelemetry): return {
        guard case .monodepthDownloadTelemetry(let l) = lhs, case .monodepthDownloadTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.arMappingTelemetry, .arMappingTelemetry): return {
        guard case .arMappingTelemetry(let l) = lhs, case .arMappingTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.remoteRaidTelemetry, .remoteRaidTelemetry): return {
        guard case .remoteRaidTelemetry(let l) = lhs, case .remoteRaidTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deviceOsTelemetry, .deviceOsTelemetry): return {
        guard case .deviceOsTelemetry(let l) = lhs, case .deviceOsTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.nianticProfileTelemetry, .nianticProfileTelemetry): return {
        guard case .nianticProfileTelemetry(let l) = lhs, case .nianticProfileTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.changeOnlineStatusTelemetry, .changeOnlineStatusTelemetry): return {
        guard case .changeOnlineStatusTelemetry(let l) = lhs, case .changeOnlineStatusTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.deepLinkingTelemetry, .deepLinkingTelemetry): return {
        guard case .deepLinkingTelemetry(let l) = lhs, case .deepLinkingTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.arMappingSessionTelemetry, .arMappingSessionTelemetry): return {
        guard case .arMappingSessionTelemetry(let l) = lhs, case .arMappingSessionTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonHomeTelemetry, .pokemonHomeTelemetry): return {
        guard case .pokemonHomeTelemetry(let l) = lhs, case .pokemonHomeTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonSearchTelemetry, .pokemonSearchTelemetry): return {
        guard case .pokemonSearchTelemetry(let l) = lhs, case .pokemonSearchTelemetry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_ClientTelemetryOmni: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientTelemetryOmni"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "boot_time"),
    2: .standard(proto: "frame_rate"),
    3: .standard(proto: "generic_click_telemetry"),
    4: .standard(proto: "map_events_telemetry"),
    5: .standard(proto: "spin_pokestop_telemetry"),
    6: .standard(proto: "profile_page_telemetry"),
    7: .standard(proto: "shopping_page_telemetry"),
    8: .standard(proto: "encounter_pokemon_telemetry"),
    9: .standard(proto: "catch_pokemon_telemetry"),
    10: .standard(proto: "deploy_pokemon_telemetry"),
    11: .standard(proto: "feed_pokemon_telemetry"),
    12: .standard(proto: "evolve_pokemon_telemetry"),
    13: .standard(proto: "release_pokemon_telemetry"),
    14: .standard(proto: "nickname_pokemon_telemetry"),
    15: .standard(proto: "news_page_telemetry"),
    16: .standard(proto: "item_telemetry"),
    17: .standard(proto: "battle_party_telemetry"),
    18: .standard(proto: "passcode_redeem_telemetry"),
    19: .standard(proto: "link_login_telemetry"),
    20: .standard(proto: "raid_telemetry"),
    21: .standard(proto: "push_notification_telemetry"),
    22: .standard(proto: "avatar_customization_telemetry"),
    23: .standard(proto: "read_point_of_interest_description_telemetry"),
    24: .standard(proto: "web_telemetry"),
    25: .standard(proto: "change_ar_telemetry"),
    26: .standard(proto: "weather_detail_click_telemetry"),
    27: .standard(proto: "user_issue_weather_report"),
    28: .standard(proto: "pokemon_inventory_telemetry"),
    29: .standard(proto: "social_telemetry"),
    30: .standard(proto: "check_encounter_info_telemetry"),
    31: .standard(proto: "pokemon_go_plus_telemetry"),
    32: .standard(proto: "rpc_timing_telemetry"),
    33: .standard(proto: "social_gift_count_telemetry"),
    34: .standard(proto: "asset_bundle_telemetry"),
    35: .standard(proto: "asset_poi_download_telemetry"),
    36: .standard(proto: "asset_stream_download_telemetry"),
    37: .standard(proto: "asset_stream_cache_culled_telemetry"),
    38: .standard(proto: "rpc_socket_timing_telemetry"),
    39: .standard(proto: "permissions_flow"),
    40: .standard(proto: "device_service_toggle"),
    41: .standard(proto: "boot_telemetry"),
    42: .standard(proto: "user_attributes"),
    43: .standard(proto: "onboarding_telemetry"),
    44: .standard(proto: "login_action_telemetry"),
    45: .standard(proto: "ar_photo_session_telemetry"),
    46: .standard(proto: "invasion_telemetry"),
    47: .standard(proto: "combat_minigame_telemetry"),
    48: .standard(proto: "leave_point_of_interest_telemetry"),
    49: .standard(proto: "view_point_of_interest_image_telemetry"),
    50: .standard(proto: "combat_hub_entrance_telemetry"),
    51: .standard(proto: "leave_interaction_range_telemetry"),
    52: .standard(proto: "shopping_page_click_telemetry"),
    53: .standard(proto: "shopping_page_scroll_telemetry"),
    54: .standard(proto: "device_specifications_telemetry"),
    55: .standard(proto: "screen_resolution_telemetry"),
    56: .standard(proto: "ar_buddy_multiplayer_session_telemetry"),
    57: .standard(proto: "buddy_multiplayer_connection_failed_telemetry"),
    58: .standard(proto: "buddy_multiplayer_connection_succeeded_telemetry"),
    59: .standard(proto: "buddy_multiplayer_time_to_get_session_telemetry"),
    60: .standard(proto: "player_hud_notification_click_telemetry"),
    61: .standard(proto: "monodepth_download_telemetry"),
    62: .standard(proto: "ar_mapping_telemetry"),
    63: .standard(proto: "remote_raid_telemetry"),
    64: .standard(proto: "device_os_telemetry"),
    65: .standard(proto: "niantic_profile_telemetry"),
    66: .standard(proto: "change_online_status_telemetry"),
    67: .standard(proto: "deep_linking_telemetry"),
    68: .standard(proto: "ar_mapping_session_telemetry"),
    69: .standard(proto: "pokemon_home_telemetry"),
    70: .standard(proto: "pokemon_search_telemetry"),
    1001: .standard(proto: "server_data"),
    1002: .standard(proto: "common_filters"),
  ]

  fileprivate class _StorageClass {
    var _telemetryData: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData?
    var _serverData: POGOProtos_Data_Telemetry_PlatformServerData? = nil
    var _commonFilters: POGOProtos_Data_Platform_PlatformCommonFilter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _telemetryData = source._telemetryData
      _serverData = source._serverData
      _commonFilters = source._commonFilters
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try {
          var v: POGOProtos_Data_Telemetry_BootTime?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .bootTime(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .bootTime(v)}
        }()
        case 2: try {
          var v: POGOProtos_Data_Telemetry_FrameRate?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .frameRate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .frameRate(v)}
        }()
        case 3: try {
          var v: POGOProtos_Data_Telemetry_GenericClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .genericClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .genericClickTelemetry(v)}
        }()
        case 4: try {
          var v: POGOProtos_Data_Telemetry_MapEventsTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .mapEventsTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .mapEventsTelemetry(v)}
        }()
        case 5: try {
          var v: POGOProtos_Data_Telemetry_SpinPokestopTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .spinPokestopTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .spinPokestopTelemetry(v)}
        }()
        case 6: try {
          var v: POGOProtos_Data_Telemetry_ProfilePageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .profilePageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .profilePageTelemetry(v)}
        }()
        case 7: try {
          var v: POGOProtos_Data_Telemetry_ShoppingPageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shoppingPageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shoppingPageTelemetry(v)}
        }()
        case 8: try {
          var v: POGOProtos_Data_Telemetry_EncounterPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .encounterPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .encounterPokemonTelemetry(v)}
        }()
        case 9: try {
          var v: POGOProtos_Data_Telemetry_CatchPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .catchPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .catchPokemonTelemetry(v)}
        }()
        case 10: try {
          var v: POGOProtos_Data_Telemetry_DeployPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deployPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deployPokemonTelemetry(v)}
        }()
        case 11: try {
          var v: POGOProtos_Data_Telemetry_FeedPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .feedPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .feedPokemonTelemetry(v)}
        }()
        case 12: try {
          var v: POGOProtos_Data_Telemetry_EvolvePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .evolvePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .evolvePokemonTelemetry(v)}
        }()
        case 13: try {
          var v: POGOProtos_Data_Telemetry_ReleasePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .releasePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .releasePokemonTelemetry(v)}
        }()
        case 14: try {
          var v: POGOProtos_Data_Telemetry_NicknamePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .nicknamePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .nicknamePokemonTelemetry(v)}
        }()
        case 15: try {
          var v: POGOProtos_Data_Telemetry_NewsPageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .newsPageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .newsPageTelemetry(v)}
        }()
        case 16: try {
          var v: POGOProtos_Data_Telemetry_ItemTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .itemTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .itemTelemetry(v)}
        }()
        case 17: try {
          var v: POGOProtos_Data_Telemetry_BattlePartyTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .battlePartyTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .battlePartyTelemetry(v)}
        }()
        case 18: try {
          var v: POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .passcodeRedeemTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .passcodeRedeemTelemetry(v)}
        }()
        case 19: try {
          var v: POGOProtos_Data_Telemetry_LinkLoginTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .linkLoginTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .linkLoginTelemetry(v)}
        }()
        case 20: try {
          var v: POGOProtos_Data_Telemetry_RaidTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .raidTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .raidTelemetry(v)}
        }()
        case 21: try {
          var v: POGOProtos_Data_Telemetry_PushNotificationTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pushNotificationTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pushNotificationTelemetry(v)}
        }()
        case 22: try {
          var v: POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .avatarCustomizationTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .avatarCustomizationTelemetry(v)}
        }()
        case 23: try {
          var v: POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .readPointOfInterestDescriptionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .readPointOfInterestDescriptionTelemetry(v)}
        }()
        case 24: try {
          var v: POGOProtos_Data_Telemetry_WebTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .webTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .webTelemetry(v)}
        }()
        case 25: try {
          var v: POGOProtos_Data_Telemetry_ChangeArTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .changeArTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .changeArTelemetry(v)}
        }()
        case 26: try {
          var v: POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .weatherDetailClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .weatherDetailClickTelemetry(v)}
        }()
        case 27: try {
          var v: POGOProtos_Data_Player_UserIssueWeatherReport?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .userIssueWeatherReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .userIssueWeatherReport(v)}
        }()
        case 28: try {
          var v: POGOProtos_Data_Telemetry_PokemonInventoryTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonInventoryTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonInventoryTelemetry(v)}
        }()
        case 29: try {
          var v: POGOProtos_Data_Telemetry_SocialTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .socialTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .socialTelemetry(v)}
        }()
        case 30: try {
          var v: POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .checkEncounterInfoTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .checkEncounterInfoTelemetry(v)}
        }()
        case 31: try {
          var v: POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonGoPlusTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonGoPlusTelemetry(v)}
        }()
        case 32: try {
          var v: POGOProtos_Data_Telemetry_RpcResponseTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .rpcTimingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .rpcTimingTelemetry(v)}
        }()
        case 33: try {
          var v: POGOProtos_Settings_SocialGiftCountTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .socialGiftCountTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .socialGiftCountTelemetry(v)}
        }()
        case 34: try {
          var v: POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetBundleTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetBundleTelemetry(v)}
        }()
        case 35: try {
          var v: POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetPoiDownloadTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetPoiDownloadTelemetry(v)}
        }()
        case 36: try {
          var v: POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetStreamDownloadTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetStreamDownloadTelemetry(v)}
        }()
        case 37: try {
          var v: POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetStreamCacheCulledTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetStreamCacheCulledTelemetry(v)}
        }()
        case 38: try {
          var v: POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .rpcSocketTimingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .rpcSocketTimingTelemetry(v)}
        }()
        case 39: try {
          var v: POGOProtos_Data_Telemetry_PermissionsFlowTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .permissionsFlow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .permissionsFlow(v)}
        }()
        case 40: try {
          var v: POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deviceServiceToggle(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deviceServiceToggle(v)}
        }()
        case 41: try {
          var v: POGOProtos_Data_Telemetry_BootTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .bootTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .bootTelemetry(v)}
        }()
        case 42: try {
          var v: POGOProtos_Settings_Master_Item_UserAttributes?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .userAttributes(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .userAttributes(v)}
        }()
        case 43: try {
          var v: POGOProtos_Data_Telemetry_OnboardingTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .onboardingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .onboardingTelemetry(v)}
        }()
        case 44: try {
          var v: POGOProtos_Data_Telemetry_LoginActionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .loginActionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .loginActionTelemetry(v)}
        }()
        case 45: try {
          var v: POGOProtos_Data_Telemetry_ArPhotoSession?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .arPhotoSessionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .arPhotoSessionTelemetry(v)}
        }()
        case 46: try {
          var v: POGOProtos_Data_Telemetry_InvasionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .invasionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .invasionTelemetry(v)}
        }()
        case 47: try {
          var v: POGOProtos_Data_Telemetry_CombatMinigameTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .combatMinigameTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .combatMinigameTelemetry(v)}
        }()
        case 48: try {
          var v: POGOProtos_Data_Telemetry_LeavePointOfInterestTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .leavePointOfInterestTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .leavePointOfInterestTelemetry(v)}
        }()
        case 49: try {
          var v: POGOProtos_Data_Telemetry_ViewPointOfInterestImageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .viewPointOfInterestImageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .viewPointOfInterestImageTelemetry(v)}
        }()
        case 50: try {
          var v: POGOProtos_Data_Telemetry_CombatHubEntranceTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .combatHubEntranceTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .combatHubEntranceTelemetry(v)}
        }()
        case 51: try {
          var v: POGOProtos_Data_Telemetry_LeaveInteractionRangeTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .leaveInteractionRangeTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .leaveInteractionRangeTelemetry(v)}
        }()
        case 52: try {
          var v: POGOProtos_Data_Telemetry_ShoppingPageClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shoppingPageClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shoppingPageClickTelemetry(v)}
        }()
        case 53: try {
          var v: POGOProtos_Data_Telemetry_ShoppingPageScrollTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shoppingPageScrollTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shoppingPageScrollTelemetry(v)}
        }()
        case 54: try {
          var v: POGOProtos_Data_Telemetry_DeviceSpecificationsTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deviceSpecificationsTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deviceSpecificationsTelemetry(v)}
        }()
        case 55: try {
          var v: POGOProtos_Data_Telemetry_ScreenResolutionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .screenResolutionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .screenResolutionTelemetry(v)}
        }()
        case 56: try {
          var v: POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .arBuddyMultiplayerSessionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .arBuddyMultiplayerSessionTelemetry(v)}
        }()
        case 57: try {
          var v: POGOProtos_Data_Buddy_BuddyMultiplayerConnectionFailed?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .buddyMultiplayerConnectionFailedTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .buddyMultiplayerConnectionFailedTelemetry(v)}
        }()
        case 58: try {
          var v: POGOProtos_Data_Buddy_BuddyMultiplayerConnectionSucceeded?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .buddyMultiplayerConnectionSucceededTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .buddyMultiplayerConnectionSucceededTelemetry(v)}
        }()
        case 59: try {
          var v: POGOProtos_Data_Buddy_BuddyMultiplayerTimeToGetSession?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .buddyMultiplayerTimeToGetSessionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .buddyMultiplayerTimeToGetSessionTelemetry(v)}
        }()
        case 60: try {
          var v: POGOProtos_Data_Telemetry_PlayerHudNotificationClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .playerHudNotificationClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .playerHudNotificationClickTelemetry(v)}
        }()
        case 61: try {
          var v: POGOProtos_Data_Telemetry_MonodepthDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .monodepthDownloadTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .monodepthDownloadTelemetry(v)}
        }()
        case 62: try {
          var v: POGOProtos_Data_Telemetry_ArMappingTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .arMappingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .arMappingTelemetry(v)}
        }()
        case 63: try {
          var v: POGOProtos_Data_Telemetry_RemoteRaidTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .remoteRaidTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .remoteRaidTelemetry(v)}
        }()
        case 64: try {
          var v: POGOProtos_Data_Telemetry_DeviceOSTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deviceOsTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deviceOsTelemetry(v)}
        }()
        case 65: try {
          var v: POGOProtos_Data_Telemetry_NianticProfileTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .nianticProfileTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .nianticProfileTelemetry(v)}
        }()
        case 66: try {
          var v: POGOProtos_Data_Telemetry_ChangeOnlineStatusTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .changeOnlineStatusTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .changeOnlineStatusTelemetry(v)}
        }()
        case 67: try {
          var v: POGOProtos_Data_Telemetry_DeepLinkingTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deepLinkingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deepLinkingTelemetry(v)}
        }()
        case 68: try {
          var v: POGOProtos_Data_Telemetry_ArMappingSessionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .arMappingSessionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .arMappingSessionTelemetry(v)}
        }()
        case 69: try {
          var v: POGOProtos_Data_Telemetry_PokemonHomeTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonHomeTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonHomeTelemetry(v)}
        }()
        case 70: try {
          var v: POGOProtos_Data_Telemetry_PokemonSearchTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonSearchTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonSearchTelemetry(v)}
        }()
        case 1001: try { try decoder.decodeSingularMessageField(value: &_storage._serverData) }()
        case 1002: try { try decoder.decodeSingularMessageField(value: &_storage._commonFilters) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch _storage._telemetryData {
      case .bootTime?: try {
        guard case .bootTime(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }()
      case .frameRate?: try {
        guard case .frameRate(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }()
      case .genericClickTelemetry?: try {
        guard case .genericClickTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .mapEventsTelemetry?: try {
        guard case .mapEventsTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case .spinPokestopTelemetry?: try {
        guard case .spinPokestopTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .profilePageTelemetry?: try {
        guard case .profilePageTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case .shoppingPageTelemetry?: try {
        guard case .shoppingPageTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }()
      case .encounterPokemonTelemetry?: try {
        guard case .encounterPokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }()
      case .catchPokemonTelemetry?: try {
        guard case .catchPokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }()
      case .deployPokemonTelemetry?: try {
        guard case .deployPokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }()
      case .feedPokemonTelemetry?: try {
        guard case .feedPokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }()
      case .evolvePokemonTelemetry?: try {
        guard case .evolvePokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }()
      case .releasePokemonTelemetry?: try {
        guard case .releasePokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }()
      case .nicknamePokemonTelemetry?: try {
        guard case .nicknamePokemonTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }()
      case .newsPageTelemetry?: try {
        guard case .newsPageTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }()
      case .itemTelemetry?: try {
        guard case .itemTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }()
      case .battlePartyTelemetry?: try {
        guard case .battlePartyTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }()
      case .passcodeRedeemTelemetry?: try {
        guard case .passcodeRedeemTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }()
      case .linkLoginTelemetry?: try {
        guard case .linkLoginTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }()
      case .raidTelemetry?: try {
        guard case .raidTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }()
      case .pushNotificationTelemetry?: try {
        guard case .pushNotificationTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }()
      case .avatarCustomizationTelemetry?: try {
        guard case .avatarCustomizationTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }()
      case .readPointOfInterestDescriptionTelemetry?: try {
        guard case .readPointOfInterestDescriptionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }()
      case .webTelemetry?: try {
        guard case .webTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }()
      case .changeArTelemetry?: try {
        guard case .changeArTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }()
      case .weatherDetailClickTelemetry?: try {
        guard case .weatherDetailClickTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }()
      case .userIssueWeatherReport?: try {
        guard case .userIssueWeatherReport(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }()
      case .pokemonInventoryTelemetry?: try {
        guard case .pokemonInventoryTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }()
      case .socialTelemetry?: try {
        guard case .socialTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }()
      case .checkEncounterInfoTelemetry?: try {
        guard case .checkEncounterInfoTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }()
      case .pokemonGoPlusTelemetry?: try {
        guard case .pokemonGoPlusTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }()
      case .rpcTimingTelemetry?: try {
        guard case .rpcTimingTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }()
      case .socialGiftCountTelemetry?: try {
        guard case .socialGiftCountTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }()
      case .assetBundleTelemetry?: try {
        guard case .assetBundleTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      }()
      case .assetPoiDownloadTelemetry?: try {
        guard case .assetPoiDownloadTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      }()
      case .assetStreamDownloadTelemetry?: try {
        guard case .assetStreamDownloadTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      }()
      case .assetStreamCacheCulledTelemetry?: try {
        guard case .assetStreamCacheCulledTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      }()
      case .rpcSocketTimingTelemetry?: try {
        guard case .rpcSocketTimingTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }()
      case .permissionsFlow?: try {
        guard case .permissionsFlow(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }()
      case .deviceServiceToggle?: try {
        guard case .deviceServiceToggle(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }()
      case .bootTelemetry?: try {
        guard case .bootTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }()
      case .userAttributes?: try {
        guard case .userAttributes(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      }()
      case .onboardingTelemetry?: try {
        guard case .onboardingTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      }()
      case .loginActionTelemetry?: try {
        guard case .loginActionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      }()
      case .arPhotoSessionTelemetry?: try {
        guard case .arPhotoSessionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      }()
      case .invasionTelemetry?: try {
        guard case .invasionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      }()
      case .combatMinigameTelemetry?: try {
        guard case .combatMinigameTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      }()
      case .leavePointOfInterestTelemetry?: try {
        guard case .leavePointOfInterestTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      }()
      case .viewPointOfInterestImageTelemetry?: try {
        guard case .viewPointOfInterestImageTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }()
      case .combatHubEntranceTelemetry?: try {
        guard case .combatHubEntranceTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      }()
      case .leaveInteractionRangeTelemetry?: try {
        guard case .leaveInteractionRangeTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }()
      case .shoppingPageClickTelemetry?: try {
        guard case .shoppingPageClickTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      }()
      case .shoppingPageScrollTelemetry?: try {
        guard case .shoppingPageScrollTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      }()
      case .deviceSpecificationsTelemetry?: try {
        guard case .deviceSpecificationsTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }()
      case .screenResolutionTelemetry?: try {
        guard case .screenResolutionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
      }()
      case .arBuddyMultiplayerSessionTelemetry?: try {
        guard case .arBuddyMultiplayerSessionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      }()
      case .buddyMultiplayerConnectionFailedTelemetry?: try {
        guard case .buddyMultiplayerConnectionFailedTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      }()
      case .buddyMultiplayerConnectionSucceededTelemetry?: try {
        guard case .buddyMultiplayerConnectionSucceededTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      }()
      case .buddyMultiplayerTimeToGetSessionTelemetry?: try {
        guard case .buddyMultiplayerTimeToGetSessionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      }()
      case .playerHudNotificationClickTelemetry?: try {
        guard case .playerHudNotificationClickTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      }()
      case .monodepthDownloadTelemetry?: try {
        guard case .monodepthDownloadTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      }()
      case .arMappingTelemetry?: try {
        guard case .arMappingTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      }()
      case .remoteRaidTelemetry?: try {
        guard case .remoteRaidTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      }()
      case .deviceOsTelemetry?: try {
        guard case .deviceOsTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      }()
      case .nianticProfileTelemetry?: try {
        guard case .nianticProfileTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
      }()
      case .changeOnlineStatusTelemetry?: try {
        guard case .changeOnlineStatusTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      }()
      case .deepLinkingTelemetry?: try {
        guard case .deepLinkingTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      }()
      case .arMappingSessionTelemetry?: try {
        guard case .arMappingSessionTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      }()
      case .pokemonHomeTelemetry?: try {
        guard case .pokemonHomeTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      }()
      case .pokemonSearchTelemetry?: try {
        guard case .pokemonSearchTelemetry(let v)? = _storage._telemetryData else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
      }()
      case nil: break
      }
      if let v = _storage._serverData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
      }
      if let v = _storage._commonFilters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni, rhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._telemetryData != rhs_storage._telemetryData {return false}
        if _storage._serverData != rhs_storage._serverData {return false}
        if _storage._commonFilters != rhs_storage._commonFilters {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
