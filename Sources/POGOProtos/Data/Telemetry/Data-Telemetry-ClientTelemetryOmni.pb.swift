// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/ClientTelemetryOmni.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_ClientTelemetryOmni {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var telemetryData: OneOf_TelemetryData? {
    get {return _storage._telemetryData}
    set {_uniqueStorage()._telemetryData = newValue}
  }

  public var bootTime: POGOProtos_Data_Telemetry_BootTime {
    get {
      if case .bootTime(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BootTime()
    }
    set {_uniqueStorage()._telemetryData = .bootTime(newValue)}
  }

  public var frameRate: POGOProtos_Data_Telemetry_FrameRate {
    get {
      if case .frameRate(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_FrameRate()
    }
    set {_uniqueStorage()._telemetryData = .frameRate(newValue)}
  }

  public var genericClickTelemetry: POGOProtos_Data_Telemetry_GenericClickTelemetry {
    get {
      if case .genericClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_GenericClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .genericClickTelemetry(newValue)}
  }

  public var mapEventsTelemetry: POGOProtos_Data_Telemetry_MapEventsTelemetry {
    get {
      if case .mapEventsTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_MapEventsTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .mapEventsTelemetry(newValue)}
  }

  public var spinPokestopTelemetry: POGOProtos_Data_Telemetry_SpinPokestopTelemetry {
    get {
      if case .spinPokestopTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_SpinPokestopTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .spinPokestopTelemetry(newValue)}
  }

  public var profilePageTelemetry: POGOProtos_Data_Telemetry_ProfilePageTelemetry {
    get {
      if case .profilePageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ProfilePageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .profilePageTelemetry(newValue)}
  }

  public var shoppingPageTelemetry: POGOProtos_Data_Telemetry_ShoppingPageTelemetry {
    get {
      if case .shoppingPageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ShoppingPageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .shoppingPageTelemetry(newValue)}
  }

  public var encounterPokemonTelemetry: POGOProtos_Data_Telemetry_EncounterPokemonTelemetry {
    get {
      if case .encounterPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_EncounterPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .encounterPokemonTelemetry(newValue)}
  }

  public var catchPokemonTelemetry: POGOProtos_Data_Telemetry_CatchPokemonTelemetry {
    get {
      if case .catchPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CatchPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .catchPokemonTelemetry(newValue)}
  }

  public var deployPokemonTelemetry: POGOProtos_Data_Telemetry_DeployPokemonTelemetry {
    get {
      if case .deployPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeployPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deployPokemonTelemetry(newValue)}
  }

  public var feedPokemonTelemetry: POGOProtos_Data_Telemetry_FeedPokemonTelemetry {
    get {
      if case .feedPokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_FeedPokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .feedPokemonTelemetry(newValue)}
  }

  public var evolvePokemonTelemetry: POGOProtos_Data_Telemetry_EvolvePokemonTelemetry {
    get {
      if case .evolvePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_EvolvePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .evolvePokemonTelemetry(newValue)}
  }

  public var releasePokemonTelemetry: POGOProtos_Data_Telemetry_ReleasePokemonTelemetry {
    get {
      if case .releasePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ReleasePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .releasePokemonTelemetry(newValue)}
  }

  public var nicknamePokemonTelemetry: POGOProtos_Data_Telemetry_NicknamePokemonTelemetry {
    get {
      if case .nicknamePokemonTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_NicknamePokemonTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .nicknamePokemonTelemetry(newValue)}
  }

  public var newsPageTelemetry: POGOProtos_Data_Telemetry_NewsPageTelemetry {
    get {
      if case .newsPageTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_NewsPageTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .newsPageTelemetry(newValue)}
  }

  public var itemTelemetry: POGOProtos_Data_Telemetry_ItemTelemetry {
    get {
      if case .itemTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ItemTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .itemTelemetry(newValue)}
  }

  public var battlePartyTelemetry: POGOProtos_Data_Telemetry_BattlePartyTelemetry {
    get {
      if case .battlePartyTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BattlePartyTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .battlePartyTelemetry(newValue)}
  }

  public var passcodeRedeemTelemetry: POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry {
    get {
      if case .passcodeRedeemTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .passcodeRedeemTelemetry(newValue)}
  }

  public var linkLoginTelemetry: POGOProtos_Data_Telemetry_LinkLoginTelemetry {
    get {
      if case .linkLoginTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LinkLoginTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .linkLoginTelemetry(newValue)}
  }

  public var raidTelemetry: POGOProtos_Data_Telemetry_RaidTelemetry {
    get {
      if case .raidTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RaidTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .raidTelemetry(newValue)}
  }

  public var pushNotificationTelemetry: POGOProtos_Data_Telemetry_PushNotificationTelemetry {
    get {
      if case .pushNotificationTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PushNotificationTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pushNotificationTelemetry(newValue)}
  }

  public var avatarCustomizationTelemetry: POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry {
    get {
      if case .avatarCustomizationTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .avatarCustomizationTelemetry(newValue)}
  }

  public var readPointOfInterestDescriptionTelemetry: POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry {
    get {
      if case .readPointOfInterestDescriptionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .readPointOfInterestDescriptionTelemetry(newValue)}
  }

  public var webTelemetry: POGOProtos_Data_Telemetry_WebTelemetry {
    get {
      if case .webTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_WebTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .webTelemetry(newValue)}
  }

  public var changeArTelemetry: POGOProtos_Data_Telemetry_ChangeArTelemetry {
    get {
      if case .changeArTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ChangeArTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .changeArTelemetry(newValue)}
  }

  public var weatherDetailClickTelemetry: POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry {
    get {
      if case .weatherDetailClickTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .weatherDetailClickTelemetry(newValue)}
  }

  public var userIssueWeatherReport: POGOProtos_Data_Player_UserIssueWeatherReport {
    get {
      if case .userIssueWeatherReport(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Player_UserIssueWeatherReport()
    }
    set {_uniqueStorage()._telemetryData = .userIssueWeatherReport(newValue)}
  }

  public var pokemonInventoryTelemetry: POGOProtos_Data_Telemetry_PokemonInventoryTelemetry {
    get {
      if case .pokemonInventoryTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonInventoryTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonInventoryTelemetry(newValue)}
  }

  public var socialTelemetry: POGOProtos_Data_Telemetry_SocialTelemetry {
    get {
      if case .socialTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_SocialTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .socialTelemetry(newValue)}
  }

  public var checkEncounterInfoTelemetry: POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry {
    get {
      if case .checkEncounterInfoTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .checkEncounterInfoTelemetry(newValue)}
  }

  public var pokemonGoPlusTelemetry: POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry {
    get {
      if case .pokemonGoPlusTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .pokemonGoPlusTelemetry(newValue)}
  }

  public var rpcTimingTelemetry: POGOProtos_Data_Telemetry_RpcResponseTelemetry {
    get {
      if case .rpcTimingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RpcResponseTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .rpcTimingTelemetry(newValue)}
  }

  public var socialGiftCountTelemetry: POGOProtos_Settings_SocialGiftCountTelemetry {
    get {
      if case .socialGiftCountTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Settings_SocialGiftCountTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .socialGiftCountTelemetry(newValue)}
  }

  public var assetBundleTelemetry: POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry {
    get {
      if case .assetBundleTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetBundleTelemetry(newValue)}
  }

  public var assetPoiDownloadTelemetry: POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry {
    get {
      if case .assetPoiDownloadTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetPoiDownloadTelemetry(newValue)}
  }

  public var assetStreamDownloadTelemetry: POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry {
    get {
      if case .assetStreamDownloadTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetStreamDownloadTelemetry(newValue)}
  }

  public var assetStreamCacheCulledTelemetry: POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry {
    get {
      if case .assetStreamCacheCulledTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .assetStreamCacheCulledTelemetry(newValue)}
  }

  public var rpcSocketTimingTelemetry: POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry {
    get {
      if case .rpcSocketTimingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .rpcSocketTimingTelemetry(newValue)}
  }

  public var permissionsFlow: POGOProtos_Data_Telemetry_PermissionsFlowTelemetry {
    get {
      if case .permissionsFlow(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PermissionsFlowTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .permissionsFlow(newValue)}
  }

  public var deviceServiceToggle: POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry {
    get {
      if case .deviceServiceToggle(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .deviceServiceToggle(newValue)}
  }

  public var bootTelemetry: POGOProtos_Data_Telemetry_BootTelemetry {
    get {
      if case .bootTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_BootTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .bootTelemetry(newValue)}
  }

  public var userAttributes: POGOProtos_Data_Player_UserAttributes {
    get {
      if case .userAttributes(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Player_UserAttributes()
    }
    set {_uniqueStorage()._telemetryData = .userAttributes(newValue)}
  }

  public var onboardingTelemetry: POGOProtos_Data_Telemetry_OnboardingTelemetry {
    get {
      if case .onboardingTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_OnboardingTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .onboardingTelemetry(newValue)}
  }

  public var loginActionTelemetry: POGOProtos_Data_Telemetry_LoginActionTelemetry {
    get {
      if case .loginActionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_LoginActionTelemetry()
    }
    set {_uniqueStorage()._telemetryData = .loginActionTelemetry(newValue)}
  }

  public var arPhotoSessionTelemetry: POGOProtos_Data_Telemetry_ArPhotoSession {
    get {
      if case .arPhotoSessionTelemetry(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_ArPhotoSession()
    }
    set {_uniqueStorage()._telemetryData = .arPhotoSessionTelemetry(newValue)}
  }

  public var serverData: POGOProtos_Data_Telemetry_PlatformServerData {
    get {
      if case .serverData(let v)? = _storage._telemetryData {return v}
      return POGOProtos_Data_Telemetry_PlatformServerData()
    }
    set {_uniqueStorage()._telemetryData = .serverData(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_TelemetryData: Equatable {
    case bootTime(POGOProtos_Data_Telemetry_BootTime)
    case frameRate(POGOProtos_Data_Telemetry_FrameRate)
    case genericClickTelemetry(POGOProtos_Data_Telemetry_GenericClickTelemetry)
    case mapEventsTelemetry(POGOProtos_Data_Telemetry_MapEventsTelemetry)
    case spinPokestopTelemetry(POGOProtos_Data_Telemetry_SpinPokestopTelemetry)
    case profilePageTelemetry(POGOProtos_Data_Telemetry_ProfilePageTelemetry)
    case shoppingPageTelemetry(POGOProtos_Data_Telemetry_ShoppingPageTelemetry)
    case encounterPokemonTelemetry(POGOProtos_Data_Telemetry_EncounterPokemonTelemetry)
    case catchPokemonTelemetry(POGOProtos_Data_Telemetry_CatchPokemonTelemetry)
    case deployPokemonTelemetry(POGOProtos_Data_Telemetry_DeployPokemonTelemetry)
    case feedPokemonTelemetry(POGOProtos_Data_Telemetry_FeedPokemonTelemetry)
    case evolvePokemonTelemetry(POGOProtos_Data_Telemetry_EvolvePokemonTelemetry)
    case releasePokemonTelemetry(POGOProtos_Data_Telemetry_ReleasePokemonTelemetry)
    case nicknamePokemonTelemetry(POGOProtos_Data_Telemetry_NicknamePokemonTelemetry)
    case newsPageTelemetry(POGOProtos_Data_Telemetry_NewsPageTelemetry)
    case itemTelemetry(POGOProtos_Data_Telemetry_ItemTelemetry)
    case battlePartyTelemetry(POGOProtos_Data_Telemetry_BattlePartyTelemetry)
    case passcodeRedeemTelemetry(POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry)
    case linkLoginTelemetry(POGOProtos_Data_Telemetry_LinkLoginTelemetry)
    case raidTelemetry(POGOProtos_Data_Telemetry_RaidTelemetry)
    case pushNotificationTelemetry(POGOProtos_Data_Telemetry_PushNotificationTelemetry)
    case avatarCustomizationTelemetry(POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry)
    case readPointOfInterestDescriptionTelemetry(POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry)
    case webTelemetry(POGOProtos_Data_Telemetry_WebTelemetry)
    case changeArTelemetry(POGOProtos_Data_Telemetry_ChangeArTelemetry)
    case weatherDetailClickTelemetry(POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry)
    case userIssueWeatherReport(POGOProtos_Data_Player_UserIssueWeatherReport)
    case pokemonInventoryTelemetry(POGOProtos_Data_Telemetry_PokemonInventoryTelemetry)
    case socialTelemetry(POGOProtos_Data_Telemetry_SocialTelemetry)
    case checkEncounterInfoTelemetry(POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry)
    case pokemonGoPlusTelemetry(POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry)
    case rpcTimingTelemetry(POGOProtos_Data_Telemetry_RpcResponseTelemetry)
    case socialGiftCountTelemetry(POGOProtos_Settings_SocialGiftCountTelemetry)
    case assetBundleTelemetry(POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry)
    case assetPoiDownloadTelemetry(POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry)
    case assetStreamDownloadTelemetry(POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry)
    case assetStreamCacheCulledTelemetry(POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry)
    case rpcSocketTimingTelemetry(POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry)
    case permissionsFlow(POGOProtos_Data_Telemetry_PermissionsFlowTelemetry)
    case deviceServiceToggle(POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry)
    case bootTelemetry(POGOProtos_Data_Telemetry_BootTelemetry)
    case userAttributes(POGOProtos_Data_Player_UserAttributes)
    case onboardingTelemetry(POGOProtos_Data_Telemetry_OnboardingTelemetry)
    case loginActionTelemetry(POGOProtos_Data_Telemetry_LoginActionTelemetry)
    case arPhotoSessionTelemetry(POGOProtos_Data_Telemetry_ArPhotoSession)
    case serverData(POGOProtos_Data_Telemetry_PlatformServerData)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData, rhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData) -> Bool {
      switch (lhs, rhs) {
      case (.bootTime(let l), .bootTime(let r)): return l == r
      case (.frameRate(let l), .frameRate(let r)): return l == r
      case (.genericClickTelemetry(let l), .genericClickTelemetry(let r)): return l == r
      case (.mapEventsTelemetry(let l), .mapEventsTelemetry(let r)): return l == r
      case (.spinPokestopTelemetry(let l), .spinPokestopTelemetry(let r)): return l == r
      case (.profilePageTelemetry(let l), .profilePageTelemetry(let r)): return l == r
      case (.shoppingPageTelemetry(let l), .shoppingPageTelemetry(let r)): return l == r
      case (.encounterPokemonTelemetry(let l), .encounterPokemonTelemetry(let r)): return l == r
      case (.catchPokemonTelemetry(let l), .catchPokemonTelemetry(let r)): return l == r
      case (.deployPokemonTelemetry(let l), .deployPokemonTelemetry(let r)): return l == r
      case (.feedPokemonTelemetry(let l), .feedPokemonTelemetry(let r)): return l == r
      case (.evolvePokemonTelemetry(let l), .evolvePokemonTelemetry(let r)): return l == r
      case (.releasePokemonTelemetry(let l), .releasePokemonTelemetry(let r)): return l == r
      case (.nicknamePokemonTelemetry(let l), .nicknamePokemonTelemetry(let r)): return l == r
      case (.newsPageTelemetry(let l), .newsPageTelemetry(let r)): return l == r
      case (.itemTelemetry(let l), .itemTelemetry(let r)): return l == r
      case (.battlePartyTelemetry(let l), .battlePartyTelemetry(let r)): return l == r
      case (.passcodeRedeemTelemetry(let l), .passcodeRedeemTelemetry(let r)): return l == r
      case (.linkLoginTelemetry(let l), .linkLoginTelemetry(let r)): return l == r
      case (.raidTelemetry(let l), .raidTelemetry(let r)): return l == r
      case (.pushNotificationTelemetry(let l), .pushNotificationTelemetry(let r)): return l == r
      case (.avatarCustomizationTelemetry(let l), .avatarCustomizationTelemetry(let r)): return l == r
      case (.readPointOfInterestDescriptionTelemetry(let l), .readPointOfInterestDescriptionTelemetry(let r)): return l == r
      case (.webTelemetry(let l), .webTelemetry(let r)): return l == r
      case (.changeArTelemetry(let l), .changeArTelemetry(let r)): return l == r
      case (.weatherDetailClickTelemetry(let l), .weatherDetailClickTelemetry(let r)): return l == r
      case (.userIssueWeatherReport(let l), .userIssueWeatherReport(let r)): return l == r
      case (.pokemonInventoryTelemetry(let l), .pokemonInventoryTelemetry(let r)): return l == r
      case (.socialTelemetry(let l), .socialTelemetry(let r)): return l == r
      case (.checkEncounterInfoTelemetry(let l), .checkEncounterInfoTelemetry(let r)): return l == r
      case (.pokemonGoPlusTelemetry(let l), .pokemonGoPlusTelemetry(let r)): return l == r
      case (.rpcTimingTelemetry(let l), .rpcTimingTelemetry(let r)): return l == r
      case (.socialGiftCountTelemetry(let l), .socialGiftCountTelemetry(let r)): return l == r
      case (.assetBundleTelemetry(let l), .assetBundleTelemetry(let r)): return l == r
      case (.assetPoiDownloadTelemetry(let l), .assetPoiDownloadTelemetry(let r)): return l == r
      case (.assetStreamDownloadTelemetry(let l), .assetStreamDownloadTelemetry(let r)): return l == r
      case (.assetStreamCacheCulledTelemetry(let l), .assetStreamCacheCulledTelemetry(let r)): return l == r
      case (.rpcSocketTimingTelemetry(let l), .rpcSocketTimingTelemetry(let r)): return l == r
      case (.permissionsFlow(let l), .permissionsFlow(let r)): return l == r
      case (.deviceServiceToggle(let l), .deviceServiceToggle(let r)): return l == r
      case (.bootTelemetry(let l), .bootTelemetry(let r)): return l == r
      case (.userAttributes(let l), .userAttributes(let r)): return l == r
      case (.onboardingTelemetry(let l), .onboardingTelemetry(let r)): return l == r
      case (.loginActionTelemetry(let l), .loginActionTelemetry(let r)): return l == r
      case (.arPhotoSessionTelemetry(let l), .arPhotoSessionTelemetry(let r)): return l == r
      case (.serverData(let l), .serverData(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_ClientTelemetryOmni: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientTelemetryOmni"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "boot_time"),
    2: .standard(proto: "frame_rate"),
    3: .standard(proto: "generic_click_telemetry"),
    4: .standard(proto: "map_events_telemetry"),
    5: .standard(proto: "spin_pokestop_telemetry"),
    6: .standard(proto: "profile_page_telemetry"),
    7: .standard(proto: "shopping_page_telemetry"),
    8: .standard(proto: "encounter_pokemon_telemetry"),
    9: .standard(proto: "catch_pokemon_telemetry"),
    10: .standard(proto: "deploy_pokemon_telemetry"),
    11: .standard(proto: "feed_pokemon_telemetry"),
    12: .standard(proto: "evolve_pokemon_telemetry"),
    13: .standard(proto: "release_pokemon_telemetry"),
    14: .standard(proto: "nickname_pokemon_telemetry"),
    15: .standard(proto: "news_page_telemetry"),
    16: .standard(proto: "item_telemetry"),
    17: .standard(proto: "battle_party_telemetry"),
    18: .standard(proto: "passcode_redeem_telemetry"),
    19: .standard(proto: "link_login_telemetry"),
    20: .standard(proto: "raid_telemetry"),
    21: .standard(proto: "push_notification_telemetry"),
    22: .standard(proto: "avatar_customization_telemetry"),
    23: .standard(proto: "read_point_of_interest_description_telemetry"),
    24: .standard(proto: "web_telemetry"),
    25: .standard(proto: "change_ar_telemetry"),
    26: .standard(proto: "weather_detail_click_telemetry"),
    27: .standard(proto: "user_issue_weather_report"),
    28: .standard(proto: "pokemon_inventory_telemetry"),
    29: .standard(proto: "social_telemetry"),
    30: .standard(proto: "check_encounter_info_telemetry"),
    31: .standard(proto: "pokemon_go_plus_telemetry"),
    32: .standard(proto: "rpc_timing_telemetry"),
    33: .standard(proto: "social_gift_count_telemetry"),
    34: .standard(proto: "asset_bundle_telemetry"),
    35: .standard(proto: "asset_poi_download_telemetry"),
    36: .standard(proto: "asset_stream_download_telemetry"),
    37: .standard(proto: "asset_stream_cache_culled_telemetry"),
    38: .standard(proto: "rpc_socket_timing_telemetry"),
    39: .standard(proto: "permissions_flow"),
    40: .standard(proto: "device_service_toggle"),
    41: .standard(proto: "boot_telemetry"),
    42: .standard(proto: "user_attributes"),
    43: .standard(proto: "onboarding_telemetry"),
    44: .standard(proto: "login_action_telemetry"),
    45: .standard(proto: "ar_photo_session_telemetry"),
    1001: .standard(proto: "server_data"),
  ]

  fileprivate class _StorageClass {
    var _telemetryData: POGOProtos_Data_Telemetry_ClientTelemetryOmni.OneOf_TelemetryData?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _telemetryData = source._telemetryData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: POGOProtos_Data_Telemetry_BootTime?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .bootTime(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .bootTime(v)}
        case 2:
          var v: POGOProtos_Data_Telemetry_FrameRate?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .frameRate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .frameRate(v)}
        case 3:
          var v: POGOProtos_Data_Telemetry_GenericClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .genericClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .genericClickTelemetry(v)}
        case 4:
          var v: POGOProtos_Data_Telemetry_MapEventsTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .mapEventsTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .mapEventsTelemetry(v)}
        case 5:
          var v: POGOProtos_Data_Telemetry_SpinPokestopTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .spinPokestopTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .spinPokestopTelemetry(v)}
        case 6:
          var v: POGOProtos_Data_Telemetry_ProfilePageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .profilePageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .profilePageTelemetry(v)}
        case 7:
          var v: POGOProtos_Data_Telemetry_ShoppingPageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .shoppingPageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .shoppingPageTelemetry(v)}
        case 8:
          var v: POGOProtos_Data_Telemetry_EncounterPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .encounterPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .encounterPokemonTelemetry(v)}
        case 9:
          var v: POGOProtos_Data_Telemetry_CatchPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .catchPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .catchPokemonTelemetry(v)}
        case 10:
          var v: POGOProtos_Data_Telemetry_DeployPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deployPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deployPokemonTelemetry(v)}
        case 11:
          var v: POGOProtos_Data_Telemetry_FeedPokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .feedPokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .feedPokemonTelemetry(v)}
        case 12:
          var v: POGOProtos_Data_Telemetry_EvolvePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .evolvePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .evolvePokemonTelemetry(v)}
        case 13:
          var v: POGOProtos_Data_Telemetry_ReleasePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .releasePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .releasePokemonTelemetry(v)}
        case 14:
          var v: POGOProtos_Data_Telemetry_NicknamePokemonTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .nicknamePokemonTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .nicknamePokemonTelemetry(v)}
        case 15:
          var v: POGOProtos_Data_Telemetry_NewsPageTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .newsPageTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .newsPageTelemetry(v)}
        case 16:
          var v: POGOProtos_Data_Telemetry_ItemTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .itemTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .itemTelemetry(v)}
        case 17:
          var v: POGOProtos_Data_Telemetry_BattlePartyTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .battlePartyTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .battlePartyTelemetry(v)}
        case 18:
          var v: POGOProtos_Data_Telemetry_PasscodeRedeemTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .passcodeRedeemTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .passcodeRedeemTelemetry(v)}
        case 19:
          var v: POGOProtos_Data_Telemetry_LinkLoginTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .linkLoginTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .linkLoginTelemetry(v)}
        case 20:
          var v: POGOProtos_Data_Telemetry_RaidTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .raidTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .raidTelemetry(v)}
        case 21:
          var v: POGOProtos_Data_Telemetry_PushNotificationTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pushNotificationTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pushNotificationTelemetry(v)}
        case 22:
          var v: POGOProtos_Data_Telemetry_AvatarCustomizationTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .avatarCustomizationTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .avatarCustomizationTelemetry(v)}
        case 23:
          var v: POGOProtos_Data_Telemetry_ReadPointOfInterestDescriptionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .readPointOfInterestDescriptionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .readPointOfInterestDescriptionTelemetry(v)}
        case 24:
          var v: POGOProtos_Data_Telemetry_WebTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .webTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .webTelemetry(v)}
        case 25:
          var v: POGOProtos_Data_Telemetry_ChangeArTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .changeArTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .changeArTelemetry(v)}
        case 26:
          var v: POGOProtos_Data_Telemetry_WeatherDetailClickTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .weatherDetailClickTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .weatherDetailClickTelemetry(v)}
        case 27:
          var v: POGOProtos_Data_Player_UserIssueWeatherReport?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .userIssueWeatherReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .userIssueWeatherReport(v)}
        case 28:
          var v: POGOProtos_Data_Telemetry_PokemonInventoryTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonInventoryTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonInventoryTelemetry(v)}
        case 29:
          var v: POGOProtos_Data_Telemetry_SocialTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .socialTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .socialTelemetry(v)}
        case 30:
          var v: POGOProtos_Data_Telemetry_CheckEncounterTrayInfoTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .checkEncounterInfoTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .checkEncounterInfoTelemetry(v)}
        case 31:
          var v: POGOProtos_Data_Telemetry_PokemonGoPlusTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .pokemonGoPlusTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .pokemonGoPlusTelemetry(v)}
        case 32:
          var v: POGOProtos_Data_Telemetry_RpcResponseTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .rpcTimingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .rpcTimingTelemetry(v)}
        case 33:
          var v: POGOProtos_Settings_SocialGiftCountTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .socialGiftCountTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .socialGiftCountTelemetry(v)}
        case 34:
          var v: POGOProtos_Data_Telemetry_AssetBundleDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetBundleTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetBundleTelemetry(v)}
        case 35:
          var v: POGOProtos_Data_Telemetry_AssetPoiDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetPoiDownloadTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetPoiDownloadTelemetry(v)}
        case 36:
          var v: POGOProtos_Data_Telemetry_AssetStreamDownloadTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetStreamDownloadTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetStreamDownloadTelemetry(v)}
        case 37:
          var v: POGOProtos_Data_Telemetry_AssetStreamCacheCulledTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .assetStreamCacheCulledTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .assetStreamCacheCulledTelemetry(v)}
        case 38:
          var v: POGOProtos_Data_Telemetry_RpcSocketResponseTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .rpcSocketTimingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .rpcSocketTimingTelemetry(v)}
        case 39:
          var v: POGOProtos_Data_Telemetry_PermissionsFlowTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .permissionsFlow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .permissionsFlow(v)}
        case 40:
          var v: POGOProtos_Data_Telemetry_DeviceServiceToggleTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .deviceServiceToggle(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .deviceServiceToggle(v)}
        case 41:
          var v: POGOProtos_Data_Telemetry_BootTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .bootTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .bootTelemetry(v)}
        case 42:
          var v: POGOProtos_Data_Player_UserAttributes?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .userAttributes(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .userAttributes(v)}
        case 43:
          var v: POGOProtos_Data_Telemetry_OnboardingTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .onboardingTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .onboardingTelemetry(v)}
        case 44:
          var v: POGOProtos_Data_Telemetry_LoginActionTelemetry?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .loginActionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .loginActionTelemetry(v)}
        case 45:
          var v: POGOProtos_Data_Telemetry_ArPhotoSession?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .arPhotoSessionTelemetry(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .arPhotoSessionTelemetry(v)}
        case 1001:
          var v: POGOProtos_Data_Telemetry_PlatformServerData?
          if let current = _storage._telemetryData {
            try decoder.handleConflictingOneOf()
            if case .serverData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._telemetryData = .serverData(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._telemetryData {
      case .bootTime(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .frameRate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .genericClickTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .mapEventsTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .spinPokestopTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .profilePageTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .shoppingPageTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .encounterPokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .catchPokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .deployPokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .feedPokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .evolvePokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .releasePokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .nicknamePokemonTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .newsPageTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .itemTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .battlePartyTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .passcodeRedeemTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case .linkLoginTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case .raidTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .pushNotificationTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .avatarCustomizationTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case .readPointOfInterestDescriptionTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      case .webTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      case .changeArTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      case .weatherDetailClickTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      case .userIssueWeatherReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      case .pokemonInventoryTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      case .socialTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      case .checkEncounterInfoTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      case .pokemonGoPlusTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      case .rpcTimingTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      case .socialGiftCountTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      case .assetBundleTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      case .assetPoiDownloadTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      case .assetStreamDownloadTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      case .assetStreamCacheCulledTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      case .rpcSocketTimingTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      case .permissionsFlow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      case .deviceServiceToggle(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      case .bootTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      case .userAttributes(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      case .onboardingTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      case .loginActionTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      case .arPhotoSessionTelemetry(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      case .serverData(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni, rhs: POGOProtos_Data_Telemetry_ClientTelemetryOmni) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._telemetryData != rhs_storage._telemetryData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
