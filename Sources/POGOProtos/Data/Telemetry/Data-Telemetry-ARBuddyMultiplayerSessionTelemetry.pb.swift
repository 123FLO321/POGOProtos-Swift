// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Telemetry/ARBuddyMultiplayerSessionTelemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cameraPermissionGranted: Bool {
    get {return _storage._cameraPermissionGranted}
    set {_uniqueStorage()._cameraPermissionGranted = newValue}
  }

  public var hostTimeToPublishFirstMap: Int64 {
    get {return _storage._hostTimeToPublishFirstMap}
    set {_uniqueStorage()._hostTimeToPublishFirstMap = newValue}
  }

  public var hostNumberOfMapsPublished: Int32 {
    get {return _storage._hostNumberOfMapsPublished}
    set {_uniqueStorage()._hostNumberOfMapsPublished = newValue}
  }

  public var hostMappingSuccessful: Bool {
    get {return _storage._hostMappingSuccessful}
    set {_uniqueStorage()._hostMappingSuccessful = newValue}
  }

  public var lobbyConnectionSuccessful: Bool {
    get {return _storage._lobbyConnectionSuccessful}
    set {_uniqueStorage()._lobbyConnectionSuccessful = newValue}
  }

  public var timeFromStartOfSessionToSync: Int64 {
    get {return _storage._timeFromStartOfSessionToSync}
    set {_uniqueStorage()._timeFromStartOfSessionToSync = newValue}
  }

  public var syncSuccessful: Bool {
    get {return _storage._syncSuccessful}
    set {_uniqueStorage()._syncSuccessful = newValue}
  }

  public var sessionLength: Int64 {
    get {return _storage._sessionLength}
    set {_uniqueStorage()._sessionLength = newValue}
  }

  public var crashCount: Int32 {
    get {return _storage._crashCount}
    set {_uniqueStorage()._crashCount = newValue}
  }

  public var durationSpentInLobby: Int64 {
    get {return _storage._durationSpentInLobby}
    set {_uniqueStorage()._durationSpentInLobby = newValue}
  }

  public var timeFromInviteToLobby: Int64 {
    get {return _storage._timeFromInviteToLobby}
    set {_uniqueStorage()._timeFromInviteToLobby = newValue}
  }

  public var timeFromLobbyToSession: Int64 {
    get {return _storage._timeFromLobbyToSession}
    set {_uniqueStorage()._timeFromLobbyToSession = newValue}
  }

  public var lengthOfArSession: Int64 {
    get {return _storage._lengthOfArSession}
    set {_uniqueStorage()._lengthOfArSession = newValue}
  }

  public var playersConnected: Int32 {
    get {return _storage._playersConnected}
    set {_uniqueStorage()._playersConnected = newValue}
  }

  public var playersDropped: Int32 {
    get {return _storage._playersDropped}
    set {_uniqueStorage()._playersDropped = newValue}
  }

  public var numPhotosTaken: Int32 {
    get {return _storage._numPhotosTaken}
    set {_uniqueStorage()._numPhotosTaken = newValue}
  }

  public var isHost: Bool {
    get {return _storage._isHost}
    set {_uniqueStorage()._isHost = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Telemetry"

extension POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ARBuddyMultiplayerSessionTelemetry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_permission_granted"),
    2: .standard(proto: "host_time_to_publish_first_map"),
    3: .standard(proto: "host_number_of_maps_published"),
    4: .standard(proto: "host_mapping_successful"),
    5: .standard(proto: "lobby_connection_successful"),
    6: .standard(proto: "time_from_start_of_session_to_sync"),
    7: .standard(proto: "sync_successful"),
    8: .standard(proto: "session_length"),
    9: .standard(proto: "crash_count"),
    10: .standard(proto: "duration_spent_in_lobby"),
    11: .standard(proto: "time_from_invite_to_lobby"),
    12: .standard(proto: "time_from_lobby_to_session"),
    13: .standard(proto: "length_of_ar_session"),
    14: .standard(proto: "players_connected"),
    15: .standard(proto: "players_dropped"),
    16: .standard(proto: "num_photos_taken"),
    17: .standard(proto: "is_host"),
  ]

  fileprivate class _StorageClass {
    var _cameraPermissionGranted: Bool = false
    var _hostTimeToPublishFirstMap: Int64 = 0
    var _hostNumberOfMapsPublished: Int32 = 0
    var _hostMappingSuccessful: Bool = false
    var _lobbyConnectionSuccessful: Bool = false
    var _timeFromStartOfSessionToSync: Int64 = 0
    var _syncSuccessful: Bool = false
    var _sessionLength: Int64 = 0
    var _crashCount: Int32 = 0
    var _durationSpentInLobby: Int64 = 0
    var _timeFromInviteToLobby: Int64 = 0
    var _timeFromLobbyToSession: Int64 = 0
    var _lengthOfArSession: Int64 = 0
    var _playersConnected: Int32 = 0
    var _playersDropped: Int32 = 0
    var _numPhotosTaken: Int32 = 0
    var _isHost: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraPermissionGranted = source._cameraPermissionGranted
      _hostTimeToPublishFirstMap = source._hostTimeToPublishFirstMap
      _hostNumberOfMapsPublished = source._hostNumberOfMapsPublished
      _hostMappingSuccessful = source._hostMappingSuccessful
      _lobbyConnectionSuccessful = source._lobbyConnectionSuccessful
      _timeFromStartOfSessionToSync = source._timeFromStartOfSessionToSync
      _syncSuccessful = source._syncSuccessful
      _sessionLength = source._sessionLength
      _crashCount = source._crashCount
      _durationSpentInLobby = source._durationSpentInLobby
      _timeFromInviteToLobby = source._timeFromInviteToLobby
      _timeFromLobbyToSession = source._timeFromLobbyToSession
      _lengthOfArSession = source._lengthOfArSession
      _playersConnected = source._playersConnected
      _playersDropped = source._playersDropped
      _numPhotosTaken = source._numPhotosTaken
      _isHost = source._isHost
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._cameraPermissionGranted) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._hostTimeToPublishFirstMap) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._hostNumberOfMapsPublished) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._hostMappingSuccessful) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._lobbyConnectionSuccessful) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._timeFromStartOfSessionToSync) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._syncSuccessful) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._sessionLength) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._crashCount) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._durationSpentInLobby) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._timeFromInviteToLobby) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._timeFromLobbyToSession) }()
        case 13: try { try decoder.decodeSingularInt64Field(value: &_storage._lengthOfArSession) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._playersConnected) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._playersDropped) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._numPhotosTaken) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._isHost) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._cameraPermissionGranted != false {
        try visitor.visitSingularBoolField(value: _storage._cameraPermissionGranted, fieldNumber: 1)
      }
      if _storage._hostTimeToPublishFirstMap != 0 {
        try visitor.visitSingularInt64Field(value: _storage._hostTimeToPublishFirstMap, fieldNumber: 2)
      }
      if _storage._hostNumberOfMapsPublished != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hostNumberOfMapsPublished, fieldNumber: 3)
      }
      if _storage._hostMappingSuccessful != false {
        try visitor.visitSingularBoolField(value: _storage._hostMappingSuccessful, fieldNumber: 4)
      }
      if _storage._lobbyConnectionSuccessful != false {
        try visitor.visitSingularBoolField(value: _storage._lobbyConnectionSuccessful, fieldNumber: 5)
      }
      if _storage._timeFromStartOfSessionToSync != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeFromStartOfSessionToSync, fieldNumber: 6)
      }
      if _storage._syncSuccessful != false {
        try visitor.visitSingularBoolField(value: _storage._syncSuccessful, fieldNumber: 7)
      }
      if _storage._sessionLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sessionLength, fieldNumber: 8)
      }
      if _storage._crashCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._crashCount, fieldNumber: 9)
      }
      if _storage._durationSpentInLobby != 0 {
        try visitor.visitSingularInt64Field(value: _storage._durationSpentInLobby, fieldNumber: 10)
      }
      if _storage._timeFromInviteToLobby != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeFromInviteToLobby, fieldNumber: 11)
      }
      if _storage._timeFromLobbyToSession != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeFromLobbyToSession, fieldNumber: 12)
      }
      if _storage._lengthOfArSession != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lengthOfArSession, fieldNumber: 13)
      }
      if _storage._playersConnected != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playersConnected, fieldNumber: 14)
      }
      if _storage._playersDropped != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playersDropped, fieldNumber: 15)
      }
      if _storage._numPhotosTaken != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numPhotosTaken, fieldNumber: 16)
      }
      if _storage._isHost != false {
        try visitor.visitSingularBoolField(value: _storage._isHost, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry, rhs: POGOProtos_Data_Telemetry_ARBuddyMultiplayerSessionTelemetry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraPermissionGranted != rhs_storage._cameraPermissionGranted {return false}
        if _storage._hostTimeToPublishFirstMap != rhs_storage._hostTimeToPublishFirstMap {return false}
        if _storage._hostNumberOfMapsPublished != rhs_storage._hostNumberOfMapsPublished {return false}
        if _storage._hostMappingSuccessful != rhs_storage._hostMappingSuccessful {return false}
        if _storage._lobbyConnectionSuccessful != rhs_storage._lobbyConnectionSuccessful {return false}
        if _storage._timeFromStartOfSessionToSync != rhs_storage._timeFromStartOfSessionToSync {return false}
        if _storage._syncSuccessful != rhs_storage._syncSuccessful {return false}
        if _storage._sessionLength != rhs_storage._sessionLength {return false}
        if _storage._crashCount != rhs_storage._crashCount {return false}
        if _storage._durationSpentInLobby != rhs_storage._durationSpentInLobby {return false}
        if _storage._timeFromInviteToLobby != rhs_storage._timeFromInviteToLobby {return false}
        if _storage._timeFromLobbyToSession != rhs_storage._timeFromLobbyToSession {return false}
        if _storage._lengthOfArSession != rhs_storage._lengthOfArSession {return false}
        if _storage._playersConnected != rhs_storage._playersConnected {return false}
        if _storage._playersDropped != rhs_storage._playersDropped {return false}
        if _storage._numPhotosTaken != rhs_storage._numPhotosTaken {return false}
        if _storage._isHost != rhs_storage._isHost {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
