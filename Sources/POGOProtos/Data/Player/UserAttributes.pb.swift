// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Player/UserAttributes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Data_Player_UserAttributes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var level: Int32 = 0

  var xp: Int64 = 0

  var avatar: Int32 = 0

  var itemCount: Int64 = 0

  var pokemonCount: Int64 = 0

  var pokecoinCount: Int64 = 0

  var team: Int32 = 0

  var catchStreak: Int32 = 0

  var spinStreak: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Player"

extension POGOProtos_Data_Player_UserAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserAttributes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "xp"),
    3: .same(proto: "avatar"),
    4: .standard(proto: "item_count"),
    5: .standard(proto: "pokemon_count"),
    6: .standard(proto: "pokecoin_count"),
    7: .same(proto: "team"),
    8: .standard(proto: "catch_streak"),
    9: .standard(proto: "spin_streak"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.level)
      case 2: try decoder.decodeSingularInt64Field(value: &self.xp)
      case 3: try decoder.decodeSingularInt32Field(value: &self.avatar)
      case 4: try decoder.decodeSingularInt64Field(value: &self.itemCount)
      case 5: try decoder.decodeSingularInt64Field(value: &self.pokemonCount)
      case 6: try decoder.decodeSingularInt64Field(value: &self.pokecoinCount)
      case 7: try decoder.decodeSingularInt32Field(value: &self.team)
      case 8: try decoder.decodeSingularInt32Field(value: &self.catchStreak)
      case 9: try decoder.decodeSingularInt32Field(value: &self.spinStreak)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != 0 {
      try visitor.visitSingularInt32Field(value: self.level, fieldNumber: 1)
    }
    if self.xp != 0 {
      try visitor.visitSingularInt64Field(value: self.xp, fieldNumber: 2)
    }
    if self.avatar != 0 {
      try visitor.visitSingularInt32Field(value: self.avatar, fieldNumber: 3)
    }
    if self.itemCount != 0 {
      try visitor.visitSingularInt64Field(value: self.itemCount, fieldNumber: 4)
    }
    if self.pokemonCount != 0 {
      try visitor.visitSingularInt64Field(value: self.pokemonCount, fieldNumber: 5)
    }
    if self.pokecoinCount != 0 {
      try visitor.visitSingularInt64Field(value: self.pokecoinCount, fieldNumber: 6)
    }
    if self.team != 0 {
      try visitor.visitSingularInt32Field(value: self.team, fieldNumber: 7)
    }
    if self.catchStreak != 0 {
      try visitor.visitSingularInt32Field(value: self.catchStreak, fieldNumber: 8)
    }
    if self.spinStreak != 0 {
      try visitor.visitSingularInt32Field(value: self.spinStreak, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Data_Player_UserAttributes, rhs: POGOProtos_Data_Player_UserAttributes) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.xp != rhs.xp {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.itemCount != rhs.itemCount {return false}
    if lhs.pokemonCount != rhs.pokemonCount {return false}
    if lhs.pokecoinCount != rhs.pokecoinCount {return false}
    if lhs.team != rhs.team {return false}
    if lhs.catchStreak != rhs.catchStreak {return false}
    if lhs.spinStreak != rhs.spinStreak {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
