// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Player/Currency.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Player_Currency {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currencyType: String = String()

  public var quantity: Int32 = 0

  public var fiatPurchasedQuantity: Int32 = 0

  public var fiatCurrencyType: String = String()

  public var fiatCurrencyCostE6: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Player"

extension POGOProtos_Data_Player_Currency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Currency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "currency_type"),
    2: .same(proto: "quantity"),
    3: .standard(proto: "fiat_purchased_quantity"),
    4: .standard(proto: "fiat_currency_type"),
    5: .standard(proto: "fiat_currency_cost_e6"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.currencyType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.quantity)
      case 3: try decoder.decodeSingularInt32Field(value: &self.fiatPurchasedQuantity)
      case 4: try decoder.decodeSingularStringField(value: &self.fiatCurrencyType)
      case 5: try decoder.decodeSingularInt64Field(value: &self.fiatCurrencyCostE6)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currencyType.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyType, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularInt32Field(value: self.quantity, fieldNumber: 2)
    }
    if self.fiatPurchasedQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.fiatPurchasedQuantity, fieldNumber: 3)
    }
    if !self.fiatCurrencyType.isEmpty {
      try visitor.visitSingularStringField(value: self.fiatCurrencyType, fieldNumber: 4)
    }
    if self.fiatCurrencyCostE6 != 0 {
      try visitor.visitSingularInt64Field(value: self.fiatCurrencyCostE6, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Player_Currency, rhs: POGOProtos_Data_Player_Currency) -> Bool {
    if lhs.currencyType != rhs.currencyType {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.fiatPurchasedQuantity != rhs.fiatPurchasedQuantity {return false}
    if lhs.fiatCurrencyType != rhs.fiatCurrencyType {return false}
    if lhs.fiatCurrencyCostE6 != rhs.fiatCurrencyCostE6 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
