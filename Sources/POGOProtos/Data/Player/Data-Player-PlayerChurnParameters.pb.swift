// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Data/Player/PlayerChurnParameters.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Data_Player_PlayerChurnParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: String {
    get {return _storage._accountID}
    set {_uniqueStorage()._accountID = newValue}
  }

  public var codeName: String {
    get {return _storage._codeName}
    set {_uniqueStorage()._codeName = newValue}
  }

  public var team: String {
    get {return _storage._team}
    set {_uniqueStorage()._team = newValue}
  }

  public var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var level: Int32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  public var totalPokemonCaught: Int32 {
    get {return _storage._totalPokemonCaught}
    set {_uniqueStorage()._totalPokemonCaught = newValue}
  }

  public var giftsOpenedDaily: Int32 {
    get {return _storage._giftsOpenedDaily}
    set {_uniqueStorage()._giftsOpenedDaily = newValue}
  }

  public var totalBigKarps: Int32 {
    get {return _storage._totalBigKarps}
    set {_uniqueStorage()._totalBigKarps = newValue}
  }

  public var stardustBalance: Int32 {
    get {return _storage._stardustBalance}
    set {_uniqueStorage()._stardustBalance = newValue}
  }

  public var totalRaids: Int32 {
    get {return _storage._totalRaids}
    set {_uniqueStorage()._totalRaids = newValue}
  }

  public var totalPokemonEvolved: Int32 {
    get {return _storage._totalPokemonEvolved}
    set {_uniqueStorage()._totalPokemonEvolved = newValue}
  }

  public var totalLegendaryRaids: Int32 {
    get {return _storage._totalLegendaryRaids}
    set {_uniqueStorage()._totalLegendaryRaids = newValue}
  }

  public var totalEggsHatched: Int32 {
    get {return _storage._totalEggsHatched}
    set {_uniqueStorage()._totalEggsHatched = newValue}
  }

  public var totalBattleAttackWon: Int32 {
    get {return _storage._totalBattleAttackWon}
    set {_uniqueStorage()._totalBattleAttackWon = newValue}
  }

  public var totalBattleDefendedWon: Int32 {
    get {return _storage._totalBattleDefendedWon}
    set {_uniqueStorage()._totalBattleDefendedWon = newValue}
  }

  public var totalQuestsCompleted: Int32 {
    get {return _storage._totalQuestsCompleted}
    set {_uniqueStorage()._totalQuestsCompleted = newValue}
  }

  public var pokeCoinBalance: Int32 {
    get {return _storage._pokeCoinBalance}
    set {_uniqueStorage()._pokeCoinBalance = newValue}
  }

  public var pokemonCaughtActiveDay: Int32 {
    get {return _storage._pokemonCaughtActiveDay}
    set {_uniqueStorage()._pokemonCaughtActiveDay = newValue}
  }

  public var totalKmWalked: Float {
    get {return _storage._totalKmWalked}
    set {_uniqueStorage()._totalKmWalked = newValue}
  }

  public var numPokedexEntries: Float {
    get {return _storage._numPokedexEntries}
    set {_uniqueStorage()._numPokedexEntries = newValue}
  }

  public var kmWalkedPastActiveDay: Float {
    get {return _storage._kmWalkedPastActiveDay}
    set {_uniqueStorage()._kmWalkedPastActiveDay = newValue}
  }

  public var daysSinceLastLogon: Int64 {
    get {return _storage._daysSinceLastLogon}
    set {_uniqueStorage()._daysSinceLastLogon = newValue}
  }

  public var daysSinceCreation: Int64 {
    get {return _storage._daysSinceCreation}
    set {_uniqueStorage()._daysSinceCreation = newValue}
  }

  public var daysSinceLastPokemonCaught: Int64 {
    get {return _storage._daysSinceLastPokemonCaught}
    set {_uniqueStorage()._daysSinceLastPokemonCaught = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Data.Player"

extension POGOProtos_Data_Player_PlayerChurnParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerChurnParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "code_name"),
    3: .same(proto: "team"),
    4: .same(proto: "country"),
    5: .same(proto: "level"),
    6: .standard(proto: "total_pokemon_caught"),
    7: .standard(proto: "gifts_opened_daily"),
    8: .standard(proto: "total_big_karps"),
    9: .standard(proto: "stardust_balance"),
    10: .standard(proto: "total_raids"),
    11: .standard(proto: "total_pokemon_evolved"),
    12: .standard(proto: "total_legendary_raids"),
    13: .standard(proto: "total_eggs_hatched"),
    14: .standard(proto: "total_battle_attack_won"),
    15: .standard(proto: "total_battle_defended_won"),
    16: .standard(proto: "total_quests_completed"),
    17: .standard(proto: "poke_coin_balance"),
    18: .standard(proto: "pokemon_caught_active_day"),
    19: .standard(proto: "total_km_walked"),
    20: .standard(proto: "num_pokedex_entries"),
    21: .standard(proto: "km_walked_past_active_day"),
    22: .standard(proto: "days_since_last_logon"),
    23: .standard(proto: "days_since_creation"),
    24: .standard(proto: "days_since_last_pokemon_caught"),
  ]

  fileprivate class _StorageClass {
    var _accountID: String = String()
    var _codeName: String = String()
    var _team: String = String()
    var _country: String = String()
    var _level: Int32 = 0
    var _totalPokemonCaught: Int32 = 0
    var _giftsOpenedDaily: Int32 = 0
    var _totalBigKarps: Int32 = 0
    var _stardustBalance: Int32 = 0
    var _totalRaids: Int32 = 0
    var _totalPokemonEvolved: Int32 = 0
    var _totalLegendaryRaids: Int32 = 0
    var _totalEggsHatched: Int32 = 0
    var _totalBattleAttackWon: Int32 = 0
    var _totalBattleDefendedWon: Int32 = 0
    var _totalQuestsCompleted: Int32 = 0
    var _pokeCoinBalance: Int32 = 0
    var _pokemonCaughtActiveDay: Int32 = 0
    var _totalKmWalked: Float = 0
    var _numPokedexEntries: Float = 0
    var _kmWalkedPastActiveDay: Float = 0
    var _daysSinceLastLogon: Int64 = 0
    var _daysSinceCreation: Int64 = 0
    var _daysSinceLastPokemonCaught: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _codeName = source._codeName
      _team = source._team
      _country = source._country
      _level = source._level
      _totalPokemonCaught = source._totalPokemonCaught
      _giftsOpenedDaily = source._giftsOpenedDaily
      _totalBigKarps = source._totalBigKarps
      _stardustBalance = source._stardustBalance
      _totalRaids = source._totalRaids
      _totalPokemonEvolved = source._totalPokemonEvolved
      _totalLegendaryRaids = source._totalLegendaryRaids
      _totalEggsHatched = source._totalEggsHatched
      _totalBattleAttackWon = source._totalBattleAttackWon
      _totalBattleDefendedWon = source._totalBattleDefendedWon
      _totalQuestsCompleted = source._totalQuestsCompleted
      _pokeCoinBalance = source._pokeCoinBalance
      _pokemonCaughtActiveDay = source._pokemonCaughtActiveDay
      _totalKmWalked = source._totalKmWalked
      _numPokedexEntries = source._numPokedexEntries
      _kmWalkedPastActiveDay = source._kmWalkedPastActiveDay
      _daysSinceLastLogon = source._daysSinceLastLogon
      _daysSinceCreation = source._daysSinceCreation
      _daysSinceLastPokemonCaught = source._daysSinceLastPokemonCaught
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._accountID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._codeName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._team)
        case 4: try decoder.decodeSingularStringField(value: &_storage._country)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._level)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._totalPokemonCaught)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._giftsOpenedDaily)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._totalBigKarps)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._stardustBalance)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._totalRaids)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._totalPokemonEvolved)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._totalLegendaryRaids)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._totalEggsHatched)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._totalBattleAttackWon)
        case 15: try decoder.decodeSingularInt32Field(value: &_storage._totalBattleDefendedWon)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._totalQuestsCompleted)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._pokeCoinBalance)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._pokemonCaughtActiveDay)
        case 19: try decoder.decodeSingularFloatField(value: &_storage._totalKmWalked)
        case 20: try decoder.decodeSingularFloatField(value: &_storage._numPokedexEntries)
        case 21: try decoder.decodeSingularFloatField(value: &_storage._kmWalkedPastActiveDay)
        case 22: try decoder.decodeSingularInt64Field(value: &_storage._daysSinceLastLogon)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._daysSinceCreation)
        case 24: try decoder.decodeSingularInt64Field(value: &_storage._daysSinceLastPokemonCaught)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._accountID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accountID, fieldNumber: 1)
      }
      if !_storage._codeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codeName, fieldNumber: 2)
      }
      if !_storage._team.isEmpty {
        try visitor.visitSingularStringField(value: _storage._team, fieldNumber: 3)
      }
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 4)
      }
      if _storage._level != 0 {
        try visitor.visitSingularInt32Field(value: _storage._level, fieldNumber: 5)
      }
      if _storage._totalPokemonCaught != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalPokemonCaught, fieldNumber: 6)
      }
      if _storage._giftsOpenedDaily != 0 {
        try visitor.visitSingularInt32Field(value: _storage._giftsOpenedDaily, fieldNumber: 7)
      }
      if _storage._totalBigKarps != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalBigKarps, fieldNumber: 8)
      }
      if _storage._stardustBalance != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stardustBalance, fieldNumber: 9)
      }
      if _storage._totalRaids != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalRaids, fieldNumber: 10)
      }
      if _storage._totalPokemonEvolved != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalPokemonEvolved, fieldNumber: 11)
      }
      if _storage._totalLegendaryRaids != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalLegendaryRaids, fieldNumber: 12)
      }
      if _storage._totalEggsHatched != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalEggsHatched, fieldNumber: 13)
      }
      if _storage._totalBattleAttackWon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalBattleAttackWon, fieldNumber: 14)
      }
      if _storage._totalBattleDefendedWon != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalBattleDefendedWon, fieldNumber: 15)
      }
      if _storage._totalQuestsCompleted != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalQuestsCompleted, fieldNumber: 16)
      }
      if _storage._pokeCoinBalance != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pokeCoinBalance, fieldNumber: 17)
      }
      if _storage._pokemonCaughtActiveDay != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pokemonCaughtActiveDay, fieldNumber: 18)
      }
      if _storage._totalKmWalked != 0 {
        try visitor.visitSingularFloatField(value: _storage._totalKmWalked, fieldNumber: 19)
      }
      if _storage._numPokedexEntries != 0 {
        try visitor.visitSingularFloatField(value: _storage._numPokedexEntries, fieldNumber: 20)
      }
      if _storage._kmWalkedPastActiveDay != 0 {
        try visitor.visitSingularFloatField(value: _storage._kmWalkedPastActiveDay, fieldNumber: 21)
      }
      if _storage._daysSinceLastLogon != 0 {
        try visitor.visitSingularInt64Field(value: _storage._daysSinceLastLogon, fieldNumber: 22)
      }
      if _storage._daysSinceCreation != 0 {
        try visitor.visitSingularInt64Field(value: _storage._daysSinceCreation, fieldNumber: 23)
      }
      if _storage._daysSinceLastPokemonCaught != 0 {
        try visitor.visitSingularInt64Field(value: _storage._daysSinceLastPokemonCaught, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Data_Player_PlayerChurnParameters, rhs: POGOProtos_Data_Player_PlayerChurnParameters) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._codeName != rhs_storage._codeName {return false}
        if _storage._team != rhs_storage._team {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._totalPokemonCaught != rhs_storage._totalPokemonCaught {return false}
        if _storage._giftsOpenedDaily != rhs_storage._giftsOpenedDaily {return false}
        if _storage._totalBigKarps != rhs_storage._totalBigKarps {return false}
        if _storage._stardustBalance != rhs_storage._stardustBalance {return false}
        if _storage._totalRaids != rhs_storage._totalRaids {return false}
        if _storage._totalPokemonEvolved != rhs_storage._totalPokemonEvolved {return false}
        if _storage._totalLegendaryRaids != rhs_storage._totalLegendaryRaids {return false}
        if _storage._totalEggsHatched != rhs_storage._totalEggsHatched {return false}
        if _storage._totalBattleAttackWon != rhs_storage._totalBattleAttackWon {return false}
        if _storage._totalBattleDefendedWon != rhs_storage._totalBattleDefendedWon {return false}
        if _storage._totalQuestsCompleted != rhs_storage._totalQuestsCompleted {return false}
        if _storage._pokeCoinBalance != rhs_storage._pokeCoinBalance {return false}
        if _storage._pokemonCaughtActiveDay != rhs_storage._pokemonCaughtActiveDay {return false}
        if _storage._totalKmWalked != rhs_storage._totalKmWalked {return false}
        if _storage._numPokedexEntries != rhs_storage._numPokedexEntries {return false}
        if _storage._kmWalkedPastActiveDay != rhs_storage._kmWalkedPastActiveDay {return false}
        if _storage._daysSinceLastLogon != rhs_storage._daysSinceLastLogon {return false}
        if _storage._daysSinceCreation != rhs_storage._daysSinceCreation {return false}
        if _storage._daysSinceLastPokemonCaught != rhs_storage._daysSinceLastPokemonCaught {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
