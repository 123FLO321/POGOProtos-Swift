// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Inventory/InventoryKey.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Inventory_InventoryKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var pokemonID: UInt64 {
    get {
      if case .pokemonID(let v)? = _storage._type {return v}
      return 0
    }
    set {_uniqueStorage()._type = .pokemonID(newValue)}
  }

  public var item: POGOProtos_Inventory_Item_ItemId {
    get {
      if case .item(let v)? = _storage._type {return v}
      return .itemUnknown
    }
    set {_uniqueStorage()._type = .item(newValue)}
  }

  public var pokedexEntryID: Int32 {
    get {
      if case .pokedexEntryID(let v)? = _storage._type {return v}
      return 0
    }
    set {_uniqueStorage()._type = .pokedexEntryID(newValue)}
  }

  public var playerStats: Bool {
    get {
      if case .playerStats(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .playerStats(newValue)}
  }

  public var playerCurrency: Bool {
    get {
      if case .playerCurrency(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .playerCurrency(newValue)}
  }

  public var playerCamera: Bool {
    get {
      if case .playerCamera(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .playerCamera(newValue)}
  }

  public var inventoryUpgrades: Bool {
    get {
      if case .inventoryUpgrades(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .inventoryUpgrades(newValue)}
  }

  public var appliedItems: Bool {
    get {
      if case .appliedItems(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .appliedItems(newValue)}
  }

  public var eggIncubators: Bool {
    get {
      if case .eggIncubators(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .eggIncubators(newValue)}
  }

  public var pokemonFamilyID: POGOProtos_Enums_PokemonFamilyId {
    get {
      if case .pokemonFamilyID(let v)? = _storage._type {return v}
      return .familyUnset
    }
    set {_uniqueStorage()._type = .pokemonFamilyID(newValue)}
  }

  public var questType: POGOProtos_Enums_QuestType {
    get {
      if case .questType(let v)? = _storage._type {return v}
      return .questUnknownType
    }
    set {_uniqueStorage()._type = .questType(newValue)}
  }

  public var avatarTemplateID: String {
    get {
      if case .avatarTemplateID(let v)? = _storage._type {return v}
      return String()
    }
    set {_uniqueStorage()._type = .avatarTemplateID(newValue)}
  }

  public var raidTickets: Bool {
    get {
      if case .raidTickets(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .raidTickets(newValue)}
  }

  public var quests: Bool {
    get {
      if case .quests(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .quests(newValue)}
  }

  public var giftBoxes: Bool {
    get {
      if case .giftBoxes(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .giftBoxes(newValue)}
  }

  public var belugaIncenseBox: Bool {
    get {
      if case .belugaIncenseBox(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .belugaIncenseBox(newValue)}
  }

  public var vsSeekerUpgrades: Bool {
    get {
      if case .vsSeekerUpgrades(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .vsSeekerUpgrades(newValue)}
  }

  public var limitedPurchaseSkuRecord: Bool {
    get {
      if case .limitedPurchaseSkuRecord(let v)? = _storage._type {return v}
      return false
    }
    set {_uniqueStorage()._type = .limitedPurchaseSkuRecord(newValue)}
  }

  public var stickerID: String {
    get {
      if case .stickerID(let v)? = _storage._type {return v}
      return String()
    }
    set {_uniqueStorage()._type = .stickerID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case pokemonID(UInt64)
    case item(POGOProtos_Inventory_Item_ItemId)
    case pokedexEntryID(Int32)
    case playerStats(Bool)
    case playerCurrency(Bool)
    case playerCamera(Bool)
    case inventoryUpgrades(Bool)
    case appliedItems(Bool)
    case eggIncubators(Bool)
    case pokemonFamilyID(POGOProtos_Enums_PokemonFamilyId)
    case questType(POGOProtos_Enums_QuestType)
    case avatarTemplateID(String)
    case raidTickets(Bool)
    case quests(Bool)
    case giftBoxes(Bool)
    case belugaIncenseBox(Bool)
    case vsSeekerUpgrades(Bool)
    case limitedPurchaseSkuRecord(Bool)
    case stickerID(String)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Inventory_InventoryKey.OneOf_Type, rhs: POGOProtos_Inventory_InventoryKey.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.pokemonID(let l), .pokemonID(let r)): return l == r
      case (.item(let l), .item(let r)): return l == r
      case (.pokedexEntryID(let l), .pokedexEntryID(let r)): return l == r
      case (.playerStats(let l), .playerStats(let r)): return l == r
      case (.playerCurrency(let l), .playerCurrency(let r)): return l == r
      case (.playerCamera(let l), .playerCamera(let r)): return l == r
      case (.inventoryUpgrades(let l), .inventoryUpgrades(let r)): return l == r
      case (.appliedItems(let l), .appliedItems(let r)): return l == r
      case (.eggIncubators(let l), .eggIncubators(let r)): return l == r
      case (.pokemonFamilyID(let l), .pokemonFamilyID(let r)): return l == r
      case (.questType(let l), .questType(let r)): return l == r
      case (.avatarTemplateID(let l), .avatarTemplateID(let r)): return l == r
      case (.raidTickets(let l), .raidTickets(let r)): return l == r
      case (.quests(let l), .quests(let r)): return l == r
      case (.giftBoxes(let l), .giftBoxes(let r)): return l == r
      case (.belugaIncenseBox(let l), .belugaIncenseBox(let r)): return l == r
      case (.vsSeekerUpgrades(let l), .vsSeekerUpgrades(let r)): return l == r
      case (.limitedPurchaseSkuRecord(let l), .limitedPurchaseSkuRecord(let r)): return l == r
      case (.stickerID(let l), .stickerID(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Inventory"

extension POGOProtos_Inventory_InventoryKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pokemon_id"),
    2: .same(proto: "item"),
    3: .standard(proto: "pokedex_entry_id"),
    4: .standard(proto: "player_stats"),
    5: .standard(proto: "player_currency"),
    6: .standard(proto: "player_camera"),
    7: .standard(proto: "inventory_upgrades"),
    8: .standard(proto: "applied_items"),
    9: .standard(proto: "egg_incubators"),
    10: .standard(proto: "pokemon_family_id"),
    11: .standard(proto: "quest_type"),
    12: .standard(proto: "avatar_template_id"),
    13: .standard(proto: "raid_tickets"),
    14: .same(proto: "quests"),
    15: .standard(proto: "gift_boxes"),
    16: .standard(proto: "beluga_incense_box"),
    17: .standard(proto: "vs_seeker_upgrades"),
    19: .standard(proto: "limited_purchase_sku_record"),
    22: .standard(proto: "sticker_id"),
  ]

  fileprivate class _StorageClass {
    var _type: POGOProtos_Inventory_InventoryKey.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: UInt64?
          try decoder.decodeSingularFixed64Field(value: &v)
          if let v = v {_storage._type = .pokemonID(v)}
        case 2:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: POGOProtos_Inventory_Item_ItemId?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._type = .item(v)}
        case 3:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._type = .pokedexEntryID(v)}
        case 4:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .playerStats(v)}
        case 5:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .playerCurrency(v)}
        case 6:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .playerCamera(v)}
        case 7:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .inventoryUpgrades(v)}
        case 8:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .appliedItems(v)}
        case 9:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .eggIncubators(v)}
        case 10:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: POGOProtos_Enums_PokemonFamilyId?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._type = .pokemonFamilyID(v)}
        case 11:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: POGOProtos_Enums_QuestType?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._type = .questType(v)}
        case 12:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._type = .avatarTemplateID(v)}
        case 13:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .raidTickets(v)}
        case 14:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .quests(v)}
        case 15:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .giftBoxes(v)}
        case 16:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .belugaIncenseBox(v)}
        case 17:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .vsSeekerUpgrades(v)}
        case 19:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._type = .limitedPurchaseSkuRecord(v)}
        case 22:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._type = .stickerID(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .pokemonID(let v)?:
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      case .item(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      case .pokedexEntryID(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      case .playerStats(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      case .playerCurrency(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      case .playerCamera(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      case .inventoryUpgrades(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      case .appliedItems(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      case .eggIncubators(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      case .pokemonFamilyID(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      case .questType(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
      case .avatarTemplateID(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      case .raidTickets(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      case .quests(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      case .giftBoxes(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      case .belugaIncenseBox(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      case .vsSeekerUpgrades(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      case .limitedPurchaseSkuRecord(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      case .stickerID(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryKey, rhs: POGOProtos_Inventory_InventoryKey) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
