// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Inventory/InventoryKey.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Inventory_InventoryKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: POGOProtos_Inventory_InventoryKey.OneOf_Type? = nil

  public var pokemonID: UInt64 {
    get {
      if case .pokemonID(let v)? = type {return v}
      return 0
    }
    set {type = .pokemonID(newValue)}
  }

  public var item: POGOProtos_Inventory_Item_ItemId {
    get {
      if case .item(let v)? = type {return v}
      return .itemUnknown
    }
    set {type = .item(newValue)}
  }

  public var pokedexEntryID: Int32 {
    get {
      if case .pokedexEntryID(let v)? = type {return v}
      return 0
    }
    set {type = .pokedexEntryID(newValue)}
  }

  public var playerStats: Bool {
    get {
      if case .playerStats(let v)? = type {return v}
      return false
    }
    set {type = .playerStats(newValue)}
  }

  public var playerCurrency: Bool {
    get {
      if case .playerCurrency(let v)? = type {return v}
      return false
    }
    set {type = .playerCurrency(newValue)}
  }

  public var playerCamera: Bool {
    get {
      if case .playerCamera(let v)? = type {return v}
      return false
    }
    set {type = .playerCamera(newValue)}
  }

  public var inventoryUpgrades: Bool {
    get {
      if case .inventoryUpgrades(let v)? = type {return v}
      return false
    }
    set {type = .inventoryUpgrades(newValue)}
  }

  public var appliedItems: Bool {
    get {
      if case .appliedItems(let v)? = type {return v}
      return false
    }
    set {type = .appliedItems(newValue)}
  }

  public var eggIncubators: Bool {
    get {
      if case .eggIncubators(let v)? = type {return v}
      return false
    }
    set {type = .eggIncubators(newValue)}
  }

  public var pokemonFamilyID: POGOProtos_Enums_PokemonFamilyId {
    get {
      if case .pokemonFamilyID(let v)? = type {return v}
      return .familyUnset
    }
    set {type = .pokemonFamilyID(newValue)}
  }

  public var questType: POGOProtos_Enums_QuestType {
    get {
      if case .questType(let v)? = type {return v}
      return .questUnknownType
    }
    set {type = .questType(newValue)}
  }

  public var avatarTemplateID: String {
    get {
      if case .avatarTemplateID(let v)? = type {return v}
      return String()
    }
    set {type = .avatarTemplateID(newValue)}
  }

  public var raidTickets: Bool {
    get {
      if case .raidTickets(let v)? = type {return v}
      return false
    }
    set {type = .raidTickets(newValue)}
  }

  public var quests: Bool {
    get {
      if case .quests(let v)? = type {return v}
      return false
    }
    set {type = .quests(newValue)}
  }

  public var giftBoxes: Bool {
    get {
      if case .giftBoxes(let v)? = type {return v}
      return false
    }
    set {type = .giftBoxes(newValue)}
  }

  public var belugaIncenseBox: Bool {
    get {
      if case .belugaIncenseBox(let v)? = type {return v}
      return false
    }
    set {type = .belugaIncenseBox(newValue)}
  }

  public var vsSeekerUpgrades: Bool {
    get {
      if case .vsSeekerUpgrades(let v)? = type {return v}
      return false
    }
    set {type = .vsSeekerUpgrades(newValue)}
  }

  public var limitedPurchaseSkuRecord: Bool {
    get {
      if case .limitedPurchaseSkuRecord(let v)? = type {return v}
      return false
    }
    set {type = .limitedPurchaseSkuRecord(newValue)}
  }

  public var megaEvoPokemonSpeciesID: Int32 {
    get {
      if case .megaEvoPokemonSpeciesID(let v)? = type {return v}
      return 0
    }
    set {type = .megaEvoPokemonSpeciesID(newValue)}
  }

  public var stickerID: String {
    get {
      if case .stickerID(let v)? = type {return v}
      return String()
    }
    set {type = .stickerID(newValue)}
  }

  public var pokemonHome: Bool {
    get {
      if case .pokemonHome(let v)? = type {return v}
      return false
    }
    set {type = .pokemonHome(newValue)}
  }

  public var playerStatsSnapshot: Bool {
    get {
      if case .playerStatsSnapshot(let v)? = type {return v}
      return false
    }
    set {type = .playerStatsSnapshot(newValue)}
  }

  public var unknownKey: Int64 {
    get {
      if case .unknownKey(let v)? = type {return v}
      return 0
    }
    set {type = .unknownKey(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case pokemonID(UInt64)
    case item(POGOProtos_Inventory_Item_ItemId)
    case pokedexEntryID(Int32)
    case playerStats(Bool)
    case playerCurrency(Bool)
    case playerCamera(Bool)
    case inventoryUpgrades(Bool)
    case appliedItems(Bool)
    case eggIncubators(Bool)
    case pokemonFamilyID(POGOProtos_Enums_PokemonFamilyId)
    case questType(POGOProtos_Enums_QuestType)
    case avatarTemplateID(String)
    case raidTickets(Bool)
    case quests(Bool)
    case giftBoxes(Bool)
    case belugaIncenseBox(Bool)
    case vsSeekerUpgrades(Bool)
    case limitedPurchaseSkuRecord(Bool)
    case megaEvoPokemonSpeciesID(Int32)
    case stickerID(String)
    case pokemonHome(Bool)
    case playerStatsSnapshot(Bool)
    case unknownKey(Int64)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Inventory_InventoryKey.OneOf_Type, rhs: POGOProtos_Inventory_InventoryKey.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pokemonID, .pokemonID): return {
        guard case .pokemonID(let l) = lhs, case .pokemonID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.item, .item): return {
        guard case .item(let l) = lhs, case .item(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokedexEntryID, .pokedexEntryID): return {
        guard case .pokedexEntryID(let l) = lhs, case .pokedexEntryID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerStats, .playerStats): return {
        guard case .playerStats(let l) = lhs, case .playerStats(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerCurrency, .playerCurrency): return {
        guard case .playerCurrency(let l) = lhs, case .playerCurrency(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerCamera, .playerCamera): return {
        guard case .playerCamera(let l) = lhs, case .playerCamera(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.inventoryUpgrades, .inventoryUpgrades): return {
        guard case .inventoryUpgrades(let l) = lhs, case .inventoryUpgrades(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.appliedItems, .appliedItems): return {
        guard case .appliedItems(let l) = lhs, case .appliedItems(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.eggIncubators, .eggIncubators): return {
        guard case .eggIncubators(let l) = lhs, case .eggIncubators(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonFamilyID, .pokemonFamilyID): return {
        guard case .pokemonFamilyID(let l) = lhs, case .pokemonFamilyID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.questType, .questType): return {
        guard case .questType(let l) = lhs, case .questType(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.avatarTemplateID, .avatarTemplateID): return {
        guard case .avatarTemplateID(let l) = lhs, case .avatarTemplateID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.raidTickets, .raidTickets): return {
        guard case .raidTickets(let l) = lhs, case .raidTickets(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.quests, .quests): return {
        guard case .quests(let l) = lhs, case .quests(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.giftBoxes, .giftBoxes): return {
        guard case .giftBoxes(let l) = lhs, case .giftBoxes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.belugaIncenseBox, .belugaIncenseBox): return {
        guard case .belugaIncenseBox(let l) = lhs, case .belugaIncenseBox(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.vsSeekerUpgrades, .vsSeekerUpgrades): return {
        guard case .vsSeekerUpgrades(let l) = lhs, case .vsSeekerUpgrades(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.limitedPurchaseSkuRecord, .limitedPurchaseSkuRecord): return {
        guard case .limitedPurchaseSkuRecord(let l) = lhs, case .limitedPurchaseSkuRecord(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.megaEvoPokemonSpeciesID, .megaEvoPokemonSpeciesID): return {
        guard case .megaEvoPokemonSpeciesID(let l) = lhs, case .megaEvoPokemonSpeciesID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stickerID, .stickerID): return {
        guard case .stickerID(let l) = lhs, case .stickerID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonHome, .pokemonHome): return {
        guard case .pokemonHome(let l) = lhs, case .pokemonHome(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerStatsSnapshot, .playerStatsSnapshot): return {
        guard case .playerStatsSnapshot(let l) = lhs, case .playerStatsSnapshot(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unknownKey, .unknownKey): return {
        guard case .unknownKey(let l) = lhs, case .unknownKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Inventory"

extension POGOProtos_Inventory_InventoryKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pokemon_id"),
    2: .same(proto: "item"),
    3: .standard(proto: "pokedex_entry_id"),
    4: .standard(proto: "player_stats"),
    5: .standard(proto: "player_currency"),
    6: .standard(proto: "player_camera"),
    7: .standard(proto: "inventory_upgrades"),
    8: .standard(proto: "applied_items"),
    9: .standard(proto: "egg_incubators"),
    10: .standard(proto: "pokemon_family_id"),
    11: .standard(proto: "quest_type"),
    12: .standard(proto: "avatar_template_id"),
    13: .standard(proto: "raid_tickets"),
    14: .same(proto: "quests"),
    15: .standard(proto: "gift_boxes"),
    16: .standard(proto: "beluga_incense_box"),
    17: .standard(proto: "vs_seeker_upgrades"),
    19: .standard(proto: "limited_purchase_sku_record"),
    21: .standard(proto: "mega_evo_pokemon_species_id"),
    22: .standard(proto: "sticker_id"),
    23: .standard(proto: "pokemon_home"),
    25: .standard(proto: "player_stats_snapshot"),
    26: .standard(proto: "unknown_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: UInt64?
        try decoder.decodeSingularFixed64Field(value: &v)
        if let v = v {self.type = .pokemonID(v)}
      }()
      case 2: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Inventory_Item_ItemId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .item(v)}
      }()
      case 3: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.type = .pokedexEntryID(v)}
      }()
      case 4: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .playerStats(v)}
      }()
      case 5: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .playerCurrency(v)}
      }()
      case 6: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .playerCamera(v)}
      }()
      case 7: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .inventoryUpgrades(v)}
      }()
      case 8: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .appliedItems(v)}
      }()
      case 9: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .eggIncubators(v)}
      }()
      case 10: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_PokemonFamilyId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .pokemonFamilyID(v)}
      }()
      case 11: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_QuestType?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .questType(v)}
      }()
      case 12: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .avatarTemplateID(v)}
      }()
      case 13: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .raidTickets(v)}
      }()
      case 14: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .quests(v)}
      }()
      case 15: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .giftBoxes(v)}
      }()
      case 16: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .belugaIncenseBox(v)}
      }()
      case 17: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .vsSeekerUpgrades(v)}
      }()
      case 19: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .limitedPurchaseSkuRecord(v)}
      }()
      case 21: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.type = .megaEvoPokemonSpeciesID(v)}
      }()
      case 22: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .stickerID(v)}
      }()
      case 23: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .pokemonHome(v)}
      }()
      case 25: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .playerStatsSnapshot(v)}
      }()
      case 26: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.type = .unknownKey(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .pokemonID?: try {
      guard case .pokemonID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
    }()
    case .item?: try {
      guard case .item(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }()
    case .pokedexEntryID?: try {
      guard case .pokedexEntryID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }()
    case .playerStats?: try {
      guard case .playerStats(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }()
    case .playerCurrency?: try {
      guard case .playerCurrency(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }()
    case .playerCamera?: try {
      guard case .playerCamera(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }()
    case .inventoryUpgrades?: try {
      guard case .inventoryUpgrades(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }()
    case .appliedItems?: try {
      guard case .appliedItems(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }()
    case .eggIncubators?: try {
      guard case .eggIncubators(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }()
    case .pokemonFamilyID?: try {
      guard case .pokemonFamilyID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
    }()
    case .questType?: try {
      guard case .questType(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
    }()
    case .avatarTemplateID?: try {
      guard case .avatarTemplateID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    }()
    case .raidTickets?: try {
      guard case .raidTickets(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    }()
    case .quests?: try {
      guard case .quests(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }()
    case .giftBoxes?: try {
      guard case .giftBoxes(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }()
    case .belugaIncenseBox?: try {
      guard case .belugaIncenseBox(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    }()
    case .vsSeekerUpgrades?: try {
      guard case .vsSeekerUpgrades(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
    }()
    case .limitedPurchaseSkuRecord?: try {
      guard case .limitedPurchaseSkuRecord(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
    }()
    case .megaEvoPokemonSpeciesID?: try {
      guard case .megaEvoPokemonSpeciesID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
    }()
    case .stickerID?: try {
      guard case .stickerID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    }()
    case .pokemonHome?: try {
      guard case .pokemonHome(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
    }()
    case .playerStatsSnapshot?: try {
      guard case .playerStatsSnapshot(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
    }()
    case .unknownKey?: try {
      guard case .unknownKey(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 26)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryKey, rhs: POGOProtos_Inventory_InventoryKey) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
