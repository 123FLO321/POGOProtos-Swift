// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Inventory/LootItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Inventory_LootItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: POGOProtos_Inventory_LootItem.OneOf_Type? = nil

  public var item: POGOProtos_Inventory_Item_ItemId {
    get {
      if case .item(let v)? = type {return v}
      return .itemUnknown
    }
    set {type = .item(newValue)}
  }

  public var stardust: Bool {
    get {
      if case .stardust(let v)? = type {return v}
      return false
    }
    set {type = .stardust(newValue)}
  }

  public var pokecoin: Bool {
    get {
      if case .pokecoin(let v)? = type {return v}
      return false
    }
    set {type = .pokecoin(newValue)}
  }

  public var pokemonCandy: POGOProtos_Enums_PokemonId {
    get {
      if case .pokemonCandy(let v)? = type {return v}
      return .missingno
    }
    set {type = .pokemonCandy(newValue)}
  }

  public var experience: Bool {
    get {
      if case .experience(let v)? = type {return v}
      return false
    }
    set {type = .experience(newValue)}
  }

  public var pokemonEgg: POGOProtos_Data_PokemonData {
    get {
      if case .pokemonEgg(let v)? = type {return v}
      return POGOProtos_Data_PokemonData()
    }
    set {type = .pokemonEgg(newValue)}
  }

  public var avatarTemplateID: String {
    get {
      if case .avatarTemplateID(let v)? = type {return v}
      return String()
    }
    set {type = .avatarTemplateID(newValue)}
  }

  public var stickerID: String {
    get {
      if case .stickerID(let v)? = type {return v}
      return String()
    }
    set {type = .stickerID(newValue)}
  }

  public var megaEnergyPokemonID: POGOProtos_Enums_PokemonId {
    get {
      if case .megaEnergyPokemonID(let v)? = type {return v}
      return .missingno
    }
    set {type = .megaEnergyPokemonID(newValue)}
  }

  public var xlCandy: POGOProtos_Enums_PokemonId {
    get {
      if case .xlCandy(let v)? = type {return v}
      return .missingno
    }
    set {type = .xlCandy(newValue)}
  }

  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case item(POGOProtos_Inventory_Item_ItemId)
    case stardust(Bool)
    case pokecoin(Bool)
    case pokemonCandy(POGOProtos_Enums_PokemonId)
    case experience(Bool)
    case pokemonEgg(POGOProtos_Data_PokemonData)
    case avatarTemplateID(String)
    case stickerID(String)
    case megaEnergyPokemonID(POGOProtos_Enums_PokemonId)
    case xlCandy(POGOProtos_Enums_PokemonId)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Inventory_LootItem.OneOf_Type, rhs: POGOProtos_Inventory_LootItem.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.item, .item): return {
        guard case .item(let l) = lhs, case .item(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stardust, .stardust): return {
        guard case .stardust(let l) = lhs, case .stardust(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokecoin, .pokecoin): return {
        guard case .pokecoin(let l) = lhs, case .pokecoin(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonCandy, .pokemonCandy): return {
        guard case .pokemonCandy(let l) = lhs, case .pokemonCandy(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.experience, .experience): return {
        guard case .experience(let l) = lhs, case .experience(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonEgg, .pokemonEgg): return {
        guard case .pokemonEgg(let l) = lhs, case .pokemonEgg(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.avatarTemplateID, .avatarTemplateID): return {
        guard case .avatarTemplateID(let l) = lhs, case .avatarTemplateID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stickerID, .stickerID): return {
        guard case .stickerID(let l) = lhs, case .stickerID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.megaEnergyPokemonID, .megaEnergyPokemonID): return {
        guard case .megaEnergyPokemonID(let l) = lhs, case .megaEnergyPokemonID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.xlCandy, .xlCandy): return {
        guard case .xlCandy(let l) = lhs, case .xlCandy(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Inventory"

extension POGOProtos_Inventory_LootItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LootItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
    2: .same(proto: "stardust"),
    3: .same(proto: "pokecoin"),
    4: .standard(proto: "pokemon_candy"),
    6: .same(proto: "experience"),
    7: .standard(proto: "pokemon_egg"),
    8: .standard(proto: "avatar_template_id"),
    9: .standard(proto: "sticker_id"),
    10: .standard(proto: "mega_energy_pokemon_id"),
    11: .standard(proto: "xl_candy"),
    5: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Inventory_Item_ItemId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .item(v)}
      }()
      case 2: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .stardust(v)}
      }()
      case 3: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .pokecoin(v)}
      }()
      case 4: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_PokemonId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .pokemonCandy(v)}
      }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 6: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .experience(v)}
      }()
      case 7: try {
        var v: POGOProtos_Data_PokemonData?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .pokemonEgg(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .pokemonEgg(v)}
      }()
      case 8: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .avatarTemplateID(v)}
      }()
      case 9: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .stickerID(v)}
      }()
      case 10: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_PokemonId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .megaEnergyPokemonID(v)}
      }()
      case 11: try {
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_PokemonId?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.type = .xlCandy(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .item?: try {
      guard case .item(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .stardust?: try {
      guard case .stardust(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }()
    case .pokecoin?: try {
      guard case .pokecoin(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case .pokemonCandy?: try {
      guard case .pokemonCandy(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }()
    default: break
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .experience?: try {
      guard case .experience(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }()
    case .pokemonEgg?: try {
      guard case .pokemonEgg(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .avatarTemplateID?: try {
      guard case .avatarTemplateID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }()
    case .stickerID?: try {
      guard case .stickerID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }()
    case .megaEnergyPokemonID?: try {
      guard case .megaEnergyPokemonID(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
    }()
    case .xlCandy?: try {
      guard case .xlCandy(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
    }()
    default: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_LootItem, rhs: POGOProtos_Inventory_LootItem) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
