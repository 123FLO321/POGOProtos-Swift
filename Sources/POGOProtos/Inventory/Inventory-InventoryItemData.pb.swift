// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Inventory/InventoryItemData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Inventory_InventoryItemData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: POGOProtos_Inventory_InventoryItemData.OneOf_Type? = nil

  public var pokemonData: POGOProtos_Data_PokemonData {
    get {
      if case .pokemonData(let v)? = type {return v}
      return POGOProtos_Data_PokemonData()
    }
    set {type = .pokemonData(newValue)}
  }

  public var item: POGOProtos_Inventory_Item_ItemData {
    get {
      if case .item(let v)? = type {return v}
      return POGOProtos_Inventory_Item_ItemData()
    }
    set {type = .item(newValue)}
  }

  public var pokedexEntry: POGOProtos_Data_PokedexEntry {
    get {
      if case .pokedexEntry(let v)? = type {return v}
      return POGOProtos_Data_PokedexEntry()
    }
    set {type = .pokedexEntry(newValue)}
  }

  public var playerStats: POGOProtos_Data_Player_PlayerStats {
    get {
      if case .playerStats(let v)? = type {return v}
      return POGOProtos_Data_Player_PlayerStats()
    }
    set {type = .playerStats(newValue)}
  }

  public var playerCurrency: POGOProtos_Data_Player_PlayerCurrency {
    get {
      if case .playerCurrency(let v)? = type {return v}
      return POGOProtos_Data_Player_PlayerCurrency()
    }
    set {type = .playerCurrency(newValue)}
  }

  public var playerCamera: POGOProtos_Data_Player_PlayerCamera {
    get {
      if case .playerCamera(let v)? = type {return v}
      return POGOProtos_Data_Player_PlayerCamera()
    }
    set {type = .playerCamera(newValue)}
  }

  public var inventoryUpgrades: POGOProtos_Inventory_InventoryUpgrades {
    get {
      if case .inventoryUpgrades(let v)? = type {return v}
      return POGOProtos_Inventory_InventoryUpgrades()
    }
    set {type = .inventoryUpgrades(newValue)}
  }

  public var appliedItems: POGOProtos_Inventory_AppliedItems {
    get {
      if case .appliedItems(let v)? = type {return v}
      return POGOProtos_Inventory_AppliedItems()
    }
    set {type = .appliedItems(newValue)}
  }

  public var eggIncubators: POGOProtos_Inventory_EggIncubators {
    get {
      if case .eggIncubators(let v)? = type {return v}
      return POGOProtos_Inventory_EggIncubators()
    }
    set {type = .eggIncubators(newValue)}
  }

  public var candy: POGOProtos_Inventory_Candy {
    get {
      if case .candy(let v)? = type {return v}
      return POGOProtos_Inventory_Candy()
    }
    set {type = .candy(newValue)}
  }

  public var quest: POGOProtos_Data_Quests_Quest {
    get {
      if case .quest(let v)? = type {return v}
      return POGOProtos_Data_Quests_Quest()
    }
    set {type = .quest(newValue)}
  }

  public var avatarItem: POGOProtos_Data_Avatar_AvatarItem {
    get {
      if case .avatarItem(let v)? = type {return v}
      return POGOProtos_Data_Avatar_AvatarItem()
    }
    set {type = .avatarItem(newValue)}
  }

  public var raidTickets: POGOProtos_Inventory_RaidTickets {
    get {
      if case .raidTickets(let v)? = type {return v}
      return POGOProtos_Inventory_RaidTickets()
    }
    set {type = .raidTickets(newValue)}
  }

  public var quests: POGOProtos_Data_Quests_Quests {
    get {
      if case .quests(let v)? = type {return v}
      return POGOProtos_Data_Quests_Quests()
    }
    set {type = .quests(newValue)}
  }

  public var giftBoxes: POGOProtos_Data_Gift_GiftBoxes {
    get {
      if case .giftBoxes(let v)? = type {return v}
      return POGOProtos_Data_Gift_GiftBoxes()
    }
    set {type = .giftBoxes(newValue)}
  }

  public var belugaIncense: POGOProtos_Data_Beluga_BelugaIncenseBox {
    get {
      if case .belugaIncense(let v)? = type {return v}
      return POGOProtos_Data_Beluga_BelugaIncenseBox()
    }
    set {type = .belugaIncense(newValue)}
  }

  public var limitedPurchaseSkuRecord: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord {
    get {
      if case .limitedPurchaseSkuRecord(let v)? = type {return v}
      return POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord()
    }
    set {type = .limitedPurchaseSkuRecord(newValue)}
  }

  public var megaEvolveSpecies: POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies {
    get {
      if case .megaEvolveSpecies(let v)? = type {return v}
      return POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies()
    }
    set {type = .megaEvolveSpecies(newValue)}
  }

  public var sticker: POGOProtos_Data_Sticker_Sticker {
    get {
      if case .sticker(let v)? = type {return v}
      return POGOProtos_Data_Sticker_Sticker()
    }
    set {type = .sticker(newValue)}
  }

  public var pokemonHome: POGOProtos_Inventory_InventoryItemData.PokemonHome {
    get {
      if case .pokemonHome(let v)? = type {return v}
      return POGOProtos_Inventory_InventoryItemData.PokemonHome()
    }
    set {type = .pokemonHome(newValue)}
  }

  public var playerStatsSnapshots: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots {
    get {
      if case .playerStatsSnapshots(let v)? = type {return v}
      return POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots()
    }
    set {type = .playerStatsSnapshots(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case pokemonData(POGOProtos_Data_PokemonData)
    case item(POGOProtos_Inventory_Item_ItemData)
    case pokedexEntry(POGOProtos_Data_PokedexEntry)
    case playerStats(POGOProtos_Data_Player_PlayerStats)
    case playerCurrency(POGOProtos_Data_Player_PlayerCurrency)
    case playerCamera(POGOProtos_Data_Player_PlayerCamera)
    case inventoryUpgrades(POGOProtos_Inventory_InventoryUpgrades)
    case appliedItems(POGOProtos_Inventory_AppliedItems)
    case eggIncubators(POGOProtos_Inventory_EggIncubators)
    case candy(POGOProtos_Inventory_Candy)
    case quest(POGOProtos_Data_Quests_Quest)
    case avatarItem(POGOProtos_Data_Avatar_AvatarItem)
    case raidTickets(POGOProtos_Inventory_RaidTickets)
    case quests(POGOProtos_Data_Quests_Quests)
    case giftBoxes(POGOProtos_Data_Gift_GiftBoxes)
    case belugaIncense(POGOProtos_Data_Beluga_BelugaIncenseBox)
    case limitedPurchaseSkuRecord(POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord)
    case megaEvolveSpecies(POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies)
    case sticker(POGOProtos_Data_Sticker_Sticker)
    case pokemonHome(POGOProtos_Inventory_InventoryItemData.PokemonHome)
    case playerStatsSnapshots(POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.OneOf_Type, rhs: POGOProtos_Inventory_InventoryItemData.OneOf_Type) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pokemonData, .pokemonData): return {
        guard case .pokemonData(let l) = lhs, case .pokemonData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.item, .item): return {
        guard case .item(let l) = lhs, case .item(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokedexEntry, .pokedexEntry): return {
        guard case .pokedexEntry(let l) = lhs, case .pokedexEntry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerStats, .playerStats): return {
        guard case .playerStats(let l) = lhs, case .playerStats(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerCurrency, .playerCurrency): return {
        guard case .playerCurrency(let l) = lhs, case .playerCurrency(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerCamera, .playerCamera): return {
        guard case .playerCamera(let l) = lhs, case .playerCamera(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.inventoryUpgrades, .inventoryUpgrades): return {
        guard case .inventoryUpgrades(let l) = lhs, case .inventoryUpgrades(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.appliedItems, .appliedItems): return {
        guard case .appliedItems(let l) = lhs, case .appliedItems(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.eggIncubators, .eggIncubators): return {
        guard case .eggIncubators(let l) = lhs, case .eggIncubators(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.candy, .candy): return {
        guard case .candy(let l) = lhs, case .candy(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.quest, .quest): return {
        guard case .quest(let l) = lhs, case .quest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.avatarItem, .avatarItem): return {
        guard case .avatarItem(let l) = lhs, case .avatarItem(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.raidTickets, .raidTickets): return {
        guard case .raidTickets(let l) = lhs, case .raidTickets(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.quests, .quests): return {
        guard case .quests(let l) = lhs, case .quests(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.giftBoxes, .giftBoxes): return {
        guard case .giftBoxes(let l) = lhs, case .giftBoxes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.belugaIncense, .belugaIncense): return {
        guard case .belugaIncense(let l) = lhs, case .belugaIncense(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.limitedPurchaseSkuRecord, .limitedPurchaseSkuRecord): return {
        guard case .limitedPurchaseSkuRecord(let l) = lhs, case .limitedPurchaseSkuRecord(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.megaEvolveSpecies, .megaEvolveSpecies): return {
        guard case .megaEvolveSpecies(let l) = lhs, case .megaEvolveSpecies(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.sticker, .sticker): return {
        guard case .sticker(let l) = lhs, case .sticker(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pokemonHome, .pokemonHome): return {
        guard case .pokemonHome(let l) = lhs, case .pokemonHome(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.playerStatsSnapshots, .playerStatsSnapshots): return {
        guard case .playerStatsSnapshots(let l) = lhs, case .playerStatsSnapshots(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public struct LimitedPurchaseSkuRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var purchases: Dictionary<String,POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Purchase {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var version: Int32 = 0

      public var numPurchases: Int32 = 0

      public var lastPurchaseMs: Int64 = 0

      public var totalNumPurchases: Int32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct PlayerStatsSnapshots {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var snapShot: [POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct SnapshotData {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var reason: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData.Reason = .unset

      public var stats: POGOProtos_Data_Player_PlayerStats {
        get {return _stats ?? POGOProtos_Data_Player_PlayerStats()}
        set {_stats = newValue}
      }
      /// Returns true if `stats` has been explicitly set.
      public var hasStats: Bool {return self._stats != nil}
      /// Clears the value of `stats`. Subsequent reads from it will return its default value.
      public mutating func clearStats() {self._stats = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum Reason: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case unset // = 0
        case levelUp // = 1
        case UNRECOGNIZED(Int)

        public init() {
          self = .unset
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unset
          case 1: self = .levelUp
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unset: return 0
          case .levelUp: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public init() {}

      fileprivate var _stats: POGOProtos_Data_Player_PlayerStats? = nil
    }

    public init() {}
  }

  public struct MegaEvolvePokemonSpecies {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var energyCount: Int32 = 0

    public var pokemonSpeciesID: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PokemonHome {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var transporterEnergy: Int32 = 0

    public var transporterFullyChargedMs: Int64 = 0

    public var lastPassiveTransporterEnergyGainHour: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData.Reason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData.Reason] = [
    .unset,
    .levelUp,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Inventory"

extension POGOProtos_Inventory_InventoryItemData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryItemData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pokemon_data"),
    2: .same(proto: "item"),
    3: .standard(proto: "pokedex_entry"),
    4: .standard(proto: "player_stats"),
    5: .standard(proto: "player_currency"),
    6: .standard(proto: "player_camera"),
    7: .standard(proto: "inventory_upgrades"),
    8: .standard(proto: "applied_items"),
    9: .standard(proto: "egg_incubators"),
    10: .same(proto: "candy"),
    11: .same(proto: "quest"),
    12: .standard(proto: "avatar_item"),
    13: .standard(proto: "raid_tickets"),
    14: .same(proto: "quests"),
    15: .standard(proto: "gift_boxes"),
    16: .standard(proto: "beluga_incense"),
    19: .standard(proto: "limited_purchase_sku_record"),
    21: .standard(proto: "mega_evolve_species"),
    22: .same(proto: "sticker"),
    23: .standard(proto: "pokemon_home"),
    25: .standard(proto: "player_stats_snapshots"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: POGOProtos_Data_PokemonData?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .pokemonData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .pokemonData(v)}
      }()
      case 2: try {
        var v: POGOProtos_Inventory_Item_ItemData?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .item(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .item(v)}
      }()
      case 3: try {
        var v: POGOProtos_Data_PokedexEntry?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .pokedexEntry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .pokedexEntry(v)}
      }()
      case 4: try {
        var v: POGOProtos_Data_Player_PlayerStats?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .playerStats(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .playerStats(v)}
      }()
      case 5: try {
        var v: POGOProtos_Data_Player_PlayerCurrency?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .playerCurrency(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .playerCurrency(v)}
      }()
      case 6: try {
        var v: POGOProtos_Data_Player_PlayerCamera?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .playerCamera(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .playerCamera(v)}
      }()
      case 7: try {
        var v: POGOProtos_Inventory_InventoryUpgrades?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .inventoryUpgrades(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .inventoryUpgrades(v)}
      }()
      case 8: try {
        var v: POGOProtos_Inventory_AppliedItems?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .appliedItems(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .appliedItems(v)}
      }()
      case 9: try {
        var v: POGOProtos_Inventory_EggIncubators?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .eggIncubators(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .eggIncubators(v)}
      }()
      case 10: try {
        var v: POGOProtos_Inventory_Candy?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .candy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .candy(v)}
      }()
      case 11: try {
        var v: POGOProtos_Data_Quests_Quest?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .quest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .quest(v)}
      }()
      case 12: try {
        var v: POGOProtos_Data_Avatar_AvatarItem?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .avatarItem(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .avatarItem(v)}
      }()
      case 13: try {
        var v: POGOProtos_Inventory_RaidTickets?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .raidTickets(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .raidTickets(v)}
      }()
      case 14: try {
        var v: POGOProtos_Data_Quests_Quests?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .quests(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .quests(v)}
      }()
      case 15: try {
        var v: POGOProtos_Data_Gift_GiftBoxes?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .giftBoxes(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .giftBoxes(v)}
      }()
      case 16: try {
        var v: POGOProtos_Data_Beluga_BelugaIncenseBox?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .belugaIncense(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .belugaIncense(v)}
      }()
      case 19: try {
        var v: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .limitedPurchaseSkuRecord(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .limitedPurchaseSkuRecord(v)}
      }()
      case 21: try {
        var v: POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .megaEvolveSpecies(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .megaEvolveSpecies(v)}
      }()
      case 22: try {
        var v: POGOProtos_Data_Sticker_Sticker?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .sticker(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .sticker(v)}
      }()
      case 23: try {
        var v: POGOProtos_Inventory_InventoryItemData.PokemonHome?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .pokemonHome(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .pokemonHome(v)}
      }()
      case 25: try {
        var v: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots?
        if let current = self.type {
          try decoder.handleConflictingOneOf()
          if case .playerStatsSnapshots(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.type = .playerStatsSnapshots(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.type {
    case .pokemonData?: try {
      guard case .pokemonData(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .item?: try {
      guard case .item(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .pokedexEntry?: try {
      guard case .pokedexEntry(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .playerStats?: try {
      guard case .playerStats(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .playerCurrency?: try {
      guard case .playerCurrency(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .playerCamera?: try {
      guard case .playerCamera(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .inventoryUpgrades?: try {
      guard case .inventoryUpgrades(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .appliedItems?: try {
      guard case .appliedItems(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .eggIncubators?: try {
      guard case .eggIncubators(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .candy?: try {
      guard case .candy(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .quest?: try {
      guard case .quest(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .avatarItem?: try {
      guard case .avatarItem(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .raidTickets?: try {
      guard case .raidTickets(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .quests?: try {
      guard case .quests(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .giftBoxes?: try {
      guard case .giftBoxes(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .belugaIncense?: try {
      guard case .belugaIncense(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .limitedPurchaseSkuRecord?: try {
      guard case .limitedPurchaseSkuRecord(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .megaEvolveSpecies?: try {
      guard case .megaEvolveSpecies(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .sticker?: try {
      guard case .sticker(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .pokemonHome?: try {
      guard case .pokemonHome(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .playerStatsSnapshots?: try {
      guard case .playerStatsSnapshots(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData, rhs: POGOProtos_Inventory_InventoryItemData) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.protoMessageName + ".LimitedPurchaseSkuRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase>.self, value: &self.purchases) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.purchases.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase>.self, value: self.purchases, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord, rhs: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord) -> Bool {
    if lhs.purchases != rhs.purchases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.protoMessageName + ".Purchase"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "num_purchases"),
    4: .standard(proto: "last_purchase_ms"),
    5: .standard(proto: "total_num_purchases"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.numPurchases) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lastPurchaseMs) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.totalNumPurchases) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.numPurchases != 0 {
      try visitor.visitSingularInt32Field(value: self.numPurchases, fieldNumber: 2)
    }
    if self.lastPurchaseMs != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPurchaseMs, fieldNumber: 4)
    }
    if self.totalNumPurchases != 0 {
      try visitor.visitSingularInt32Field(value: self.totalNumPurchases, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase, rhs: POGOProtos_Inventory_InventoryItemData.LimitedPurchaseSkuRecord.Purchase) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.numPurchases != rhs.numPurchases {return false}
    if lhs.lastPurchaseMs != rhs.lastPurchaseMs {return false}
    if lhs.totalNumPurchases != rhs.totalNumPurchases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.protoMessageName + ".PlayerStatsSnapshots"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "snap_shot"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.snapShot) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snapShot.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snapShot, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots, rhs: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots) -> Bool {
    if lhs.snapShot != rhs.snapShot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.protoMessageName + ".SnapshotData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .same(proto: "stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reason != .unset {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    if let v = self._stats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData, rhs: POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs._stats != rhs._stats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.PlayerStatsSnapshots.SnapshotData.Reason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "LEVEL_UP"),
  ]
}

extension POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.protoMessageName + ".MegaEvolvePokemonSpecies"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "energy_count"),
    2: .standard(proto: "pokemon_species_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.energyCount) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pokemonSpeciesID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.energyCount != 0 {
      try visitor.visitSingularInt32Field(value: self.energyCount, fieldNumber: 1)
    }
    if self.pokemonSpeciesID != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonSpeciesID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies, rhs: POGOProtos_Inventory_InventoryItemData.MegaEvolvePokemonSpecies) -> Bool {
    if lhs.energyCount != rhs.energyCount {return false}
    if lhs.pokemonSpeciesID != rhs.pokemonSpeciesID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Inventory_InventoryItemData.PokemonHome: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Inventory_InventoryItemData.protoMessageName + ".PokemonHome"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transporter_energy"),
    2: .standard(proto: "transporter_fully_charged_ms"),
    3: .standard(proto: "last_passive_transporter_energy_gain_hour"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.transporterEnergy) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.transporterFullyChargedMs) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastPassiveTransporterEnergyGainHour) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.transporterEnergy != 0 {
      try visitor.visitSingularInt32Field(value: self.transporterEnergy, fieldNumber: 1)
    }
    if self.transporterFullyChargedMs != 0 {
      try visitor.visitSingularInt64Field(value: self.transporterFullyChargedMs, fieldNumber: 2)
    }
    if self.lastPassiveTransporterEnergyGainHour != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPassiveTransporterEnergyGainHour, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Inventory_InventoryItemData.PokemonHome, rhs: POGOProtos_Inventory_InventoryItemData.PokemonHome) -> Bool {
    if lhs.transporterEnergy != rhs.transporterEnergy {return false}
    if lhs.transporterFullyChargedMs != rhs.transporterFullyChargedMs {return false}
    if lhs.lastPassiveTransporterEnergyGainHour != rhs.lastPassiveTransporterEnergyGainHour {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
