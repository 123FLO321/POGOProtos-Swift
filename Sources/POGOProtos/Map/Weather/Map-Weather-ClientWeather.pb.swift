// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Map/Weather/ClientWeather.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Map_Weather_ClientWeather {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var s2CellID: Int64 = 0

  public var displayWeather: POGOProtos_Map_Weather_DisplayWeather {
    get {return _displayWeather ?? POGOProtos_Map_Weather_DisplayWeather()}
    set {_displayWeather = newValue}
  }
  /// Returns true if `displayWeather` has been explicitly set.
  public var hasDisplayWeather: Bool {return self._displayWeather != nil}
  /// Clears the value of `displayWeather`. Subsequent reads from it will return its default value.
  public mutating func clearDisplayWeather() {self._displayWeather = nil}

  public var gameplayWeather: POGOProtos_Map_Weather_GameplayWeather {
    get {return _gameplayWeather ?? POGOProtos_Map_Weather_GameplayWeather()}
    set {_gameplayWeather = newValue}
  }
  /// Returns true if `gameplayWeather` has been explicitly set.
  public var hasGameplayWeather: Bool {return self._gameplayWeather != nil}
  /// Clears the value of `gameplayWeather`. Subsequent reads from it will return its default value.
  public mutating func clearGameplayWeather() {self._gameplayWeather = nil}

  public var alerts: [POGOProtos_Map_Weather_WeatherAlert] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _displayWeather: POGOProtos_Map_Weather_DisplayWeather? = nil
  fileprivate var _gameplayWeather: POGOProtos_Map_Weather_GameplayWeather? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Map.Weather"

extension POGOProtos_Map_Weather_ClientWeather: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClientWeather"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "s2_cell_id"),
    2: .standard(proto: "display_weather"),
    3: .standard(proto: "gameplay_weather"),
    4: .same(proto: "alerts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.s2CellID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._displayWeather) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gameplayWeather) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.alerts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.s2CellID != 0 {
      try visitor.visitSingularInt64Field(value: self.s2CellID, fieldNumber: 1)
    }
    if let v = self._displayWeather {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._gameplayWeather {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.alerts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alerts, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Weather_ClientWeather, rhs: POGOProtos_Map_Weather_ClientWeather) -> Bool {
    if lhs.s2CellID != rhs.s2CellID {return false}
    if lhs._displayWeather != rhs._displayWeather {return false}
    if lhs._gameplayWeather != rhs._gameplayWeather {return false}
    if lhs.alerts != rhs.alerts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
