// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Map/Fort/FortData.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Map_Fort_FortData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var lastModifiedTimestampMs: Int64 {
    get {return _storage._lastModifiedTimestampMs}
    set {_uniqueStorage()._lastModifiedTimestampMs = newValue}
  }

  public var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  public var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  /// (Gym only) Team that owns the gym.
  public var ownedByTeam: POGOProtos_Enums_TeamColor {
    get {return _storage._ownedByTeam}
    set {_uniqueStorage()._ownedByTeam = newValue}
  }

  /// (Gym only) Highest CP Pokemon ID at the gym.
  public var guardPokemonID: POGOProtos_Enums_PokemonId {
    get {return _storage._guardPokemonID}
    set {_uniqueStorage()._guardPokemonID = newValue}
  }

  public var guardPokemonLevel: Int32 {
    get {return _storage._guardPokemonLevel}
    set {_uniqueStorage()._guardPokemonLevel = newValue}
  }

  public var enabled: Bool {
    get {return _storage._enabled}
    set {_uniqueStorage()._enabled = newValue}
  }

  public var type: POGOProtos_Map_Fort_FortType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// (Gym only) Prestigate / experience of the gym.
  public var gymPoints: Int64 {
    get {return _storage._gymPoints}
    set {_uniqueStorage()._gymPoints = newValue}
  }

  /// (Gym only) Whether someone is battling at the gym currently.
  public var isInBattle: Bool {
    get {return _storage._isInBattle}
    set {_uniqueStorage()._isInBattle = newValue}
  }

  /// (Pokestop only)
  public var activeFortModifier: [POGOProtos_Inventory_Item_ItemId] {
    get {return _storage._activeFortModifier}
    set {_uniqueStorage()._activeFortModifier = newValue}
  }

  public var activePokemon: POGOProtos_Map_Pokemon_MapPokemon {
    get {return _storage._activePokemon ?? POGOProtos_Map_Pokemon_MapPokemon()}
    set {_uniqueStorage()._activePokemon = newValue}
  }
  /// Returns true if `activePokemon` has been explicitly set.
  public var hasActivePokemon: Bool {return _storage._activePokemon != nil}
  /// Clears the value of `activePokemon`. Subsequent reads from it will return its default value.
  public mutating func clearActivePokemon() {_uniqueStorage()._activePokemon = nil}

  /// (Pokestop only) Timestamp when the pokestop can be activated again to get items / xp.
  public var cooldownCompleteMs: Int64 {
    get {return _storage._cooldownCompleteMs}
    set {_uniqueStorage()._cooldownCompleteMs = newValue}
  }

  public var sponsor: POGOProtos_Map_Fort_FortSponsor {
    get {return _storage._sponsor}
    set {_uniqueStorage()._sponsor = newValue}
  }

  public var renderingType: POGOProtos_Map_Fort_FortRenderingType {
    get {return _storage._renderingType}
    set {_uniqueStorage()._renderingType = newValue}
  }

  public var deployLockoutEndMs: Int64 {
    get {return _storage._deployLockoutEndMs}
    set {_uniqueStorage()._deployLockoutEndMs = newValue}
  }

  public var guardPokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _storage._guardPokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_uniqueStorage()._guardPokemonDisplay = newValue}
  }
  /// Returns true if `guardPokemonDisplay` has been explicitly set.
  public var hasGuardPokemonDisplay: Bool {return _storage._guardPokemonDisplay != nil}
  /// Clears the value of `guardPokemonDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearGuardPokemonDisplay() {_uniqueStorage()._guardPokemonDisplay = nil}

  public var closed: Bool {
    get {return _storage._closed}
    set {_uniqueStorage()._closed = newValue}
  }

  public var raidInfo: POGOProtos_Data_Raid_RaidInfo {
    get {return _storage._raidInfo ?? POGOProtos_Data_Raid_RaidInfo()}
    set {_uniqueStorage()._raidInfo = newValue}
  }
  /// Returns true if `raidInfo` has been explicitly set.
  public var hasRaidInfo: Bool {return _storage._raidInfo != nil}
  /// Clears the value of `raidInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRaidInfo() {_uniqueStorage()._raidInfo = nil}

  public var gymDisplay: POGOProtos_Map_Fort_GymDisplay {
    get {return _storage._gymDisplay ?? POGOProtos_Map_Fort_GymDisplay()}
    set {_uniqueStorage()._gymDisplay = newValue}
  }
  /// Returns true if `gymDisplay` has been explicitly set.
  public var hasGymDisplay: Bool {return _storage._gymDisplay != nil}
  /// Clears the value of `gymDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearGymDisplay() {_uniqueStorage()._gymDisplay = nil}

  public var visited: Bool {
    get {return _storage._visited}
    set {_uniqueStorage()._visited = newValue}
  }

  public var sameTeamDeployLockoutEndMs: Int64 {
    get {return _storage._sameTeamDeployLockoutEndMs}
    set {_uniqueStorage()._sameTeamDeployLockoutEndMs = newValue}
  }

  public var allowCheckin: Bool {
    get {return _storage._allowCheckin}
    set {_uniqueStorage()._allowCheckin = newValue}
  }

  public var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  public var inEvent: Bool {
    get {return _storage._inEvent}
    set {_uniqueStorage()._inEvent = newValue}
  }

  public var bannerURL: String {
    get {return _storage._bannerURL}
    set {_uniqueStorage()._bannerURL = newValue}
  }

  public var partnerID: String {
    get {return _storage._partnerID}
    set {_uniqueStorage()._partnerID = newValue}
  }

  public var challengeQuestCompleted: Bool {
    get {return _storage._challengeQuestCompleted}
    set {_uniqueStorage()._challengeQuestCompleted = newValue}
  }

  public var isExRaidEligible: Bool {
    get {return _storage._isExRaidEligible}
    set {_uniqueStorage()._isExRaidEligible = newValue}
  }

  public var pokestopDisplay: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay {
    get {return _storage._pokestopDisplay ?? POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay()}
    set {_uniqueStorage()._pokestopDisplay = newValue}
  }
  /// Returns true if `pokestopDisplay` has been explicitly set.
  public var hasPokestopDisplay: Bool {return _storage._pokestopDisplay != nil}
  /// Clears the value of `pokestopDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearPokestopDisplay() {_uniqueStorage()._pokestopDisplay = nil}

  public var pokestopDisplays: [POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay] {
    get {return _storage._pokestopDisplays}
    set {_uniqueStorage()._pokestopDisplays = newValue}
  }

  public var isArScanEligible: Bool {
    get {return _storage._isArScanEligible}
    set {_uniqueStorage()._isArScanEligible = newValue}
  }

  public var geostoreTombstoneMessageKey: String {
    get {return _storage._geostoreTombstoneMessageKey}
    set {_uniqueStorage()._geostoreTombstoneMessageKey = newValue}
  }

  public var geostoreSuspensionMessageKey: String {
    get {return _storage._geostoreSuspensionMessageKey}
    set {_uniqueStorage()._geostoreSuspensionMessageKey = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct PokestopIncidentDisplay {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var incidentID: String = String()

    public var incidentStartMs: Int64 = 0

    public var incidentExpirationMs: Int64 = 0

    public var hideIncident: Bool = false

    public var incidentCompleted: Bool = false

    public var incidentDisplayType: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.IncidentDisplayType = .none

    public var incidentDisplayOrderPriority: Int32 = 0

    public var continueDisplayingIncident: Bool = false

    public var mapDisplay: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.OneOf_MapDisplay? = nil

    public var characterDisplay: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay {
      get {
        if case .characterDisplay(let v)? = mapDisplay {return v}
        return POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay()
      }
      set {mapDisplay = .characterDisplay(newValue)}
    }

    public var invasionFinished: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay {
      get {
        if case .invasionFinished(let v)? = mapDisplay {return v}
        return POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay()
      }
      set {mapDisplay = .invasionFinished(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_MapDisplay: Equatable {
      case characterDisplay(POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay)
      case invasionFinished(POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay)

    #if !swift(>=4.1)
      public static func ==(lhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.OneOf_MapDisplay, rhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.OneOf_MapDisplay) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.characterDisplay, .characterDisplay): return {
          guard case .characterDisplay(let l) = lhs, case .characterDisplay(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.invasionFinished, .invasionFinished): return {
          guard case .invasionFinished(let l) = lhs, case .invasionFinished(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public enum IncidentDisplayType: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case none // = 0
      case invasionGrunt // = 1
      case invasionLeader // = 2
      case invasionGiovanni // = 3
      case invasionGruntb // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .none
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .invasionGrunt
        case 2: self = .invasionLeader
        case 3: self = .invasionGiovanni
        case 4: self = .invasionGruntb
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .none: return 0
        case .invasionGrunt: return 1
        case .invasionLeader: return 2
        case .invasionGiovanni: return 3
        case .invasionGruntb: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public struct CharacterDisplay {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var style: POGOProtos_Enums_EnumWrapper.PokestopStyle = .pokestopNormal

      public var character: POGOProtos_Enums_EnumWrapper.InvasionCharacter = .characterUnset

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct InvasionFinishedDisplay {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var style: POGOProtos_Enums_EnumWrapper.PokestopStyle = .pokestopNormal

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.IncidentDisplayType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.IncidentDisplayType] = [
    .none,
    .invasionGrunt,
    .invasionLeader,
    .invasionGiovanni,
    .invasionGruntb,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Map.Fort"

extension POGOProtos_Map_Fort_FortData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FortData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "last_modified_timestamp_ms"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .standard(proto: "owned_by_team"),
    6: .standard(proto: "guard_pokemon_id"),
    7: .standard(proto: "guard_pokemon_level"),
    8: .same(proto: "enabled"),
    9: .same(proto: "type"),
    10: .standard(proto: "gym_points"),
    11: .standard(proto: "is_in_battle"),
    12: .standard(proto: "active_fort_modifier"),
    13: .standard(proto: "active_pokemon"),
    14: .standard(proto: "cooldown_complete_ms"),
    15: .same(proto: "sponsor"),
    16: .standard(proto: "rendering_type"),
    17: .standard(proto: "deploy_lockout_end_ms"),
    18: .standard(proto: "guard_pokemon_display"),
    19: .same(proto: "closed"),
    20: .standard(proto: "raid_info"),
    21: .standard(proto: "gym_display"),
    22: .same(proto: "visited"),
    23: .standard(proto: "same_team_deploy_lockout_end_ms"),
    24: .standard(proto: "allow_checkin"),
    25: .standard(proto: "image_url"),
    26: .standard(proto: "in_event"),
    27: .standard(proto: "banner_url"),
    28: .standard(proto: "partner_id"),
    30: .standard(proto: "challenge_quest_completed"),
    31: .standard(proto: "is_ex_raid_eligible"),
    32: .standard(proto: "pokestop_display"),
    33: .standard(proto: "pokestop_displays"),
    34: .standard(proto: "is_ar_scan_eligible"),
    35: .standard(proto: "geostore_tombstone_message_key"),
    36: .standard(proto: "geostore_suspension_message_key"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _lastModifiedTimestampMs: Int64 = 0
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _ownedByTeam: POGOProtos_Enums_TeamColor = .neutral
    var _guardPokemonID: POGOProtos_Enums_PokemonId = .missingno
    var _guardPokemonLevel: Int32 = 0
    var _enabled: Bool = false
    var _type: POGOProtos_Map_Fort_FortType = .gym
    var _gymPoints: Int64 = 0
    var _isInBattle: Bool = false
    var _activeFortModifier: [POGOProtos_Inventory_Item_ItemId] = []
    var _activePokemon: POGOProtos_Map_Pokemon_MapPokemon? = nil
    var _cooldownCompleteMs: Int64 = 0
    var _sponsor: POGOProtos_Map_Fort_FortSponsor = .unsetSponsor
    var _renderingType: POGOProtos_Map_Fort_FortRenderingType = .default
    var _deployLockoutEndMs: Int64 = 0
    var _guardPokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
    var _closed: Bool = false
    var _raidInfo: POGOProtos_Data_Raid_RaidInfo? = nil
    var _gymDisplay: POGOProtos_Map_Fort_GymDisplay? = nil
    var _visited: Bool = false
    var _sameTeamDeployLockoutEndMs: Int64 = 0
    var _allowCheckin: Bool = false
    var _imageURL: String = String()
    var _inEvent: Bool = false
    var _bannerURL: String = String()
    var _partnerID: String = String()
    var _challengeQuestCompleted: Bool = false
    var _isExRaidEligible: Bool = false
    var _pokestopDisplay: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay? = nil
    var _pokestopDisplays: [POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay] = []
    var _isArScanEligible: Bool = false
    var _geostoreTombstoneMessageKey: String = String()
    var _geostoreSuspensionMessageKey: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _lastModifiedTimestampMs = source._lastModifiedTimestampMs
      _latitude = source._latitude
      _longitude = source._longitude
      _ownedByTeam = source._ownedByTeam
      _guardPokemonID = source._guardPokemonID
      _guardPokemonLevel = source._guardPokemonLevel
      _enabled = source._enabled
      _type = source._type
      _gymPoints = source._gymPoints
      _isInBattle = source._isInBattle
      _activeFortModifier = source._activeFortModifier
      _activePokemon = source._activePokemon
      _cooldownCompleteMs = source._cooldownCompleteMs
      _sponsor = source._sponsor
      _renderingType = source._renderingType
      _deployLockoutEndMs = source._deployLockoutEndMs
      _guardPokemonDisplay = source._guardPokemonDisplay
      _closed = source._closed
      _raidInfo = source._raidInfo
      _gymDisplay = source._gymDisplay
      _visited = source._visited
      _sameTeamDeployLockoutEndMs = source._sameTeamDeployLockoutEndMs
      _allowCheckin = source._allowCheckin
      _imageURL = source._imageURL
      _inEvent = source._inEvent
      _bannerURL = source._bannerURL
      _partnerID = source._partnerID
      _challengeQuestCompleted = source._challengeQuestCompleted
      _isExRaidEligible = source._isExRaidEligible
      _pokestopDisplay = source._pokestopDisplay
      _pokestopDisplays = source._pokestopDisplays
      _isArScanEligible = source._isArScanEligible
      _geostoreTombstoneMessageKey = source._geostoreTombstoneMessageKey
      _geostoreSuspensionMessageKey = source._geostoreSuspensionMessageKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._lastModifiedTimestampMs) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._ownedByTeam) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._guardPokemonID) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._guardPokemonLevel) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._enabled) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 10: try { try decoder.decodeSingularInt64Field(value: &_storage._gymPoints) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isInBattle) }()
        case 12: try { try decoder.decodeRepeatedEnumField(value: &_storage._activeFortModifier) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._activePokemon) }()
        case 14: try { try decoder.decodeSingularInt64Field(value: &_storage._cooldownCompleteMs) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._sponsor) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._renderingType) }()
        case 17: try { try decoder.decodeSingularInt64Field(value: &_storage._deployLockoutEndMs) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._guardPokemonDisplay) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._closed) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._raidInfo) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._gymDisplay) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._visited) }()
        case 23: try { try decoder.decodeSingularInt64Field(value: &_storage._sameTeamDeployLockoutEndMs) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._allowCheckin) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._imageURL) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._inEvent) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._bannerURL) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._partnerID) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._challengeQuestCompleted) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._isExRaidEligible) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._pokestopDisplay) }()
        case 33: try { try decoder.decodeRepeatedMessageField(value: &_storage._pokestopDisplays) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._isArScanEligible) }()
        case 35: try { try decoder.decodeSingularStringField(value: &_storage._geostoreTombstoneMessageKey) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._geostoreSuspensionMessageKey) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._lastModifiedTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastModifiedTimestampMs, fieldNumber: 2)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 3)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 4)
      }
      if _storage._ownedByTeam != .neutral {
        try visitor.visitSingularEnumField(value: _storage._ownedByTeam, fieldNumber: 5)
      }
      if _storage._guardPokemonID != .missingno {
        try visitor.visitSingularEnumField(value: _storage._guardPokemonID, fieldNumber: 6)
      }
      if _storage._guardPokemonLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._guardPokemonLevel, fieldNumber: 7)
      }
      if _storage._enabled != false {
        try visitor.visitSingularBoolField(value: _storage._enabled, fieldNumber: 8)
      }
      if _storage._type != .gym {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 9)
      }
      if _storage._gymPoints != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gymPoints, fieldNumber: 10)
      }
      if _storage._isInBattle != false {
        try visitor.visitSingularBoolField(value: _storage._isInBattle, fieldNumber: 11)
      }
      if !_storage._activeFortModifier.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._activeFortModifier, fieldNumber: 12)
      }
      if let v = _storage._activePokemon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if _storage._cooldownCompleteMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cooldownCompleteMs, fieldNumber: 14)
      }
      if _storage._sponsor != .unsetSponsor {
        try visitor.visitSingularEnumField(value: _storage._sponsor, fieldNumber: 15)
      }
      if _storage._renderingType != .default {
        try visitor.visitSingularEnumField(value: _storage._renderingType, fieldNumber: 16)
      }
      if _storage._deployLockoutEndMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deployLockoutEndMs, fieldNumber: 17)
      }
      if let v = _storage._guardPokemonDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if _storage._closed != false {
        try visitor.visitSingularBoolField(value: _storage._closed, fieldNumber: 19)
      }
      if let v = _storage._raidInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._gymDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if _storage._visited != false {
        try visitor.visitSingularBoolField(value: _storage._visited, fieldNumber: 22)
      }
      if _storage._sameTeamDeployLockoutEndMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sameTeamDeployLockoutEndMs, fieldNumber: 23)
      }
      if _storage._allowCheckin != false {
        try visitor.visitSingularBoolField(value: _storage._allowCheckin, fieldNumber: 24)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 25)
      }
      if _storage._inEvent != false {
        try visitor.visitSingularBoolField(value: _storage._inEvent, fieldNumber: 26)
      }
      if !_storage._bannerURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerURL, fieldNumber: 27)
      }
      if !_storage._partnerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partnerID, fieldNumber: 28)
      }
      if _storage._challengeQuestCompleted != false {
        try visitor.visitSingularBoolField(value: _storage._challengeQuestCompleted, fieldNumber: 30)
      }
      if _storage._isExRaidEligible != false {
        try visitor.visitSingularBoolField(value: _storage._isExRaidEligible, fieldNumber: 31)
      }
      if let v = _storage._pokestopDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if !_storage._pokestopDisplays.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pokestopDisplays, fieldNumber: 33)
      }
      if _storage._isArScanEligible != false {
        try visitor.visitSingularBoolField(value: _storage._isArScanEligible, fieldNumber: 34)
      }
      if !_storage._geostoreTombstoneMessageKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._geostoreTombstoneMessageKey, fieldNumber: 35)
      }
      if !_storage._geostoreSuspensionMessageKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._geostoreSuspensionMessageKey, fieldNumber: 36)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Fort_FortData, rhs: POGOProtos_Map_Fort_FortData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._lastModifiedTimestampMs != rhs_storage._lastModifiedTimestampMs {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._ownedByTeam != rhs_storage._ownedByTeam {return false}
        if _storage._guardPokemonID != rhs_storage._guardPokemonID {return false}
        if _storage._guardPokemonLevel != rhs_storage._guardPokemonLevel {return false}
        if _storage._enabled != rhs_storage._enabled {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._gymPoints != rhs_storage._gymPoints {return false}
        if _storage._isInBattle != rhs_storage._isInBattle {return false}
        if _storage._activeFortModifier != rhs_storage._activeFortModifier {return false}
        if _storage._activePokemon != rhs_storage._activePokemon {return false}
        if _storage._cooldownCompleteMs != rhs_storage._cooldownCompleteMs {return false}
        if _storage._sponsor != rhs_storage._sponsor {return false}
        if _storage._renderingType != rhs_storage._renderingType {return false}
        if _storage._deployLockoutEndMs != rhs_storage._deployLockoutEndMs {return false}
        if _storage._guardPokemonDisplay != rhs_storage._guardPokemonDisplay {return false}
        if _storage._closed != rhs_storage._closed {return false}
        if _storage._raidInfo != rhs_storage._raidInfo {return false}
        if _storage._gymDisplay != rhs_storage._gymDisplay {return false}
        if _storage._visited != rhs_storage._visited {return false}
        if _storage._sameTeamDeployLockoutEndMs != rhs_storage._sameTeamDeployLockoutEndMs {return false}
        if _storage._allowCheckin != rhs_storage._allowCheckin {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._inEvent != rhs_storage._inEvent {return false}
        if _storage._bannerURL != rhs_storage._bannerURL {return false}
        if _storage._partnerID != rhs_storage._partnerID {return false}
        if _storage._challengeQuestCompleted != rhs_storage._challengeQuestCompleted {return false}
        if _storage._isExRaidEligible != rhs_storage._isExRaidEligible {return false}
        if _storage._pokestopDisplay != rhs_storage._pokestopDisplay {return false}
        if _storage._pokestopDisplays != rhs_storage._pokestopDisplays {return false}
        if _storage._isArScanEligible != rhs_storage._isArScanEligible {return false}
        if _storage._geostoreTombstoneMessageKey != rhs_storage._geostoreTombstoneMessageKey {return false}
        if _storage._geostoreSuspensionMessageKey != rhs_storage._geostoreSuspensionMessageKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Map_Fort_FortData.protoMessageName + ".PokestopIncidentDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incident_id"),
    2: .standard(proto: "incident_start_ms"),
    3: .standard(proto: "incident_expiration_ms"),
    4: .standard(proto: "hide_incident"),
    5: .standard(proto: "incident_completed"),
    6: .standard(proto: "incident_display_type"),
    7: .standard(proto: "incident_display_order_priority"),
    8: .standard(proto: "continue_displaying_incident"),
    10: .standard(proto: "character_display"),
    11: .standard(proto: "invasion_finished"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.incidentID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.incidentStartMs) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.incidentExpirationMs) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.hideIncident) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.incidentCompleted) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.incidentDisplayType) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.incidentDisplayOrderPriority) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.continueDisplayingIncident) }()
      case 10: try {
        var v: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay?
        if let current = self.mapDisplay {
          try decoder.handleConflictingOneOf()
          if case .characterDisplay(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mapDisplay = .characterDisplay(v)}
      }()
      case 11: try {
        var v: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay?
        if let current = self.mapDisplay {
          try decoder.handleConflictingOneOf()
          if case .invasionFinished(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mapDisplay = .invasionFinished(v)}
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.incidentID.isEmpty {
      try visitor.visitSingularStringField(value: self.incidentID, fieldNumber: 1)
    }
    if self.incidentStartMs != 0 {
      try visitor.visitSingularInt64Field(value: self.incidentStartMs, fieldNumber: 2)
    }
    if self.incidentExpirationMs != 0 {
      try visitor.visitSingularInt64Field(value: self.incidentExpirationMs, fieldNumber: 3)
    }
    if self.hideIncident != false {
      try visitor.visitSingularBoolField(value: self.hideIncident, fieldNumber: 4)
    }
    if self.incidentCompleted != false {
      try visitor.visitSingularBoolField(value: self.incidentCompleted, fieldNumber: 5)
    }
    if self.incidentDisplayType != .none {
      try visitor.visitSingularEnumField(value: self.incidentDisplayType, fieldNumber: 6)
    }
    if self.incidentDisplayOrderPriority != 0 {
      try visitor.visitSingularInt32Field(value: self.incidentDisplayOrderPriority, fieldNumber: 7)
    }
    if self.continueDisplayingIncident != false {
      try visitor.visitSingularBoolField(value: self.continueDisplayingIncident, fieldNumber: 8)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.mapDisplay {
    case .characterDisplay?: try {
      guard case .characterDisplay(let v)? = self.mapDisplay else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .invasionFinished?: try {
      guard case .invasionFinished(let v)? = self.mapDisplay else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay, rhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay) -> Bool {
    if lhs.incidentID != rhs.incidentID {return false}
    if lhs.incidentStartMs != rhs.incidentStartMs {return false}
    if lhs.incidentExpirationMs != rhs.incidentExpirationMs {return false}
    if lhs.hideIncident != rhs.hideIncident {return false}
    if lhs.incidentCompleted != rhs.incidentCompleted {return false}
    if lhs.incidentDisplayType != rhs.incidentDisplayType {return false}
    if lhs.incidentDisplayOrderPriority != rhs.incidentDisplayOrderPriority {return false}
    if lhs.continueDisplayingIncident != rhs.continueDisplayingIncident {return false}
    if lhs.mapDisplay != rhs.mapDisplay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.IncidentDisplayType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "INVASION_GRUNT"),
    2: .same(proto: "INVASION_LEADER"),
    3: .same(proto: "INVASION_GIOVANNI"),
    4: .same(proto: "INVASION_GRUNTB"),
  ]
}

extension POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.protoMessageName + ".CharacterDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
    2: .same(proto: "character"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.character) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.style != .pokestopNormal {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    if self.character != .characterUnset {
      try visitor.visitSingularEnumField(value: self.character, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay, rhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.CharacterDisplay) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.character != rhs.character {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.protoMessageName + ".InvasionFinishedDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.style != .pokestopNormal {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay, rhs: POGOProtos_Map_Fort_FortData.PokestopIncidentDisplay.InvasionFinishedDisplay) -> Bool {
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
