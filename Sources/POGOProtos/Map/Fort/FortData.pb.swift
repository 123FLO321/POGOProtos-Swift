// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Map/Fort/FortData.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Map_Fort_FortData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var lastModifiedTimestampMs: Int64 {
    get {return _storage._lastModifiedTimestampMs}
    set {_uniqueStorage()._lastModifiedTimestampMs = newValue}
  }

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  /// (Gym only) Team that owns the gym.
  var ownedByTeam: POGOProtos_Enums_TeamColor {
    get {return _storage._ownedByTeam}
    set {_uniqueStorage()._ownedByTeam = newValue}
  }

  /// (Gym only) Highest CP Pokemon ID at the gym.
  var guardPokemonID: POGOProtos_Enums_PokemonId {
    get {return _storage._guardPokemonID}
    set {_uniqueStorage()._guardPokemonID = newValue}
  }

  /// (Gym only) Highest CP Pokemon at the gym.
  var guardPokemonCp: Int32 {
    get {return _storage._guardPokemonCp}
    set {_uniqueStorage()._guardPokemonCp = newValue}
  }

  var enabled: Bool {
    get {return _storage._enabled}
    set {_uniqueStorage()._enabled = newValue}
  }

  var type: POGOProtos_Map_Fort_FortType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// (Gym only) Prestigate / experience of the gym.
  var gymPoints: Int64 {
    get {return _storage._gymPoints}
    set {_uniqueStorage()._gymPoints = newValue}
  }

  /// (Gym only) Whether someone is battling at the gym currently.
  var isInBattle: Bool {
    get {return _storage._isInBattle}
    set {_uniqueStorage()._isInBattle = newValue}
  }

  /// (Pokestop only)
  var activeFortModifier: [POGOProtos_Inventory_Item_ItemId] {
    get {return _storage._activeFortModifier}
    set {_uniqueStorage()._activeFortModifier = newValue}
  }

  /// (Pokestop only)
  var lureInfo: POGOProtos_Map_Fort_FortLureInfo {
    get {return _storage._lureInfo ?? POGOProtos_Map_Fort_FortLureInfo()}
    set {_uniqueStorage()._lureInfo = newValue}
  }
  /// Returns true if `lureInfo` has been explicitly set.
  var hasLureInfo: Bool {return _storage._lureInfo != nil}
  /// Clears the value of `lureInfo`. Subsequent reads from it will return its default value.
  mutating func clearLureInfo() {_uniqueStorage()._lureInfo = nil}

  /// (Pokestop only) Timestamp when the pokestop can be activated again to get items / xp.
  var cooldownCompleteTimestampMs: Int64 {
    get {return _storage._cooldownCompleteTimestampMs}
    set {_uniqueStorage()._cooldownCompleteTimestampMs = newValue}
  }

  var sponsor: POGOProtos_Map_Fort_FortSponsor {
    get {return _storage._sponsor}
    set {_uniqueStorage()._sponsor = newValue}
  }

  var renderingType: POGOProtos_Map_Fort_FortRenderingType {
    get {return _storage._renderingType}
    set {_uniqueStorage()._renderingType = newValue}
  }

  var deployLockoutEndMs: Int64 {
    get {return _storage._deployLockoutEndMs}
    set {_uniqueStorage()._deployLockoutEndMs = newValue}
  }

  var guardPokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _storage._guardPokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_uniqueStorage()._guardPokemonDisplay = newValue}
  }
  /// Returns true if `guardPokemonDisplay` has been explicitly set.
  var hasGuardPokemonDisplay: Bool {return _storage._guardPokemonDisplay != nil}
  /// Clears the value of `guardPokemonDisplay`. Subsequent reads from it will return its default value.
  mutating func clearGuardPokemonDisplay() {_uniqueStorage()._guardPokemonDisplay = nil}

  var closed: Bool {
    get {return _storage._closed}
    set {_uniqueStorage()._closed = newValue}
  }

  var raidInfo: POGOProtos_Data_Raid_RaidInfo {
    get {return _storage._raidInfo ?? POGOProtos_Data_Raid_RaidInfo()}
    set {_uniqueStorage()._raidInfo = newValue}
  }
  /// Returns true if `raidInfo` has been explicitly set.
  var hasRaidInfo: Bool {return _storage._raidInfo != nil}
  /// Clears the value of `raidInfo`. Subsequent reads from it will return its default value.
  mutating func clearRaidInfo() {_uniqueStorage()._raidInfo = nil}

  var gymDisplay: POGOProtos_Map_Fort_GymDisplay {
    get {return _storage._gymDisplay ?? POGOProtos_Map_Fort_GymDisplay()}
    set {_uniqueStorage()._gymDisplay = newValue}
  }
  /// Returns true if `gymDisplay` has been explicitly set.
  var hasGymDisplay: Bool {return _storage._gymDisplay != nil}
  /// Clears the value of `gymDisplay`. Subsequent reads from it will return its default value.
  mutating func clearGymDisplay() {_uniqueStorage()._gymDisplay = nil}

  var visited: Bool {
    get {return _storage._visited}
    set {_uniqueStorage()._visited = newValue}
  }

  var sameTeamDeployLockoutEndMs: Int64 {
    get {return _storage._sameTeamDeployLockoutEndMs}
    set {_uniqueStorage()._sameTeamDeployLockoutEndMs = newValue}
  }

  var allowCheckin: Bool {
    get {return _storage._allowCheckin}
    set {_uniqueStorage()._allowCheckin = newValue}
  }

  var imageURL: String {
    get {return _storage._imageURL}
    set {_uniqueStorage()._imageURL = newValue}
  }

  var inEvent: Bool {
    get {return _storage._inEvent}
    set {_uniqueStorage()._inEvent = newValue}
  }

  var bannerURL: String {
    get {return _storage._bannerURL}
    set {_uniqueStorage()._bannerURL = newValue}
  }

  var partnerID: String {
    get {return _storage._partnerID}
    set {_uniqueStorage()._partnerID = newValue}
  }

  var challengeQuestCompleted: Bool {
    get {return _storage._challengeQuestCompleted}
    set {_uniqueStorage()._challengeQuestCompleted = newValue}
  }

  var isExRaidEligible: Bool {
    get {return _storage._isExRaidEligible}
    set {_uniqueStorage()._isExRaidEligible = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Map.Fort"

extension POGOProtos_Map_Fort_FortData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FortData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "last_modified_timestamp_ms"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .standard(proto: "owned_by_team"),
    6: .standard(proto: "guard_pokemon_id"),
    7: .standard(proto: "guard_pokemon_cp"),
    8: .same(proto: "enabled"),
    9: .same(proto: "type"),
    10: .standard(proto: "gym_points"),
    11: .standard(proto: "is_in_battle"),
    12: .standard(proto: "active_fort_modifier"),
    13: .standard(proto: "lure_info"),
    14: .standard(proto: "cooldown_complete_timestamp_ms"),
    15: .same(proto: "sponsor"),
    16: .standard(proto: "rendering_type"),
    17: .standard(proto: "deploy_lockout_end_ms"),
    18: .standard(proto: "guard_pokemon_display"),
    19: .same(proto: "closed"),
    20: .standard(proto: "raid_info"),
    21: .standard(proto: "gym_display"),
    22: .same(proto: "visited"),
    23: .standard(proto: "same_team_deploy_lockout_end_ms"),
    24: .standard(proto: "allow_checkin"),
    25: .standard(proto: "image_url"),
    26: .standard(proto: "in_event"),
    27: .standard(proto: "banner_url"),
    28: .standard(proto: "partner_id"),
    30: .standard(proto: "challenge_quest_completed"),
    31: .standard(proto: "is_ex_raid_eligible"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _lastModifiedTimestampMs: Int64 = 0
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _ownedByTeam: POGOProtos_Enums_TeamColor = .neutral
    var _guardPokemonID: POGOProtos_Enums_PokemonId = .missingno
    var _guardPokemonCp: Int32 = 0
    var _enabled: Bool = false
    var _type: POGOProtos_Map_Fort_FortType = .gym
    var _gymPoints: Int64 = 0
    var _isInBattle: Bool = false
    var _activeFortModifier: [POGOProtos_Inventory_Item_ItemId] = []
    var _lureInfo: POGOProtos_Map_Fort_FortLureInfo? = nil
    var _cooldownCompleteTimestampMs: Int64 = 0
    var _sponsor: POGOProtos_Map_Fort_FortSponsor = .unsetSponsor
    var _renderingType: POGOProtos_Map_Fort_FortRenderingType = .default
    var _deployLockoutEndMs: Int64 = 0
    var _guardPokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
    var _closed: Bool = false
    var _raidInfo: POGOProtos_Data_Raid_RaidInfo? = nil
    var _gymDisplay: POGOProtos_Map_Fort_GymDisplay? = nil
    var _visited: Bool = false
    var _sameTeamDeployLockoutEndMs: Int64 = 0
    var _allowCheckin: Bool = false
    var _imageURL: String = String()
    var _inEvent: Bool = false
    var _bannerURL: String = String()
    var _partnerID: String = String()
    var _challengeQuestCompleted: Bool = false
    var _isExRaidEligible: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _lastModifiedTimestampMs = source._lastModifiedTimestampMs
      _latitude = source._latitude
      _longitude = source._longitude
      _ownedByTeam = source._ownedByTeam
      _guardPokemonID = source._guardPokemonID
      _guardPokemonCp = source._guardPokemonCp
      _enabled = source._enabled
      _type = source._type
      _gymPoints = source._gymPoints
      _isInBattle = source._isInBattle
      _activeFortModifier = source._activeFortModifier
      _lureInfo = source._lureInfo
      _cooldownCompleteTimestampMs = source._cooldownCompleteTimestampMs
      _sponsor = source._sponsor
      _renderingType = source._renderingType
      _deployLockoutEndMs = source._deployLockoutEndMs
      _guardPokemonDisplay = source._guardPokemonDisplay
      _closed = source._closed
      _raidInfo = source._raidInfo
      _gymDisplay = source._gymDisplay
      _visited = source._visited
      _sameTeamDeployLockoutEndMs = source._sameTeamDeployLockoutEndMs
      _allowCheckin = source._allowCheckin
      _imageURL = source._imageURL
      _inEvent = source._inEvent
      _bannerURL = source._bannerURL
      _partnerID = source._partnerID
      _challengeQuestCompleted = source._challengeQuestCompleted
      _isExRaidEligible = source._isExRaidEligible
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._lastModifiedTimestampMs)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._latitude)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._longitude)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._ownedByTeam)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._guardPokemonID)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._guardPokemonCp)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._enabled)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._gymPoints)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._isInBattle)
        case 12: try decoder.decodeRepeatedEnumField(value: &_storage._activeFortModifier)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._lureInfo)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._cooldownCompleteTimestampMs)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._sponsor)
        case 16: try decoder.decodeSingularEnumField(value: &_storage._renderingType)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._deployLockoutEndMs)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._guardPokemonDisplay)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._closed)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._raidInfo)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._gymDisplay)
        case 22: try decoder.decodeSingularBoolField(value: &_storage._visited)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._sameTeamDeployLockoutEndMs)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._allowCheckin)
        case 25: try decoder.decodeSingularStringField(value: &_storage._imageURL)
        case 26: try decoder.decodeSingularBoolField(value: &_storage._inEvent)
        case 27: try decoder.decodeSingularStringField(value: &_storage._bannerURL)
        case 28: try decoder.decodeSingularStringField(value: &_storage._partnerID)
        case 30: try decoder.decodeSingularBoolField(value: &_storage._challengeQuestCompleted)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._isExRaidEligible)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._lastModifiedTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastModifiedTimestampMs, fieldNumber: 2)
      }
      if _storage._latitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 3)
      }
      if _storage._longitude != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 4)
      }
      if _storage._ownedByTeam != .neutral {
        try visitor.visitSingularEnumField(value: _storage._ownedByTeam, fieldNumber: 5)
      }
      if _storage._guardPokemonID != .missingno {
        try visitor.visitSingularEnumField(value: _storage._guardPokemonID, fieldNumber: 6)
      }
      if _storage._guardPokemonCp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._guardPokemonCp, fieldNumber: 7)
      }
      if _storage._enabled != false {
        try visitor.visitSingularBoolField(value: _storage._enabled, fieldNumber: 8)
      }
      if _storage._type != .gym {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 9)
      }
      if _storage._gymPoints != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gymPoints, fieldNumber: 10)
      }
      if _storage._isInBattle != false {
        try visitor.visitSingularBoolField(value: _storage._isInBattle, fieldNumber: 11)
      }
      if !_storage._activeFortModifier.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._activeFortModifier, fieldNumber: 12)
      }
      if let v = _storage._lureInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if _storage._cooldownCompleteTimestampMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cooldownCompleteTimestampMs, fieldNumber: 14)
      }
      if _storage._sponsor != .unsetSponsor {
        try visitor.visitSingularEnumField(value: _storage._sponsor, fieldNumber: 15)
      }
      if _storage._renderingType != .default {
        try visitor.visitSingularEnumField(value: _storage._renderingType, fieldNumber: 16)
      }
      if _storage._deployLockoutEndMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deployLockoutEndMs, fieldNumber: 17)
      }
      if let v = _storage._guardPokemonDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if _storage._closed != false {
        try visitor.visitSingularBoolField(value: _storage._closed, fieldNumber: 19)
      }
      if let v = _storage._raidInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._gymDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if _storage._visited != false {
        try visitor.visitSingularBoolField(value: _storage._visited, fieldNumber: 22)
      }
      if _storage._sameTeamDeployLockoutEndMs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._sameTeamDeployLockoutEndMs, fieldNumber: 23)
      }
      if _storage._allowCheckin != false {
        try visitor.visitSingularBoolField(value: _storage._allowCheckin, fieldNumber: 24)
      }
      if !_storage._imageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageURL, fieldNumber: 25)
      }
      if _storage._inEvent != false {
        try visitor.visitSingularBoolField(value: _storage._inEvent, fieldNumber: 26)
      }
      if !_storage._bannerURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bannerURL, fieldNumber: 27)
      }
      if !_storage._partnerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partnerID, fieldNumber: 28)
      }
      if _storage._challengeQuestCompleted != false {
        try visitor.visitSingularBoolField(value: _storage._challengeQuestCompleted, fieldNumber: 30)
      }
      if _storage._isExRaidEligible != false {
        try visitor.visitSingularBoolField(value: _storage._isExRaidEligible, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Map_Fort_FortData, rhs: POGOProtos_Map_Fort_FortData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._lastModifiedTimestampMs != rhs_storage._lastModifiedTimestampMs {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._ownedByTeam != rhs_storage._ownedByTeam {return false}
        if _storage._guardPokemonID != rhs_storage._guardPokemonID {return false}
        if _storage._guardPokemonCp != rhs_storage._guardPokemonCp {return false}
        if _storage._enabled != rhs_storage._enabled {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._gymPoints != rhs_storage._gymPoints {return false}
        if _storage._isInBattle != rhs_storage._isInBattle {return false}
        if _storage._activeFortModifier != rhs_storage._activeFortModifier {return false}
        if _storage._lureInfo != rhs_storage._lureInfo {return false}
        if _storage._cooldownCompleteTimestampMs != rhs_storage._cooldownCompleteTimestampMs {return false}
        if _storage._sponsor != rhs_storage._sponsor {return false}
        if _storage._renderingType != rhs_storage._renderingType {return false}
        if _storage._deployLockoutEndMs != rhs_storage._deployLockoutEndMs {return false}
        if _storage._guardPokemonDisplay != rhs_storage._guardPokemonDisplay {return false}
        if _storage._closed != rhs_storage._closed {return false}
        if _storage._raidInfo != rhs_storage._raidInfo {return false}
        if _storage._gymDisplay != rhs_storage._gymDisplay {return false}
        if _storage._visited != rhs_storage._visited {return false}
        if _storage._sameTeamDeployLockoutEndMs != rhs_storage._sameTeamDeployLockoutEndMs {return false}
        if _storage._allowCheckin != rhs_storage._allowCheckin {return false}
        if _storage._imageURL != rhs_storage._imageURL {return false}
        if _storage._inEvent != rhs_storage._inEvent {return false}
        if _storage._bannerURL != rhs_storage._bannerURL {return false}
        if _storage._partnerID != rhs_storage._partnerID {return false}
        if _storage._challengeQuestCompleted != rhs_storage._challengeQuestCompleted {return false}
        if _storage._isExRaidEligible != rhs_storage._isExRaidEligible {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
