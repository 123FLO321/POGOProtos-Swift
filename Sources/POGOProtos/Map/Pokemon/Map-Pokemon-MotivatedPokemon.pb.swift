// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Map/Pokemon/MotivatedPokemon.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Map_Pokemon_MotivatedPokemon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pokemon: POGOProtos_Data_PokemonData {
    get {return _pokemon ?? POGOProtos_Data_PokemonData()}
    set {_pokemon = newValue}
  }
  /// Returns true if `pokemon` has been explicitly set.
  public var hasPokemon: Bool {return self._pokemon != nil}
  /// Clears the value of `pokemon`. Subsequent reads from it will return its default value.
  public mutating func clearPokemon() {self._pokemon = nil}

  public var deployMs: Int64 = 0

  public var cpWhenDeployed: Int32 = 0

  public var motivationNow: Double = 0

  public var cpNow: Int32 = 0

  public var berryValue: Float = 0

  public var feedCooldownDurationMillis: Int64 = 0

  public var foodValue: [POGOProtos_Map_Pokemon_MotivatedPokemon.FoodValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct FoodValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var motivationIncrease: Float = 0

    public var cpIncrease: Int32 = 0

    public var foodItem: POGOProtos_Inventory_Item_ItemId = .itemUnknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _pokemon: POGOProtos_Data_PokemonData? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Map.Pokemon"

extension POGOProtos_Map_Pokemon_MotivatedPokemon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MotivatedPokemon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pokemon"),
    2: .standard(proto: "deploy_ms"),
    3: .standard(proto: "cp_when_deployed"),
    4: .standard(proto: "motivation_now"),
    5: .standard(proto: "cp_now"),
    6: .standard(proto: "berry_value"),
    7: .standard(proto: "feed_cooldown_duration_millis"),
    8: .standard(proto: "food_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._pokemon) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.deployMs) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.cpWhenDeployed) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.motivationNow) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.cpNow) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.berryValue) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.feedCooldownDurationMillis) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.foodValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._pokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.deployMs != 0 {
      try visitor.visitSingularInt64Field(value: self.deployMs, fieldNumber: 2)
    }
    if self.cpWhenDeployed != 0 {
      try visitor.visitSingularInt32Field(value: self.cpWhenDeployed, fieldNumber: 3)
    }
    if self.motivationNow != 0 {
      try visitor.visitSingularDoubleField(value: self.motivationNow, fieldNumber: 4)
    }
    if self.cpNow != 0 {
      try visitor.visitSingularInt32Field(value: self.cpNow, fieldNumber: 5)
    }
    if self.berryValue != 0 {
      try visitor.visitSingularFloatField(value: self.berryValue, fieldNumber: 6)
    }
    if self.feedCooldownDurationMillis != 0 {
      try visitor.visitSingularInt64Field(value: self.feedCooldownDurationMillis, fieldNumber: 7)
    }
    if !self.foodValue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.foodValue, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Pokemon_MotivatedPokemon, rhs: POGOProtos_Map_Pokemon_MotivatedPokemon) -> Bool {
    if lhs._pokemon != rhs._pokemon {return false}
    if lhs.deployMs != rhs.deployMs {return false}
    if lhs.cpWhenDeployed != rhs.cpWhenDeployed {return false}
    if lhs.motivationNow != rhs.motivationNow {return false}
    if lhs.cpNow != rhs.cpNow {return false}
    if lhs.berryValue != rhs.berryValue {return false}
    if lhs.feedCooldownDurationMillis != rhs.feedCooldownDurationMillis {return false}
    if lhs.foodValue != rhs.foodValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Map_Pokemon_MotivatedPokemon.FoodValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Map_Pokemon_MotivatedPokemon.protoMessageName + ".FoodValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "motivation_increase"),
    2: .standard(proto: "cp_increase"),
    3: .standard(proto: "food_item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.motivationIncrease) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.cpIncrease) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.foodItem) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.motivationIncrease != 0 {
      try visitor.visitSingularFloatField(value: self.motivationIncrease, fieldNumber: 1)
    }
    if self.cpIncrease != 0 {
      try visitor.visitSingularInt32Field(value: self.cpIncrease, fieldNumber: 2)
    }
    if self.foodItem != .itemUnknown {
      try visitor.visitSingularEnumField(value: self.foodItem, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_Pokemon_MotivatedPokemon.FoodValue, rhs: POGOProtos_Map_Pokemon_MotivatedPokemon.FoodValue) -> Bool {
    if lhs.motivationIncrease != rhs.motivationIncrease {return false}
    if lhs.cpIncrease != rhs.cpIncrease {return false}
    if lhs.foodItem != rhs.foodItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
