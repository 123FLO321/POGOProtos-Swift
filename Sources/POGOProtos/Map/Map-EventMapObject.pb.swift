// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Map/EventMapObject.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Map_EventMapObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var points: [POGOProtos_Map_EventMapObject.LatLng] = []

  public var type: POGOProtos_Map_EventMapObject.OneOf_Type? = nil

  public var habitat: String {
    get {
      if case .habitat(let v)? = type {return v}
      return String()
    }
    set {type = .habitat(newValue)}
  }

  public var path: String {
    get {
      if case .path(let v)? = type {return v}
      return String()
    }
    set {type = .path(newValue)}
  }

  public var object: String {
    get {
      if case .object(let v)? = type {return v}
      return String()
    }
    set {type = .object(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case habitat(String)
    case path(String)
    case object(String)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Map_EventMapObject.OneOf_Type, rhs: POGOProtos_Map_EventMapObject.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.habitat(let l), .habitat(let r)): return l == r
      case (.path(let l), .path(let r)): return l == r
      case (.object(let l), .object(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct LatLng {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var latDegree: Double = 0

    public var lngDegree: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Map"

extension POGOProtos_Map_EventMapObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventMapObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "points"),
    3: .same(proto: "habitat"),
    4: .same(proto: "path"),
    5: .same(proto: "object"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.points)
      case 3:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .habitat(v)}
      case 4:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .path(v)}
      case 5:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .object(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.points.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.points, fieldNumber: 2)
    }
    switch self.type {
    case .habitat(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case .path(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    case .object(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_EventMapObject, rhs: POGOProtos_Map_EventMapObject) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.points != rhs.points {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Map_EventMapObject.LatLng: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Map_EventMapObject.protoMessageName + ".LatLng"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lat_degree"),
    2: .standard(proto: "lng_degree"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latDegree)
      case 2: try decoder.decodeSingularDoubleField(value: &self.lngDegree)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latDegree != 0 {
      try visitor.visitSingularDoubleField(value: self.latDegree, fieldNumber: 1)
    }
    if self.lngDegree != 0 {
      try visitor.visitSingularDoubleField(value: self.lngDegree, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Map_EventMapObject.LatLng, rhs: POGOProtos_Map_EventMapObject.LatLng) -> Bool {
    if lhs.latDegree != rhs.latDegree {return false}
    if lhs.lngDegree != rhs.lngDegree {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
