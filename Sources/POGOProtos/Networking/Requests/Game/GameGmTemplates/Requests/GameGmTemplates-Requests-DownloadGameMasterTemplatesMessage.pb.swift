// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Requests/Game/GameGmTemplates/Requests/DownloadGameMasterTemplatesMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Requests_Game_GameGmTemplates_Requests_DownloadGameMasterTemplatesMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var basisBatchID: Int64 = 0

  public var batchID: Int64 = 0

  public var pageOffset: Int32 = 0

  public var applyExperiments: Bool = false

  public var basisExperimentID: [Int32] = []

  public var experimentID: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Requests.Game.GameGmTemplates.Requests"

extension POGOProtos_Networking_Requests_Game_GameGmTemplates_Requests_DownloadGameMasterTemplatesMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DownloadGameMasterTemplatesMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basis_batch_id"),
    2: .standard(proto: "batch_id"),
    3: .standard(proto: "page_offset"),
    4: .standard(proto: "apply_experiments"),
    5: .standard(proto: "basis_experiment_id"),
    6: .standard(proto: "experiment_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.basisBatchID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.batchID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pageOffset) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.applyExperiments) }()
      case 5: try { try decoder.decodeRepeatedInt32Field(value: &self.basisExperimentID) }()
      case 6: try { try decoder.decodeRepeatedInt32Field(value: &self.experimentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.basisBatchID != 0 {
      try visitor.visitSingularInt64Field(value: self.basisBatchID, fieldNumber: 1)
    }
    if self.batchID != 0 {
      try visitor.visitSingularInt64Field(value: self.batchID, fieldNumber: 2)
    }
    if self.pageOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.pageOffset, fieldNumber: 3)
    }
    if self.applyExperiments != false {
      try visitor.visitSingularBoolField(value: self.applyExperiments, fieldNumber: 4)
    }
    if !self.basisExperimentID.isEmpty {
      try visitor.visitPackedInt32Field(value: self.basisExperimentID, fieldNumber: 5)
    }
    if !self.experimentID.isEmpty {
      try visitor.visitPackedInt32Field(value: self.experimentID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Requests_Game_GameGmTemplates_Requests_DownloadGameMasterTemplatesMessage, rhs: POGOProtos_Networking_Requests_Game_GameGmTemplates_Requests_DownloadGameMasterTemplatesMessage) -> Bool {
    if lhs.basisBatchID != rhs.basisBatchID {return false}
    if lhs.batchID != rhs.batchID {return false}
    if lhs.pageOffset != rhs.pageOffset {return false}
    if lhs.applyExperiments != rhs.applyExperiments {return false}
    if lhs.basisExperimentID != rhs.basisExperimentID {return false}
    if lhs.experimentID != rhs.experimentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
