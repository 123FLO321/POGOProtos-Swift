// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Requests/Messages/InvasionOpenCombatSessionMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Requests_Messages_InvasionOpenCombatSessionMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var incidentLookup: POGOProtos_Map_Fort_IncidentLookup {
    get {return _incidentLookup ?? POGOProtos_Map_Fort_IncidentLookup()}
    set {_incidentLookup = newValue}
  }
  /// Returns true if `incidentLookup` has been explicitly set.
  public var hasIncidentLookup: Bool {return self._incidentLookup != nil}
  /// Clears the value of `incidentLookup`. Subsequent reads from it will return its default value.
  public mutating func clearIncidentLookup() {self._incidentLookup = nil}

  public var step: Int32 = 0

  public var attackingPokemonID: [UInt64] = []

  public var lobbyJoinTimeMs: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _incidentLookup: POGOProtos_Map_Fort_IncidentLookup? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Requests.Messages"

extension POGOProtos_Networking_Requests_Messages_InvasionOpenCombatSessionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvasionOpenCombatSessionMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incident_lookup"),
    2: .same(proto: "step"),
    3: .standard(proto: "attacking_pokemon_id"),
    4: .standard(proto: "lobby_join_time_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._incidentLookup) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.step) }()
      case 3: try { try decoder.decodeRepeatedFixed64Field(value: &self.attackingPokemonID) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lobbyJoinTimeMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._incidentLookup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.step != 0 {
      try visitor.visitSingularInt32Field(value: self.step, fieldNumber: 2)
    }
    if !self.attackingPokemonID.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.attackingPokemonID, fieldNumber: 3)
    }
    if self.lobbyJoinTimeMs != 0 {
      try visitor.visitSingularInt64Field(value: self.lobbyJoinTimeMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Requests_Messages_InvasionOpenCombatSessionMessage, rhs: POGOProtos_Networking_Requests_Messages_InvasionOpenCombatSessionMessage) -> Bool {
    if lhs._incidentLookup != rhs._incidentLookup {return false}
    if lhs.step != rhs.step {return false}
    if lhs.attackingPokemonID != rhs.attackingPokemonID {return false}
    if lhs.lobbyJoinTimeMs != rhs.lobbyJoinTimeMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
