// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Requests/Messages/ReportAdFeedbackMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameID: String = String()

  public var userID: String = String()

  public var guid: String = String()

  public var encryptedAdToken: Data = Data()

  public var freeTextResponse: String = String()

  public var feedback: POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage.OneOf_Feedback? = nil

  public var complaintReason: POGOProtos_Enums_AdFeedbackComplaintReason {
    get {
      if case .complaintReason(let v)? = feedback {return v}
      return .invalid
    }
    set {feedback = .complaintReason(newValue)}
  }

  public var notInterestedReason: POGOProtos_Enums_AdFeedbackNotInterestedReason {
    get {
      if case .notInterestedReason(let v)? = feedback {return v}
      return .invalid
    }
    set {feedback = .notInterestedReason(newValue)}
  }

  public var likeReason: POGOProtos_Enums_AdFeedbackLikeReason {
    get {
      if case .likeReason(let v)? = feedback {return v}
      return .invalid
    }
    set {feedback = .likeReason(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Feedback: Equatable {
    case complaintReason(POGOProtos_Enums_AdFeedbackComplaintReason)
    case notInterestedReason(POGOProtos_Enums_AdFeedbackNotInterestedReason)
    case likeReason(POGOProtos_Enums_AdFeedbackLikeReason)

  #if !swift(>=4.1)
    public static func ==(lhs: POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage.OneOf_Feedback, rhs: POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage.OneOf_Feedback) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.complaintReason, .complaintReason): return {
        guard case .complaintReason(let l) = lhs, case .complaintReason(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.notInterestedReason, .notInterestedReason): return {
        guard case .notInterestedReason(let l) = lhs, case .notInterestedReason(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.likeReason, .likeReason): return {
        guard case .likeReason(let l) = lhs, case .likeReason(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Requests.Messages"

extension POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportAdFeedbackMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .standard(proto: "user_id"),
    3: .same(proto: "guid"),
    4: .standard(proto: "encrypted_ad_token"),
    8: .standard(proto: "free_text_response"),
    5: .standard(proto: "complaint_reason"),
    6: .standard(proto: "not_interested_reason"),
    7: .standard(proto: "like_reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.gameID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.guid) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.encryptedAdToken) }()
      case 5: try {
        if self.feedback != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_AdFeedbackComplaintReason?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.feedback = .complaintReason(v)}
      }()
      case 6: try {
        if self.feedback != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_AdFeedbackNotInterestedReason?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.feedback = .notInterestedReason(v)}
      }()
      case 7: try {
        if self.feedback != nil {try decoder.handleConflictingOneOf()}
        var v: POGOProtos_Enums_AdFeedbackLikeReason?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.feedback = .likeReason(v)}
      }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.freeTextResponse) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameID.isEmpty {
      try visitor.visitSingularStringField(value: self.gameID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if !self.guid.isEmpty {
      try visitor.visitSingularStringField(value: self.guid, fieldNumber: 3)
    }
    if !self.encryptedAdToken.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptedAdToken, fieldNumber: 4)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.feedback {
    case .complaintReason?: try {
      guard case .complaintReason(let v)? = self.feedback else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }()
    case .notInterestedReason?: try {
      guard case .notInterestedReason(let v)? = self.feedback else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }()
    case .likeReason?: try {
      guard case .likeReason(let v)? = self.feedback else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    if !self.freeTextResponse.isEmpty {
      try visitor.visitSingularStringField(value: self.freeTextResponse, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage, rhs: POGOProtos_Networking_Requests_Messages_ReportAdFeedbackMessage) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.guid != rhs.guid {return false}
    if lhs.encryptedAdToken != rhs.encryptedAdToken {return false}
    if lhs.freeTextResponse != rhs.freeTextResponse {return false}
    if lhs.feedback != rhs.feedback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
