// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Platform/Ditto/LocationUpdateEventParams.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Networking_Platform_Ditto_LocationUpdateEventParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitudeDeg: Double = 0

  var longitudeDeg: Double = 0

  var altitudeM: Double = 0

  var accuracyM: Double = 0

  var timestampS: Double = 0

  var providerStatus: UInt32 = 0

  var locationType: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Platform.Ditto"

extension POGOProtos_Networking_Platform_Ditto_LocationUpdateEventParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationUpdateEventParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latitude_deg"),
    2: .standard(proto: "longitude_deg"),
    3: .standard(proto: "altitude_m"),
    4: .standard(proto: "accuracy_m"),
    5: .standard(proto: "timestamp_s"),
    6: .standard(proto: "provider_status"),
    7: .standard(proto: "location_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitudeDeg)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitudeDeg)
      case 3: try decoder.decodeSingularDoubleField(value: &self.altitudeM)
      case 4: try decoder.decodeSingularDoubleField(value: &self.accuracyM)
      case 5: try decoder.decodeSingularDoubleField(value: &self.timestampS)
      case 6: try decoder.decodeSingularUInt32Field(value: &self.providerStatus)
      case 7: try decoder.decodeSingularUInt32Field(value: &self.locationType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeDeg, fieldNumber: 1)
    }
    if self.longitudeDeg != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeDeg, fieldNumber: 2)
    }
    if self.altitudeM != 0 {
      try visitor.visitSingularDoubleField(value: self.altitudeM, fieldNumber: 3)
    }
    if self.accuracyM != 0 {
      try visitor.visitSingularDoubleField(value: self.accuracyM, fieldNumber: 4)
    }
    if self.timestampS != 0 {
      try visitor.visitSingularDoubleField(value: self.timestampS, fieldNumber: 5)
    }
    if self.providerStatus != 0 {
      try visitor.visitSingularUInt32Field(value: self.providerStatus, fieldNumber: 6)
    }
    if self.locationType != 0 {
      try visitor.visitSingularUInt32Field(value: self.locationType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Networking_Platform_Ditto_LocationUpdateEventParams, rhs: POGOProtos_Networking_Platform_Ditto_LocationUpdateEventParams) -> Bool {
    if lhs.latitudeDeg != rhs.latitudeDeg {return false}
    if lhs.longitudeDeg != rhs.longitudeDeg {return false}
    if lhs.altitudeM != rhs.altitudeM {return false}
    if lhs.accuracyM != rhs.accuracyM {return false}
    if lhs.timestampS != rhs.timestampS {return false}
    if lhs.providerStatus != rhs.providerStatus {return false}
    if lhs.locationType != rhs.locationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
