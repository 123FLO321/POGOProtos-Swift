// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Platform/Telemetry/Distribution.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  public struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  public typealias Version = _2
}

public struct POGOProtos_Networking_Platform_Telemetry_Distribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Int64 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  public var mean: Float {
    get {return _storage._mean}
    set {_uniqueStorage()._mean = newValue}
  }

  public var sumOfSquaredDeviation: Double {
    get {return _storage._sumOfSquaredDeviation}
    set {_uniqueStorage()._sumOfSquaredDeviation = newValue}
  }

  public var range: POGOProtos_Networking_Platform_Telemetry_Distribution.Range {
    get {return _storage._range ?? POGOProtos_Networking_Platform_Telemetry_Distribution.Range()}
    set {_uniqueStorage()._range = newValue}
  }
  /// Returns true if `range` has been explicitly set.
  public var hasRange: Bool {return _storage._range != nil}
  /// Clears the value of `range`. Subsequent reads from it will return its default value.
  public mutating func clearRange() {_uniqueStorage()._range = nil}

  public var bucketOptions: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions {
    get {return _storage._bucketOptions ?? POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions()}
    set {_uniqueStorage()._bucketOptions = newValue}
  }
  /// Returns true if `bucketOptions` has been explicitly set.
  public var hasBucketOptions: Bool {return _storage._bucketOptions != nil}
  /// Clears the value of `bucketOptions`. Subsequent reads from it will return its default value.
  public mutating func clearBucketOptions() {_uniqueStorage()._bucketOptions = nil}

  public var bucketCounts: [Int64] {
    get {return _storage._bucketCounts}
    set {_uniqueStorage()._bucketCounts = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum BucketType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case linearBuckets // = 1
    case exponentialBuckets // = 2
    case explicitBuckets // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .linearBuckets
      case 2: self = .exponentialBuckets
      case 3: self = .explicitBuckets
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .linearBuckets: return 1
      case .exponentialBuckets: return 2
      case .explicitBuckets: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct BucketOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var linearBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets {
      get {return _storage._linearBuckets ?? POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets()}
      set {_uniqueStorage()._linearBuckets = newValue}
    }
    /// Returns true if `linearBuckets` has been explicitly set.
    public var hasLinearBuckets: Bool {return _storage._linearBuckets != nil}
    /// Clears the value of `linearBuckets`. Subsequent reads from it will return its default value.
    public mutating func clearLinearBuckets() {_uniqueStorage()._linearBuckets = nil}

    public var exponentialBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets {
      get {return _storage._exponentialBuckets ?? POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets()}
      set {_uniqueStorage()._exponentialBuckets = newValue}
    }
    /// Returns true if `exponentialBuckets` has been explicitly set.
    public var hasExponentialBuckets: Bool {return _storage._exponentialBuckets != nil}
    /// Clears the value of `exponentialBuckets`. Subsequent reads from it will return its default value.
    public mutating func clearExponentialBuckets() {_uniqueStorage()._exponentialBuckets = nil}

    public var explicitBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets {
      get {return _storage._explicitBuckets ?? POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets()}
      set {_uniqueStorage()._explicitBuckets = newValue}
    }
    /// Returns true if `explicitBuckets` has been explicitly set.
    public var hasExplicitBuckets: Bool {return _storage._explicitBuckets != nil}
    /// Clears the value of `explicitBuckets`. Subsequent reads from it will return its default value.
    public mutating func clearExplicitBuckets() {_uniqueStorage()._explicitBuckets = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct ExplicitBuckets {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var bounds: [Int64] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct ExponentialBuckets {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var numFiniteBuckets: Int64 = 0

      public var growthFactor: Float = 0

      public var scale: Float = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct LinearBuckets {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var numFiniteBuckets: Int64 = 0

      public var width: Int64 = 0

      public var offset: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct ExplicitBuckets {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bounds: [Int64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ExponentialBuckets {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var numFiniteBuckets: Int64 = 0

    public var growthFactor: Float = 0

    public var scale: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct LinearBuckets {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var numFiniteBuckets: Int64 = 0

    public var width: Int64 = 0

    public var offset: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Range {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var min: Int64 = 0

    public var max: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [POGOProtos_Networking_Platform_Telemetry_Distribution.BucketType] = [
    .none,
    .linearBuckets,
    .exponentialBuckets,
    .explicitBuckets,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Platform.Telemetry"

extension POGOProtos_Networking_Platform_Telemetry_Distribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Distribution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "mean"),
    3: .standard(proto: "sum_of_squared_deviation"),
    4: .same(proto: "range"),
    5: .standard(proto: "bucket_options"),
    6: .standard(proto: "bucket_counts"),
  ]

  fileprivate class _StorageClass {
    public var _count: Int64 = 0
    public var _mean: Float = 0
    public var _sumOfSquaredDeviation: Double = 0
    public var _range: POGOProtos_Networking_Platform_Telemetry_Distribution.Range? = nil
    public var _bucketOptions: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions? = nil
    public var _bucketCounts: [Int64] = []

    public static let defaultInstance = _StorageClass()

    private init() {}

    public init(copying source: _StorageClass) {
      _count = source._count
      _mean = source._mean
      _sumOfSquaredDeviation = source._sumOfSquaredDeviation
      _range = source._range
      _bucketOptions = source._bucketOptions
      _bucketCounts = source._bucketCounts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._count)
        case 2: try decoder.decodeSingularFloatField(value: &_storage._mean)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._sumOfSquaredDeviation)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._range)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._bucketOptions)
        case 6: try decoder.decodeRepeatedInt64Field(value: &_storage._bucketCounts)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._count != 0 {
        try visitor.visitSingularInt64Field(value: _storage._count, fieldNumber: 1)
      }
      if _storage._mean != 0 {
        try visitor.visitSingularFloatField(value: _storage._mean, fieldNumber: 2)
      }
      if _storage._sumOfSquaredDeviation != 0 {
        try visitor.visitSingularDoubleField(value: _storage._sumOfSquaredDeviation, fieldNumber: 3)
      }
      if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._bucketOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._bucketCounts.isEmpty {
        try visitor.visitPackedInt64Field(value: _storage._bucketCounts, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        if _storage._mean != rhs_storage._mean {return false}
        if _storage._sumOfSquaredDeviation != rhs_storage._sumOfSquaredDeviation {return false}
        if _storage._range != rhs_storage._range {return false}
        if _storage._bucketOptions != rhs_storage._bucketOptions {return false}
        if _storage._bucketCounts != rhs_storage._bucketCounts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "none"),
    1: .same(proto: "linear_buckets"),
    2: .same(proto: "exponential_buckets"),
    3: .same(proto: "explicit_buckets"),
  ]
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.protoMessageName + ".BucketOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "linear_buckets"),
    2: .standard(proto: "exponential_buckets"),
    3: .standard(proto: "explicit_buckets"),
  ]

  fileprivate class _StorageClass {
    public var _linearBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets? = nil
    public var _exponentialBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets? = nil
    public var _explicitBuckets: POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets? = nil

    public static let defaultInstance = _StorageClass()

    private init() {}

    public init(copying source: _StorageClass) {
      _linearBuckets = source._linearBuckets
      _exponentialBuckets = source._exponentialBuckets
      _explicitBuckets = source._explicitBuckets
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._linearBuckets)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._exponentialBuckets)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._explicitBuckets)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._linearBuckets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._exponentialBuckets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._explicitBuckets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._linearBuckets != rhs_storage._linearBuckets {return false}
        if _storage._exponentialBuckets != rhs_storage._exponentialBuckets {return false}
        if _storage._explicitBuckets != rhs_storage._explicitBuckets {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExplicitBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.protoMessageName + ".ExplicitBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.bounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bounds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.bounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExplicitBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExplicitBuckets) -> Bool {
    if lhs.bounds != rhs.bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExponentialBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.protoMessageName + ".ExponentialBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .standard(proto: "growth_factor"),
    3: .same(proto: "scale"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets)
      case 2: try decoder.decodeSingularFloatField(value: &self.growthFactor)
      case 3: try decoder.decodeSingularFloatField(value: &self.scale)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.growthFactor != 0 {
      try visitor.visitSingularFloatField(value: self.growthFactor, fieldNumber: 2)
    }
    if self.scale != 0 {
      try visitor.visitSingularFloatField(value: self.scale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExponentialBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.ExponentialBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.growthFactor != rhs.growthFactor {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.LinearBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.protoMessageName + ".LinearBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .same(proto: "width"),
    3: .same(proto: "offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets)
      case 2: try decoder.decodeSingularInt64Field(value: &self.width)
      case 3: try decoder.decodeSingularInt64Field(value: &self.offset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 2)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.LinearBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.BucketOptions.LinearBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.width != rhs.width {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.protoMessageName + ".ExplicitBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.bounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bounds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.bounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.ExplicitBuckets) -> Bool {
    if lhs.bounds != rhs.bounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.protoMessageName + ".ExponentialBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .standard(proto: "growth_factor"),
    3: .same(proto: "scale"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets)
      case 2: try decoder.decodeSingularFloatField(value: &self.growthFactor)
      case 3: try decoder.decodeSingularFloatField(value: &self.scale)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.growthFactor != 0 {
      try visitor.visitSingularFloatField(value: self.growthFactor, fieldNumber: 2)
    }
    if self.scale != 0 {
      try visitor.visitSingularFloatField(value: self.scale, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.ExponentialBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.growthFactor != rhs.growthFactor {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.protoMessageName + ".LinearBuckets"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "num_finite_buckets"),
    2: .same(proto: "width"),
    3: .same(proto: "offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.numFiniteBuckets)
      case 2: try decoder.decodeSingularInt64Field(value: &self.width)
      case 3: try decoder.decodeSingularInt64Field(value: &self.offset)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numFiniteBuckets != 0 {
      try visitor.visitSingularInt64Field(value: self.numFiniteBuckets, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt64Field(value: self.width, fieldNumber: 2)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.LinearBuckets) -> Bool {
    if lhs.numFiniteBuckets != rhs.numFiniteBuckets {return false}
    if lhs.width != rhs.width {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Platform_Telemetry_Distribution.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Platform_Telemetry_Distribution.protoMessageName + ".Range"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "min"),
    2: .same(proto: "max"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.min)
      case 2: try decoder.decodeSingularInt64Field(value: &self.max)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.min != 0 {
      try visitor.visitSingularInt64Field(value: self.min, fieldNumber: 1)
    }
    if self.max != 0 {
      try visitor.visitSingularInt64Field(value: self.max, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Platform_Telemetry_Distribution.Range, rhs: POGOProtos_Networking_Platform_Telemetry_Distribution.Range) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
