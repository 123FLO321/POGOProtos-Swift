// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Envelopes/Signature.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Envelopes_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var field1: [POGOProtos_Networking_Envelopes_UnknownMessage] {
    get {return _storage._field1}
    set {_uniqueStorage()._field1 = newValue}
  }

  /// in ms
  public var timestampSinceStart: UInt64 {
    get {return _storage._timestampSinceStart}
    set {_uniqueStorage()._timestampSinceStart = newValue}
  }

  public var field3: String {
    get {return _storage._field3}
    set {_uniqueStorage()._field3 = newValue}
  }

  public var locationFix: [POGOProtos_Networking_Envelopes_Signature.LocationFix] {
    get {return _storage._locationFix}
    set {_uniqueStorage()._locationFix = newValue}
  }

  public var gpsInfo: [POGOProtos_Networking_Envelopes_Signature.AndroidGpsInfo] {
    get {return _storage._gpsInfo}
    set {_uniqueStorage()._gpsInfo = newValue}
  }

  public var field6: [POGOProtos_Networking_Envelopes_UnknownMessage] {
    get {return _storage._field6}
    set {_uniqueStorage()._field6 = newValue}
  }

  public var sensorInfo: [POGOProtos_Networking_Envelopes_Signature.SensorInfo] {
    get {return _storage._sensorInfo}
    set {_uniqueStorage()._sensorInfo = newValue}
  }

  public var deviceInfo: POGOProtos_Networking_Envelopes_Signature.DeviceInfo {
    get {return _storage._deviceInfo ?? POGOProtos_Networking_Envelopes_Signature.DeviceInfo()}
    set {_uniqueStorage()._deviceInfo = newValue}
  }
  /// Returns true if `deviceInfo` has been explicitly set.
  public var hasDeviceInfo: Bool {return _storage._deviceInfo != nil}
  /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceInfo() {_uniqueStorage()._deviceInfo = nil}

  public var activityStatus: POGOProtos_Networking_Envelopes_Signature.ActivityStatus {
    get {return _storage._activityStatus ?? POGOProtos_Networking_Envelopes_Signature.ActivityStatus()}
    set {_uniqueStorage()._activityStatus = newValue}
  }
  /// Returns true if `activityStatus` has been explicitly set.
  public var hasActivityStatus: Bool {return _storage._activityStatus != nil}
  /// Clears the value of `activityStatus`. Subsequent reads from it will return its default value.
  public mutating func clearActivityStatus() {_uniqueStorage()._activityStatus = nil}

  public var locationHash1: Int32 {
    get {return _storage._locationHash1}
    set {_uniqueStorage()._locationHash1 = newValue}
  }

  public var field11: Bool {
    get {return _storage._field11}
    set {_uniqueStorage()._field11 = newValue}
  }

  public var field12: Bool {
    get {return _storage._field12}
    set {_uniqueStorage()._field12 = newValue}
  }

  public var field13: Int32 {
    get {return _storage._field13}
    set {_uniqueStorage()._field13 = newValue}
  }

  public var field14: Int32 {
    get {return _storage._field14}
    set {_uniqueStorage()._field14 = newValue}
  }

  public var field15: String {
    get {return _storage._field15}
    set {_uniqueStorage()._field15 = newValue}
  }

  public var field16: Int32 {
    get {return _storage._field16}
    set {_uniqueStorage()._field16 = newValue}
  }

  public var field17: String {
    get {return _storage._field17}
    set {_uniqueStorage()._field17 = newValue}
  }

  public var field18: String {
    get {return _storage._field18}
    set {_uniqueStorage()._field18 = newValue}
  }

  public var field19: Bool {
    get {return _storage._field19}
    set {_uniqueStorage()._field19 = newValue}
  }

  public var locationHash2: Int32 {
    get {return _storage._locationHash2}
    set {_uniqueStorage()._locationHash2 = newValue}
  }

  public var field21: Bool {
    get {return _storage._field21}
    set {_uniqueStorage()._field21 = newValue}
  }

  /// 32 random bytes, unique per session.
  public var sessionHash: Data {
    get {return _storage._sessionHash}
    set {_uniqueStorage()._sessionHash = newValue}
  }

  /// epoch timestamp in ms
  public var timestamp: UInt64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// hashes of each request message in a hashArray signed based on the auth_token or auth_info - xxhash64
  public var requestHash: [UInt64] {
    get {return _storage._requestHash}
    set {_uniqueStorage()._requestHash = newValue}
  }

  public var unknown25: Int64 {
    get {return _storage._unknown25}
    set {_uniqueStorage()._unknown25 = newValue}
  }

  public var unknown27: Int32 {
    get {return _storage._unknown27}
    set {_uniqueStorage()._unknown27 = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct LocationFix {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// "network", "gps", "fused", possibly others
    public var provider: String = String()

    /// in ms since start
    public var timestampSnapshot: UInt64 = 0

    /// Confirmed on android/ios
    public var altitude: Float = 0

    public var latitude: Float = 0

    public var longitude: Float = 0

    /// iOS only (-1 for no reading available, speed in m/s)
    public var speed: Float = 0

    /// iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by @marcel
    public var course: Float = 0

    /// in meters, both on Android and iOS
    public var horizontalAccuracy: Float = 0

    /// iOS only
    public var verticalAccuracy: Float = 0

    /// Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
    public var providerStatus: UInt64 = 0

    /// On iOS there are some LocationFixes with unk26=1 and everything else empty
    public var floor: UInt32 = 0

    /// Always 1 (if there is data at all)
    public var locationType: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// don't really care about this since we're not using it
  public struct AndroidGpsInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var timeToFix: UInt64 = 0

    public var satellitesPrn: [Int32] = []

    public var azimuth: [Float] = []

    public var elevation: [Float] = []

    public var snr: [Float] = []

    public var hasAlmanac_p: [Bool] = []

    public var hasEphemeris_p: [Bool] = []

    public var usedInFix: [Bool] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SensorInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// in ms since start
    public var timestampSnapshot: UInt64 {
      get {return _storage._timestampSnapshot}
      set {_uniqueStorage()._timestampSnapshot = newValue}
    }

    public var linearAccelerationX: Double {
      get {return _storage._linearAccelerationX}
      set {_uniqueStorage()._linearAccelerationX = newValue}
    }

    public var linearAccelerationY: Double {
      get {return _storage._linearAccelerationY}
      set {_uniqueStorage()._linearAccelerationY = newValue}
    }

    public var linearAccelerationZ: Double {
      get {return _storage._linearAccelerationZ}
      set {_uniqueStorage()._linearAccelerationZ = newValue}
    }

    public var magneticFieldX: Double {
      get {return _storage._magneticFieldX}
      set {_uniqueStorage()._magneticFieldX = newValue}
    }

    public var magneticFieldY: Double {
      get {return _storage._magneticFieldY}
      set {_uniqueStorage()._magneticFieldY = newValue}
    }

    public var magneticFieldZ: Double {
      get {return _storage._magneticFieldZ}
      set {_uniqueStorage()._magneticFieldZ = newValue}
    }

    public var magneticFieldAccuracy: Int32 {
      get {return _storage._magneticFieldAccuracy}
      set {_uniqueStorage()._magneticFieldAccuracy = newValue}
    }

    public var attitudePitch: Double {
      get {return _storage._attitudePitch}
      set {_uniqueStorage()._attitudePitch = newValue}
    }

    public var attitudeYaw: Double {
      get {return _storage._attitudeYaw}
      set {_uniqueStorage()._attitudeYaw = newValue}
    }

    public var attitudeRoll: Double {
      get {return _storage._attitudeRoll}
      set {_uniqueStorage()._attitudeRoll = newValue}
    }

    public var rotationRateX: Double {
      get {return _storage._rotationRateX}
      set {_uniqueStorage()._rotationRateX = newValue}
    }

    public var rotationRateY: Double {
      get {return _storage._rotationRateY}
      set {_uniqueStorage()._rotationRateY = newValue}
    }

    public var rotationRateZ: Double {
      get {return _storage._rotationRateZ}
      set {_uniqueStorage()._rotationRateZ = newValue}
    }

    public var gravityX: Double {
      get {return _storage._gravityX}
      set {_uniqueStorage()._gravityX = newValue}
    }

    public var gravityY: Double {
      get {return _storage._gravityY}
      set {_uniqueStorage()._gravityY = newValue}
    }

    public var gravityZ: Double {
      get {return _storage._gravityZ}
      set {_uniqueStorage()._gravityZ = newValue}
    }

    public var status: Int32 {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct DeviceInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Hex string
    public var deviceID: String = String()

    public var androidBoardName: String = String()

    public var androidBootloader: String = String()

    /// On Android: product.brand
    public var deviceBrand: String = String()

    /// On Android: product.device
    public var deviceModel: String = String()

    /// Android only, build.display.id
    public var deviceModelIdentifier: String = String()

    /// On Android: boot.hardware
    public var deviceModelBoot: String = String()

    /// On Android: product.manufacturer
    public var hardwareManufacturer: String = String()

    /// On Android: product.model
    public var hardwareModel: String = String()

    /// On Android: product.name, on iOS: "iPhone OS"
    public var firmwareBrand: String = String()

    /// Android only, build.tags
    public var firmwareTags: String = String()

    /// On Android: build.type, on iOS instead: iOS version
    public var firmwareType: String = String()

    /// Android only, build.fingerprint
    public var firmwareFingerprint: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Only used in iOS - Android just sends an empty version
  public struct ActivityStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// all of these had 1 as their value
    public var startTimeMs: UInt64 = 0

    public var unknownStatus: Bool = false

    public var walking: Bool = false

    public var running: Bool = false

    public var stationary: Bool = false

    public var automotive: Bool = false

    public var tilting: Bool = false

    public var cycling: Bool = false

    public var status: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Just a junk message to denote that we don't currently know what message something is.
public struct POGOProtos_Networking_Envelopes_UnknownMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Envelopes"

extension POGOProtos_Networking_Envelopes_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Signature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field1"),
    2: .standard(proto: "timestamp_since_start"),
    3: .same(proto: "field3"),
    4: .standard(proto: "location_fix"),
    5: .standard(proto: "gps_info"),
    6: .same(proto: "field6"),
    7: .standard(proto: "sensor_info"),
    8: .standard(proto: "device_info"),
    9: .standard(proto: "activity_status"),
    10: .standard(proto: "location_hash1"),
    11: .same(proto: "field11"),
    12: .same(proto: "field12"),
    13: .same(proto: "field13"),
    14: .same(proto: "field14"),
    15: .same(proto: "field15"),
    16: .same(proto: "field16"),
    17: .same(proto: "field17"),
    18: .same(proto: "field18"),
    19: .same(proto: "field19"),
    20: .standard(proto: "location_hash2"),
    21: .same(proto: "field21"),
    22: .standard(proto: "session_hash"),
    23: .same(proto: "timestamp"),
    24: .standard(proto: "request_hash"),
    25: .same(proto: "unknown25"),
    27: .same(proto: "unknown27"),
  ]

  fileprivate class _StorageClass {
    var _field1: [POGOProtos_Networking_Envelopes_UnknownMessage] = []
    var _timestampSinceStart: UInt64 = 0
    var _field3: String = String()
    var _locationFix: [POGOProtos_Networking_Envelopes_Signature.LocationFix] = []
    var _gpsInfo: [POGOProtos_Networking_Envelopes_Signature.AndroidGpsInfo] = []
    var _field6: [POGOProtos_Networking_Envelopes_UnknownMessage] = []
    var _sensorInfo: [POGOProtos_Networking_Envelopes_Signature.SensorInfo] = []
    var _deviceInfo: POGOProtos_Networking_Envelopes_Signature.DeviceInfo? = nil
    var _activityStatus: POGOProtos_Networking_Envelopes_Signature.ActivityStatus? = nil
    var _locationHash1: Int32 = 0
    var _field11: Bool = false
    var _field12: Bool = false
    var _field13: Int32 = 0
    var _field14: Int32 = 0
    var _field15: String = String()
    var _field16: Int32 = 0
    var _field17: String = String()
    var _field18: String = String()
    var _field19: Bool = false
    var _locationHash2: Int32 = 0
    var _field21: Bool = false
    var _sessionHash: Data = SwiftProtobuf.Internal.emptyData
    var _timestamp: UInt64 = 0
    var _requestHash: [UInt64] = []
    var _unknown25: Int64 = 0
    var _unknown27: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _field1 = source._field1
      _timestampSinceStart = source._timestampSinceStart
      _field3 = source._field3
      _locationFix = source._locationFix
      _gpsInfo = source._gpsInfo
      _field6 = source._field6
      _sensorInfo = source._sensorInfo
      _deviceInfo = source._deviceInfo
      _activityStatus = source._activityStatus
      _locationHash1 = source._locationHash1
      _field11 = source._field11
      _field12 = source._field12
      _field13 = source._field13
      _field14 = source._field14
      _field15 = source._field15
      _field16 = source._field16
      _field17 = source._field17
      _field18 = source._field18
      _field19 = source._field19
      _locationHash2 = source._locationHash2
      _field21 = source._field21
      _sessionHash = source._sessionHash
      _timestamp = source._timestamp
      _requestHash = source._requestHash
      _unknown25 = source._unknown25
      _unknown27 = source._unknown27
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._field1)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._timestampSinceStart)
        case 3: try decoder.decodeSingularStringField(value: &_storage._field3)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._locationFix)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._gpsInfo)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._field6)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._sensorInfo)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._deviceInfo)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._activityStatus)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._locationHash1)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._field11)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._field12)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._field13)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._field14)
        case 15: try decoder.decodeSingularStringField(value: &_storage._field15)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._field16)
        case 17: try decoder.decodeSingularStringField(value: &_storage._field17)
        case 18: try decoder.decodeSingularStringField(value: &_storage._field18)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._field19)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._locationHash2)
        case 21: try decoder.decodeSingularBoolField(value: &_storage._field21)
        case 22: try decoder.decodeSingularBytesField(value: &_storage._sessionHash)
        case 23: try decoder.decodeSingularUInt64Field(value: &_storage._timestamp)
        case 24: try decoder.decodeRepeatedUInt64Field(value: &_storage._requestHash)
        case 25: try decoder.decodeSingularInt64Field(value: &_storage._unknown25)
        case 27: try decoder.decodeSingularInt32Field(value: &_storage._unknown27)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._field1.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._field1, fieldNumber: 1)
      }
      if _storage._timestampSinceStart != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timestampSinceStart, fieldNumber: 2)
      }
      if !_storage._field3.isEmpty {
        try visitor.visitSingularStringField(value: _storage._field3, fieldNumber: 3)
      }
      if !_storage._locationFix.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._locationFix, fieldNumber: 4)
      }
      if !_storage._gpsInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gpsInfo, fieldNumber: 5)
      }
      if !_storage._field6.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._field6, fieldNumber: 6)
      }
      if !_storage._sensorInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sensorInfo, fieldNumber: 7)
      }
      if let v = _storage._deviceInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._activityStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._locationHash1 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._locationHash1, fieldNumber: 10)
      }
      if _storage._field11 != false {
        try visitor.visitSingularBoolField(value: _storage._field11, fieldNumber: 11)
      }
      if _storage._field12 != false {
        try visitor.visitSingularBoolField(value: _storage._field12, fieldNumber: 12)
      }
      if _storage._field13 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._field13, fieldNumber: 13)
      }
      if _storage._field14 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._field14, fieldNumber: 14)
      }
      if !_storage._field15.isEmpty {
        try visitor.visitSingularStringField(value: _storage._field15, fieldNumber: 15)
      }
      if _storage._field16 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._field16, fieldNumber: 16)
      }
      if !_storage._field17.isEmpty {
        try visitor.visitSingularStringField(value: _storage._field17, fieldNumber: 17)
      }
      if !_storage._field18.isEmpty {
        try visitor.visitSingularStringField(value: _storage._field18, fieldNumber: 18)
      }
      if _storage._field19 != false {
        try visitor.visitSingularBoolField(value: _storage._field19, fieldNumber: 19)
      }
      if _storage._locationHash2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._locationHash2, fieldNumber: 20)
      }
      if _storage._field21 != false {
        try visitor.visitSingularBoolField(value: _storage._field21, fieldNumber: 21)
      }
      if !_storage._sessionHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._sessionHash, fieldNumber: 22)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timestamp, fieldNumber: 23)
      }
      if !_storage._requestHash.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._requestHash, fieldNumber: 24)
      }
      if _storage._unknown25 != 0 {
        try visitor.visitSingularInt64Field(value: _storage._unknown25, fieldNumber: 25)
      }
      if _storage._unknown27 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._unknown27, fieldNumber: 27)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature, rhs: POGOProtos_Networking_Envelopes_Signature) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._field1 != rhs_storage._field1 {return false}
        if _storage._timestampSinceStart != rhs_storage._timestampSinceStart {return false}
        if _storage._field3 != rhs_storage._field3 {return false}
        if _storage._locationFix != rhs_storage._locationFix {return false}
        if _storage._gpsInfo != rhs_storage._gpsInfo {return false}
        if _storage._field6 != rhs_storage._field6 {return false}
        if _storage._sensorInfo != rhs_storage._sensorInfo {return false}
        if _storage._deviceInfo != rhs_storage._deviceInfo {return false}
        if _storage._activityStatus != rhs_storage._activityStatus {return false}
        if _storage._locationHash1 != rhs_storage._locationHash1 {return false}
        if _storage._field11 != rhs_storage._field11 {return false}
        if _storage._field12 != rhs_storage._field12 {return false}
        if _storage._field13 != rhs_storage._field13 {return false}
        if _storage._field14 != rhs_storage._field14 {return false}
        if _storage._field15 != rhs_storage._field15 {return false}
        if _storage._field16 != rhs_storage._field16 {return false}
        if _storage._field17 != rhs_storage._field17 {return false}
        if _storage._field18 != rhs_storage._field18 {return false}
        if _storage._field19 != rhs_storage._field19 {return false}
        if _storage._locationHash2 != rhs_storage._locationHash2 {return false}
        if _storage._field21 != rhs_storage._field21 {return false}
        if _storage._sessionHash != rhs_storage._sessionHash {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._requestHash != rhs_storage._requestHash {return false}
        if _storage._unknown25 != rhs_storage._unknown25 {return false}
        if _storage._unknown27 != rhs_storage._unknown27 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_Signature.LocationFix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_Signature.protoMessageName + ".LocationFix"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .standard(proto: "timestamp_snapshot"),
    4: .same(proto: "altitude"),
    13: .same(proto: "latitude"),
    14: .same(proto: "longitude"),
    18: .same(proto: "speed"),
    20: .same(proto: "course"),
    21: .standard(proto: "horizontal_accuracy"),
    22: .standard(proto: "vertical_accuracy"),
    26: .standard(proto: "provider_status"),
    27: .same(proto: "floor"),
    28: .standard(proto: "location_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.provider)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.timestampSnapshot)
      case 4: try decoder.decodeSingularFloatField(value: &self.altitude)
      case 13: try decoder.decodeSingularFloatField(value: &self.latitude)
      case 14: try decoder.decodeSingularFloatField(value: &self.longitude)
      case 18: try decoder.decodeSingularFloatField(value: &self.speed)
      case 20: try decoder.decodeSingularFloatField(value: &self.course)
      case 21: try decoder.decodeSingularFloatField(value: &self.horizontalAccuracy)
      case 22: try decoder.decodeSingularFloatField(value: &self.verticalAccuracy)
      case 26: try decoder.decodeSingularUInt64Field(value: &self.providerStatus)
      case 27: try decoder.decodeSingularUInt32Field(value: &self.floor)
      case 28: try decoder.decodeSingularUInt64Field(value: &self.locationType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 1)
    }
    if self.timestampSnapshot != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestampSnapshot, fieldNumber: 2)
    }
    if self.altitude != 0 {
      try visitor.visitSingularFloatField(value: self.altitude, fieldNumber: 4)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 13)
    }
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 14)
    }
    if self.speed != 0 {
      try visitor.visitSingularFloatField(value: self.speed, fieldNumber: 18)
    }
    if self.course != 0 {
      try visitor.visitSingularFloatField(value: self.course, fieldNumber: 20)
    }
    if self.horizontalAccuracy != 0 {
      try visitor.visitSingularFloatField(value: self.horizontalAccuracy, fieldNumber: 21)
    }
    if self.verticalAccuracy != 0 {
      try visitor.visitSingularFloatField(value: self.verticalAccuracy, fieldNumber: 22)
    }
    if self.providerStatus != 0 {
      try visitor.visitSingularUInt64Field(value: self.providerStatus, fieldNumber: 26)
    }
    if self.floor != 0 {
      try visitor.visitSingularUInt32Field(value: self.floor, fieldNumber: 27)
    }
    if self.locationType != 0 {
      try visitor.visitSingularUInt64Field(value: self.locationType, fieldNumber: 28)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature.LocationFix, rhs: POGOProtos_Networking_Envelopes_Signature.LocationFix) -> Bool {
    if lhs.provider != rhs.provider {return false}
    if lhs.timestampSnapshot != rhs.timestampSnapshot {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.speed != rhs.speed {return false}
    if lhs.course != rhs.course {return false}
    if lhs.horizontalAccuracy != rhs.horizontalAccuracy {return false}
    if lhs.verticalAccuracy != rhs.verticalAccuracy {return false}
    if lhs.providerStatus != rhs.providerStatus {return false}
    if lhs.floor != rhs.floor {return false}
    if lhs.locationType != rhs.locationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_Signature.AndroidGpsInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_Signature.protoMessageName + ".AndroidGpsInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_to_fix"),
    2: .standard(proto: "satellites_prn"),
    3: .same(proto: "azimuth"),
    4: .same(proto: "elevation"),
    5: .same(proto: "snr"),
    6: .standard(proto: "has_almanac"),
    7: .standard(proto: "has_ephemeris"),
    8: .standard(proto: "used_in_fix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.timeToFix)
      case 2: try decoder.decodeRepeatedInt32Field(value: &self.satellitesPrn)
      case 3: try decoder.decodeRepeatedFloatField(value: &self.azimuth)
      case 4: try decoder.decodeRepeatedFloatField(value: &self.elevation)
      case 5: try decoder.decodeRepeatedFloatField(value: &self.snr)
      case 6: try decoder.decodeRepeatedBoolField(value: &self.hasAlmanac_p)
      case 7: try decoder.decodeRepeatedBoolField(value: &self.hasEphemeris_p)
      case 8: try decoder.decodeRepeatedBoolField(value: &self.usedInFix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timeToFix != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeToFix, fieldNumber: 1)
    }
    if !self.satellitesPrn.isEmpty {
      try visitor.visitPackedInt32Field(value: self.satellitesPrn, fieldNumber: 2)
    }
    if !self.azimuth.isEmpty {
      try visitor.visitPackedFloatField(value: self.azimuth, fieldNumber: 3)
    }
    if !self.elevation.isEmpty {
      try visitor.visitPackedFloatField(value: self.elevation, fieldNumber: 4)
    }
    if !self.snr.isEmpty {
      try visitor.visitPackedFloatField(value: self.snr, fieldNumber: 5)
    }
    if !self.hasAlmanac_p.isEmpty {
      try visitor.visitPackedBoolField(value: self.hasAlmanac_p, fieldNumber: 6)
    }
    if !self.hasEphemeris_p.isEmpty {
      try visitor.visitPackedBoolField(value: self.hasEphemeris_p, fieldNumber: 7)
    }
    if !self.usedInFix.isEmpty {
      try visitor.visitPackedBoolField(value: self.usedInFix, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature.AndroidGpsInfo, rhs: POGOProtos_Networking_Envelopes_Signature.AndroidGpsInfo) -> Bool {
    if lhs.timeToFix != rhs.timeToFix {return false}
    if lhs.satellitesPrn != rhs.satellitesPrn {return false}
    if lhs.azimuth != rhs.azimuth {return false}
    if lhs.elevation != rhs.elevation {return false}
    if lhs.snr != rhs.snr {return false}
    if lhs.hasAlmanac_p != rhs.hasAlmanac_p {return false}
    if lhs.hasEphemeris_p != rhs.hasEphemeris_p {return false}
    if lhs.usedInFix != rhs.usedInFix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_Signature.SensorInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_Signature.protoMessageName + ".SensorInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_snapshot"),
    3: .standard(proto: "linear_acceleration_x"),
    4: .standard(proto: "linear_acceleration_y"),
    5: .standard(proto: "linear_acceleration_z"),
    6: .standard(proto: "magnetic_field_x"),
    7: .standard(proto: "magnetic_field_y"),
    8: .standard(proto: "magnetic_field_z"),
    9: .standard(proto: "magnetic_field_accuracy"),
    10: .standard(proto: "attitude_pitch"),
    11: .standard(proto: "attitude_yaw"),
    12: .standard(proto: "attitude_roll"),
    13: .standard(proto: "rotation_rate_x"),
    14: .standard(proto: "rotation_rate_y"),
    15: .standard(proto: "rotation_rate_z"),
    16: .standard(proto: "gravity_x"),
    17: .standard(proto: "gravity_y"),
    18: .standard(proto: "gravity_z"),
    19: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _timestampSnapshot: UInt64 = 0
    var _linearAccelerationX: Double = 0
    var _linearAccelerationY: Double = 0
    var _linearAccelerationZ: Double = 0
    var _magneticFieldX: Double = 0
    var _magneticFieldY: Double = 0
    var _magneticFieldZ: Double = 0
    var _magneticFieldAccuracy: Int32 = 0
    var _attitudePitch: Double = 0
    var _attitudeYaw: Double = 0
    var _attitudeRoll: Double = 0
    var _rotationRateX: Double = 0
    var _rotationRateY: Double = 0
    var _rotationRateZ: Double = 0
    var _gravityX: Double = 0
    var _gravityY: Double = 0
    var _gravityZ: Double = 0
    var _status: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timestampSnapshot = source._timestampSnapshot
      _linearAccelerationX = source._linearAccelerationX
      _linearAccelerationY = source._linearAccelerationY
      _linearAccelerationZ = source._linearAccelerationZ
      _magneticFieldX = source._magneticFieldX
      _magneticFieldY = source._magneticFieldY
      _magneticFieldZ = source._magneticFieldZ
      _magneticFieldAccuracy = source._magneticFieldAccuracy
      _attitudePitch = source._attitudePitch
      _attitudeYaw = source._attitudeYaw
      _attitudeRoll = source._attitudeRoll
      _rotationRateX = source._rotationRateX
      _rotationRateY = source._rotationRateY
      _rotationRateZ = source._rotationRateZ
      _gravityX = source._gravityX
      _gravityY = source._gravityY
      _gravityZ = source._gravityZ
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._timestampSnapshot)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._linearAccelerationX)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._linearAccelerationY)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._linearAccelerationZ)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._magneticFieldX)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._magneticFieldY)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._magneticFieldZ)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._magneticFieldAccuracy)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._attitudePitch)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._attitudeYaw)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._attitudeRoll)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._rotationRateX)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._rotationRateY)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._rotationRateZ)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._gravityX)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._gravityY)
        case 18: try decoder.decodeSingularDoubleField(value: &_storage._gravityZ)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._status)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timestampSnapshot != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timestampSnapshot, fieldNumber: 1)
      }
      if _storage._linearAccelerationX != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearAccelerationX, fieldNumber: 3)
      }
      if _storage._linearAccelerationY != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearAccelerationY, fieldNumber: 4)
      }
      if _storage._linearAccelerationZ != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearAccelerationZ, fieldNumber: 5)
      }
      if _storage._magneticFieldX != 0 {
        try visitor.visitSingularDoubleField(value: _storage._magneticFieldX, fieldNumber: 6)
      }
      if _storage._magneticFieldY != 0 {
        try visitor.visitSingularDoubleField(value: _storage._magneticFieldY, fieldNumber: 7)
      }
      if _storage._magneticFieldZ != 0 {
        try visitor.visitSingularDoubleField(value: _storage._magneticFieldZ, fieldNumber: 8)
      }
      if _storage._magneticFieldAccuracy != 0 {
        try visitor.visitSingularInt32Field(value: _storage._magneticFieldAccuracy, fieldNumber: 9)
      }
      if _storage._attitudePitch != 0 {
        try visitor.visitSingularDoubleField(value: _storage._attitudePitch, fieldNumber: 10)
      }
      if _storage._attitudeYaw != 0 {
        try visitor.visitSingularDoubleField(value: _storage._attitudeYaw, fieldNumber: 11)
      }
      if _storage._attitudeRoll != 0 {
        try visitor.visitSingularDoubleField(value: _storage._attitudeRoll, fieldNumber: 12)
      }
      if _storage._rotationRateX != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rotationRateX, fieldNumber: 13)
      }
      if _storage._rotationRateY != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rotationRateY, fieldNumber: 14)
      }
      if _storage._rotationRateZ != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rotationRateZ, fieldNumber: 15)
      }
      if _storage._gravityX != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gravityX, fieldNumber: 16)
      }
      if _storage._gravityY != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gravityY, fieldNumber: 17)
      }
      if _storage._gravityZ != 0 {
        try visitor.visitSingularDoubleField(value: _storage._gravityZ, fieldNumber: 18)
      }
      if _storage._status != 0 {
        try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature.SensorInfo, rhs: POGOProtos_Networking_Envelopes_Signature.SensorInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestampSnapshot != rhs_storage._timestampSnapshot {return false}
        if _storage._linearAccelerationX != rhs_storage._linearAccelerationX {return false}
        if _storage._linearAccelerationY != rhs_storage._linearAccelerationY {return false}
        if _storage._linearAccelerationZ != rhs_storage._linearAccelerationZ {return false}
        if _storage._magneticFieldX != rhs_storage._magneticFieldX {return false}
        if _storage._magneticFieldY != rhs_storage._magneticFieldY {return false}
        if _storage._magneticFieldZ != rhs_storage._magneticFieldZ {return false}
        if _storage._magneticFieldAccuracy != rhs_storage._magneticFieldAccuracy {return false}
        if _storage._attitudePitch != rhs_storage._attitudePitch {return false}
        if _storage._attitudeYaw != rhs_storage._attitudeYaw {return false}
        if _storage._attitudeRoll != rhs_storage._attitudeRoll {return false}
        if _storage._rotationRateX != rhs_storage._rotationRateX {return false}
        if _storage._rotationRateY != rhs_storage._rotationRateY {return false}
        if _storage._rotationRateZ != rhs_storage._rotationRateZ {return false}
        if _storage._gravityX != rhs_storage._gravityX {return false}
        if _storage._gravityY != rhs_storage._gravityY {return false}
        if _storage._gravityZ != rhs_storage._gravityZ {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_Signature.DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_Signature.protoMessageName + ".DeviceInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "android_board_name"),
    3: .standard(proto: "android_bootloader"),
    4: .standard(proto: "device_brand"),
    5: .standard(proto: "device_model"),
    6: .standard(proto: "device_model_identifier"),
    7: .standard(proto: "device_model_boot"),
    8: .standard(proto: "hardware_manufacturer"),
    9: .standard(proto: "hardware_model"),
    10: .standard(proto: "firmware_brand"),
    12: .standard(proto: "firmware_tags"),
    13: .standard(proto: "firmware_type"),
    14: .standard(proto: "firmware_fingerprint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.deviceID)
      case 2: try decoder.decodeSingularStringField(value: &self.androidBoardName)
      case 3: try decoder.decodeSingularStringField(value: &self.androidBootloader)
      case 4: try decoder.decodeSingularStringField(value: &self.deviceBrand)
      case 5: try decoder.decodeSingularStringField(value: &self.deviceModel)
      case 6: try decoder.decodeSingularStringField(value: &self.deviceModelIdentifier)
      case 7: try decoder.decodeSingularStringField(value: &self.deviceModelBoot)
      case 8: try decoder.decodeSingularStringField(value: &self.hardwareManufacturer)
      case 9: try decoder.decodeSingularStringField(value: &self.hardwareModel)
      case 10: try decoder.decodeSingularStringField(value: &self.firmwareBrand)
      case 12: try decoder.decodeSingularStringField(value: &self.firmwareTags)
      case 13: try decoder.decodeSingularStringField(value: &self.firmwareType)
      case 14: try decoder.decodeSingularStringField(value: &self.firmwareFingerprint)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.androidBoardName.isEmpty {
      try visitor.visitSingularStringField(value: self.androidBoardName, fieldNumber: 2)
    }
    if !self.androidBootloader.isEmpty {
      try visitor.visitSingularStringField(value: self.androidBootloader, fieldNumber: 3)
    }
    if !self.deviceBrand.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceBrand, fieldNumber: 4)
    }
    if !self.deviceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModel, fieldNumber: 5)
    }
    if !self.deviceModelIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModelIdentifier, fieldNumber: 6)
    }
    if !self.deviceModelBoot.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModelBoot, fieldNumber: 7)
    }
    if !self.hardwareManufacturer.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareManufacturer, fieldNumber: 8)
    }
    if !self.hardwareModel.isEmpty {
      try visitor.visitSingularStringField(value: self.hardwareModel, fieldNumber: 9)
    }
    if !self.firmwareBrand.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareBrand, fieldNumber: 10)
    }
    if !self.firmwareTags.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareTags, fieldNumber: 12)
    }
    if !self.firmwareType.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareType, fieldNumber: 13)
    }
    if !self.firmwareFingerprint.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareFingerprint, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature.DeviceInfo, rhs: POGOProtos_Networking_Envelopes_Signature.DeviceInfo) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.androidBoardName != rhs.androidBoardName {return false}
    if lhs.androidBootloader != rhs.androidBootloader {return false}
    if lhs.deviceBrand != rhs.deviceBrand {return false}
    if lhs.deviceModel != rhs.deviceModel {return false}
    if lhs.deviceModelIdentifier != rhs.deviceModelIdentifier {return false}
    if lhs.deviceModelBoot != rhs.deviceModelBoot {return false}
    if lhs.hardwareManufacturer != rhs.hardwareManufacturer {return false}
    if lhs.hardwareModel != rhs.hardwareModel {return false}
    if lhs.firmwareBrand != rhs.firmwareBrand {return false}
    if lhs.firmwareTags != rhs.firmwareTags {return false}
    if lhs.firmwareType != rhs.firmwareType {return false}
    if lhs.firmwareFingerprint != rhs.firmwareFingerprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_Signature.ActivityStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_Signature.protoMessageName + ".ActivityStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time_ms"),
    2: .standard(proto: "unknown_status"),
    3: .same(proto: "walking"),
    4: .same(proto: "running"),
    5: .same(proto: "stationary"),
    6: .same(proto: "automotive"),
    7: .same(proto: "tilting"),
    8: .same(proto: "cycling"),
    9: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.startTimeMs)
      case 2: try decoder.decodeSingularBoolField(value: &self.unknownStatus)
      case 3: try decoder.decodeSingularBoolField(value: &self.walking)
      case 4: try decoder.decodeSingularBoolField(value: &self.running)
      case 5: try decoder.decodeSingularBoolField(value: &self.stationary)
      case 6: try decoder.decodeSingularBoolField(value: &self.automotive)
      case 7: try decoder.decodeSingularBoolField(value: &self.tilting)
      case 8: try decoder.decodeSingularBoolField(value: &self.cycling)
      case 9: try decoder.decodeSingularBytesField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startTimeMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.startTimeMs, fieldNumber: 1)
    }
    if self.unknownStatus != false {
      try visitor.visitSingularBoolField(value: self.unknownStatus, fieldNumber: 2)
    }
    if self.walking != false {
      try visitor.visitSingularBoolField(value: self.walking, fieldNumber: 3)
    }
    if self.running != false {
      try visitor.visitSingularBoolField(value: self.running, fieldNumber: 4)
    }
    if self.stationary != false {
      try visitor.visitSingularBoolField(value: self.stationary, fieldNumber: 5)
    }
    if self.automotive != false {
      try visitor.visitSingularBoolField(value: self.automotive, fieldNumber: 6)
    }
    if self.tilting != false {
      try visitor.visitSingularBoolField(value: self.tilting, fieldNumber: 7)
    }
    if self.cycling != false {
      try visitor.visitSingularBoolField(value: self.cycling, fieldNumber: 8)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularBytesField(value: self.status, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_Signature.ActivityStatus, rhs: POGOProtos_Networking_Envelopes_Signature.ActivityStatus) -> Bool {
    if lhs.startTimeMs != rhs.startTimeMs {return false}
    if lhs.unknownStatus != rhs.unknownStatus {return false}
    if lhs.walking != rhs.walking {return false}
    if lhs.running != rhs.running {return false}
    if lhs.stationary != rhs.stationary {return false}
    if lhs.automotive != rhs.automotive {return false}
    if lhs.tilting != rhs.tilting {return false}
    if lhs.cycling != rhs.cycling {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_UnknownMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnknownMessage"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_UnknownMessage, rhs: POGOProtos_Networking_Envelopes_UnknownMessage) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
