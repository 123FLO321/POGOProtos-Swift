// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Envelopes/ResponseEnvelope.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Envelopes_ResponseEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var statusCode: POGOProtos_Networking_Envelopes_ResponseEnvelope.StatusCode = .unknown

  public var requestID: UInt64 = 0

  public var apiURL: String = String()

  ///Untested maybe needs a good index order
  ///repeated SocialResponse social_returns = 5;
  public var platformReturns: [POGOProtos_Networking_Envelopes_ResponseEnvelope.PlatformResponse] = []

  public var authTicket: POGOProtos_Networking_Envelopes_AuthTicket {
    get {return _authTicket ?? POGOProtos_Networking_Envelopes_AuthTicket()}
    set {_authTicket = newValue}
  }
  /// Returns true if `authTicket` has been explicitly set.
  public var hasAuthTicket: Bool {return self._authTicket != nil}
  /// Clears the value of `authTicket`. Subsequent reads from it will return its default value.
  public mutating func clearAuthTicket() {self._authTicket = nil}

  public var returns: [Data] = []

  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum StatusCode: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0

    /// valid response with no api url
    case ok // = 1

    /// the response envelope has api_url set and this response is valid
    case okRpcURLInResponse // = 2

    /// bad request
    case badRequest // = 3

    /// using unimplemented request or corrupt request
    case invalidRequest // = 51

    /// invalid platform request or corrupt platform request
    case invalidPlatformRequest // = 52

    /// a new rpc endpoint is available and you should redirect to there
    case redirect // = 53

    /// occurs when you send blank authinfo, or sending nonsense timings (ie LocationFix.timestampSnapshot == Signature.timestampSinceStart)
    case sessionInvalidated // = 100

    /// occurs when the login token is invalid
    case invalidAuthToken // = 102
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ok
      case 2: self = .okRpcURLInResponse
      case 3: self = .badRequest
      case 51: self = .invalidRequest
      case 52: self = .invalidPlatformRequest
      case 53: self = .redirect
      case 100: self = .sessionInvalidated
      case 102: self = .invalidAuthToken
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ok: return 1
      case .okRpcURLInResponse: return 2
      case .badRequest: return 3
      case .invalidRequest: return 51
      case .invalidPlatformRequest: return 52
      case .redirect: return 53
      case .sessionInvalidated: return 100
      case .invalidAuthToken: return 102
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct PlatformResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: POGOProtos_Networking_Platform_PlatformRequestType = .unknownPlatformClientAction

    public var response: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _authTicket: POGOProtos_Networking_Envelopes_AuthTicket? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Envelopes_ResponseEnvelope.StatusCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Envelopes_ResponseEnvelope.StatusCode] = [
    .unknown,
    .ok,
    .okRpcURLInResponse,
    .badRequest,
    .invalidRequest,
    .invalidPlatformRequest,
    .redirect,
    .sessionInvalidated,
    .invalidAuthToken,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Envelopes"

extension POGOProtos_Networking_Envelopes_ResponseEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseEnvelope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "status_code"),
    2: .standard(proto: "request_id"),
    3: .standard(proto: "api_url"),
    6: .standard(proto: "platform_returns"),
    7: .standard(proto: "auth_ticket"),
    100: .same(proto: "returns"),
    101: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.statusCode)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.requestID)
      case 3: try decoder.decodeSingularStringField(value: &self.apiURL)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.platformReturns)
      case 7: try decoder.decodeSingularMessageField(value: &self._authTicket)
      case 100: try decoder.decodeRepeatedBytesField(value: &self.returns)
      case 101: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.statusCode != .unknown {
      try visitor.visitSingularEnumField(value: self.statusCode, fieldNumber: 1)
    }
    if self.requestID != 0 {
      try visitor.visitSingularUInt64Field(value: self.requestID, fieldNumber: 2)
    }
    if !self.apiURL.isEmpty {
      try visitor.visitSingularStringField(value: self.apiURL, fieldNumber: 3)
    }
    if !self.platformReturns.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformReturns, fieldNumber: 6)
    }
    if let v = self._authTicket {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.returns.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.returns, fieldNumber: 100)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_ResponseEnvelope, rhs: POGOProtos_Networking_Envelopes_ResponseEnvelope) -> Bool {
    if lhs.statusCode != rhs.statusCode {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.apiURL != rhs.apiURL {return false}
    if lhs.platformReturns != rhs.platformReturns {return false}
    if lhs._authTicket != rhs._authTicket {return false}
    if lhs.returns != rhs.returns {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Envelopes_ResponseEnvelope.StatusCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OK"),
    2: .same(proto: "OK_RPC_URL_IN_RESPONSE"),
    3: .same(proto: "BAD_REQUEST"),
    51: .same(proto: "INVALID_REQUEST"),
    52: .same(proto: "INVALID_PLATFORM_REQUEST"),
    53: .same(proto: "REDIRECT"),
    100: .same(proto: "SESSION_INVALIDATED"),
    102: .same(proto: "INVALID_AUTH_TOKEN"),
  ]
}

extension POGOProtos_Networking_Envelopes_ResponseEnvelope.PlatformResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Envelopes_ResponseEnvelope.protoMessageName + ".PlatformResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "response"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularBytesField(value: &self.response)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknownPlatformClientAction {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitSingularBytesField(value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Envelopes_ResponseEnvelope.PlatformResponse, rhs: POGOProtos_Networking_Envelopes_ResponseEnvelope.PlatformResponse) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
