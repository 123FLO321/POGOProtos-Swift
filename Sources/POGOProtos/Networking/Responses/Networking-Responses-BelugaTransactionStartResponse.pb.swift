// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/BelugaTransactionStartResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_BelugaTransactionStartResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: POGOProtos_Networking_Responses_BelugaTransactionStartResponse.Status = .unset

  public var belugaTransferPrep: POGOProtos_Data_Beluga_BelugaBleTransferPrep {
    get {return _belugaTransferPrep ?? POGOProtos_Data_Beluga_BelugaBleTransferPrep()}
    set {_belugaTransferPrep = newValue}
  }
  /// Returns true if `belugaTransferPrep` has been explicitly set.
  public var hasBelugaTransferPrep: Bool {return self._belugaTransferPrep != nil}
  /// Clears the value of `belugaTransferPrep`. Subsequent reads from it will return its default value.
  public mutating func clearBelugaTransferPrep() {self._belugaTransferPrep = nil}

  public var serverSignature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case failed // = 2
    case errorInvalidPokemonID // = 3
    case errorPokemonDeployed // = 4
    case errorPokemonIsEgg // = 5
    case errorPokemonIsBuddy // = 6
    case errorPokemonNotAllowed // = 7
    case errorInvalidNonce // = 8
    case errorTooManyPokemon // = 9
    case errorNoPokemonSpecified // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .failed
      case 3: self = .errorInvalidPokemonID
      case 4: self = .errorPokemonDeployed
      case 5: self = .errorPokemonIsEgg
      case 6: self = .errorPokemonIsBuddy
      case 7: self = .errorPokemonNotAllowed
      case 8: self = .errorInvalidNonce
      case 9: self = .errorTooManyPokemon
      case 10: self = .errorNoPokemonSpecified
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .failed: return 2
      case .errorInvalidPokemonID: return 3
      case .errorPokemonDeployed: return 4
      case .errorPokemonIsEgg: return 5
      case .errorPokemonIsBuddy: return 6
      case .errorPokemonNotAllowed: return 7
      case .errorInvalidNonce: return 8
      case .errorTooManyPokemon: return 9
      case .errorNoPokemonSpecified: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _belugaTransferPrep: POGOProtos_Data_Beluga_BelugaBleTransferPrep? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_BelugaTransactionStartResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_BelugaTransactionStartResponse.Status] = [
    .unset,
    .success,
    .failed,
    .errorInvalidPokemonID,
    .errorPokemonDeployed,
    .errorPokemonIsEgg,
    .errorPokemonIsBuddy,
    .errorPokemonNotAllowed,
    .errorInvalidNonce,
    .errorTooManyPokemon,
    .errorNoPokemonSpecified,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_BelugaTransactionStartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BelugaTransactionStartResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "beluga_transfer_prep"),
    3: .standard(proto: "server_signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._belugaTransferPrep) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.serverSignature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if let v = self._belugaTransferPrep {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.serverSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.serverSignature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_BelugaTransactionStartResponse, rhs: POGOProtos_Networking_Responses_BelugaTransactionStartResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._belugaTransferPrep != rhs._belugaTransferPrep {return false}
    if lhs.serverSignature != rhs.serverSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_BelugaTransactionStartResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "FAILED"),
    3: .same(proto: "ERROR_INVALID_POKEMON_ID"),
    4: .same(proto: "ERROR_POKEMON_DEPLOYED"),
    5: .same(proto: "ERROR_POKEMON_IS_EGG"),
    6: .same(proto: "ERROR_POKEMON_IS_BUDDY"),
    7: .same(proto: "ERROR_POKEMON_NOT_ALLOWED"),
    8: .same(proto: "ERROR_INVALID_NONCE"),
    9: .same(proto: "ERROR_TOO_MANY_POKEMON"),
    10: .same(proto: "ERROR_NO_POKEMON_SPECIFIED"),
  ]
}
