// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/ClaimCodenameResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_ClaimCodenameResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var codename: String = String()

  public var userMessage: String = String()

  public var isAssignable: Bool = false

  public var status: POGOProtos_Networking_Responses_ClaimCodenameResponse.Status = .unset

  public var updatedPlayer: POGOProtos_Data_PlayerData {
    get {return _updatedPlayer ?? POGOProtos_Data_PlayerData()}
    set {_updatedPlayer = newValue}
  }
  /// Returns true if `updatedPlayer` has been explicitly set.
  public var hasUpdatedPlayer: Bool {return self._updatedPlayer != nil}
  /// Clears the value of `updatedPlayer`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedPlayer() {self._updatedPlayer = nil}

  public var suggestedCodenames: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case codenameNotAvailable // = 2
    case codenameNotValid // = 3
    case currentOwner // = 4
    case codenameChangeNotAllowed // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .codenameNotAvailable
      case 3: self = .codenameNotValid
      case 4: self = .currentOwner
      case 5: self = .codenameChangeNotAllowed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .codenameNotAvailable: return 2
      case .codenameNotValid: return 3
      case .currentOwner: return 4
      case .codenameChangeNotAllowed: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _updatedPlayer: POGOProtos_Data_PlayerData? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_ClaimCodenameResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_ClaimCodenameResponse.Status] = [
    .unset,
    .success,
    .codenameNotAvailable,
    .codenameNotValid,
    .currentOwner,
    .codenameChangeNotAllowed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_ClaimCodenameResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClaimCodenameResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codename"),
    2: .standard(proto: "user_message"),
    3: .standard(proto: "is_assignable"),
    4: .same(proto: "status"),
    5: .standard(proto: "updated_player"),
    6: .standard(proto: "suggested_codenames"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codename) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userMessage) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isAssignable) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedPlayer) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.suggestedCodenames) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codename.isEmpty {
      try visitor.visitSingularStringField(value: self.codename, fieldNumber: 1)
    }
    if !self.userMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.userMessage, fieldNumber: 2)
    }
    if self.isAssignable != false {
      try visitor.visitSingularBoolField(value: self.isAssignable, fieldNumber: 3)
    }
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if let v = self._updatedPlayer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.suggestedCodenames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.suggestedCodenames, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_ClaimCodenameResponse, rhs: POGOProtos_Networking_Responses_ClaimCodenameResponse) -> Bool {
    if lhs.codename != rhs.codename {return false}
    if lhs.userMessage != rhs.userMessage {return false}
    if lhs.isAssignable != rhs.isAssignable {return false}
    if lhs.status != rhs.status {return false}
    if lhs._updatedPlayer != rhs._updatedPlayer {return false}
    if lhs.suggestedCodenames != rhs.suggestedCodenames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_ClaimCodenameResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "CODENAME_NOT_AVAILABLE"),
    3: .same(proto: "CODENAME_NOT_VALID"),
    4: .same(proto: "CURRENT_OWNER"),
    5: .same(proto: "CODENAME_CHANGE_NOT_ALLOWED"),
  ]
}
