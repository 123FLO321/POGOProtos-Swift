// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetCombatResultsResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetCombatResultsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_GetCombatResultsResponse.Result = .unset

  public var rewardStatus: POGOProtos_Enums_CombatRewardStatus = .unsetRewardStatus

  public var rewards: POGOProtos_Inventory_Loot {
    get {return _rewards ?? POGOProtos_Inventory_Loot()}
    set {_rewards = newValue}
  }
  /// Returns true if `rewards` has been explicitly set.
  public var hasRewards: Bool {return self._rewards != nil}
  /// Clears the value of `rewards`. Subsequent reads from it will return its default value.
  public mutating func clearRewards() {self._rewards = nil}

  public var friendLevelUp: POGOProtos_Data_Friends_LeveledUpFriends {
    get {return _friendLevelUp ?? POGOProtos_Data_Friends_LeveledUpFriends()}
    set {_friendLevelUp = newValue}
  }
  /// Returns true if `friendLevelUp` has been explicitly set.
  public var hasFriendLevelUp: Bool {return self._friendLevelUp != nil}
  /// Clears the value of `friendLevelUp`. Subsequent reads from it will return its default value.
  public mutating func clearFriendLevelUp() {self._friendLevelUp = nil}

  public var numberRewardedBattlesToday: Int32 = 0

  public var combatPlayerFinishState: POGOProtos_Enums_CombatPlayerFinishState = .winner

  public var combatRematch: POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch {
    get {return _combatRematch ?? POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch()}
    set {_combatRematch = newValue}
  }
  /// Returns true if `combatRematch` has been explicitly set.
  public var hasCombatRematch: Bool {return self._combatRematch != nil}
  /// Clears the value of `combatRematch`. Subsequent reads from it will return its default value.
  public mutating func clearCombatRematch() {self._combatRematch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorInvalidCombatState // = 2
    case errorCombatNotFound // = 3
    case errorPlayerQuit // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorInvalidCombatState
      case 3: self = .errorCombatNotFound
      case 4: self = .errorPlayerQuit
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorInvalidCombatState: return 2
      case .errorCombatNotFound: return 3
      case .errorPlayerQuit: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct CombatRematch {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var combatRematchID: String = String()

    public var combatLeagueTemplateID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _rewards: POGOProtos_Inventory_Loot? = nil
  fileprivate var _friendLevelUp: POGOProtos_Data_Friends_LeveledUpFriends? = nil
  fileprivate var _combatRematch: POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GetCombatResultsResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GetCombatResultsResponse.Result] = [
    .unset,
    .success,
    .errorInvalidCombatState,
    .errorCombatNotFound,
    .errorPlayerQuit,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetCombatResultsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCombatResultsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "reward_status"),
    3: .same(proto: "rewards"),
    4: .standard(proto: "friend_level_up"),
    5: .standard(proto: "number_rewarded_battles_today"),
    6: .standard(proto: "combat_player_finish_state"),
    7: .standard(proto: "combat_rematch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.rewardStatus) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rewards) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._friendLevelUp) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.numberRewardedBattlesToday) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.combatPlayerFinishState) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._combatRematch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if self.rewardStatus != .unsetRewardStatus {
      try visitor.visitSingularEnumField(value: self.rewardStatus, fieldNumber: 2)
    }
    if let v = self._rewards {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._friendLevelUp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.numberRewardedBattlesToday != 0 {
      try visitor.visitSingularInt32Field(value: self.numberRewardedBattlesToday, fieldNumber: 5)
    }
    if self.combatPlayerFinishState != .winner {
      try visitor.visitSingularEnumField(value: self.combatPlayerFinishState, fieldNumber: 6)
    }
    if let v = self._combatRematch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetCombatResultsResponse, rhs: POGOProtos_Networking_Responses_GetCombatResultsResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.rewardStatus != rhs.rewardStatus {return false}
    if lhs._rewards != rhs._rewards {return false}
    if lhs._friendLevelUp != rhs._friendLevelUp {return false}
    if lhs.numberRewardedBattlesToday != rhs.numberRewardedBattlesToday {return false}
    if lhs.combatPlayerFinishState != rhs.combatPlayerFinishState {return false}
    if lhs._combatRematch != rhs._combatRematch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetCombatResultsResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_INVALID_COMBAT_STATE"),
    3: .same(proto: "ERROR_COMBAT_NOT_FOUND"),
    4: .same(proto: "ERROR_PLAYER_QUIT"),
  ]
}

extension POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_GetCombatResultsResponse.protoMessageName + ".CombatRematch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "combat_rematch_id"),
    2: .standard(proto: "combat_league_template_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.combatRematchID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.combatLeagueTemplateID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.combatRematchID.isEmpty {
      try visitor.visitSingularStringField(value: self.combatRematchID, fieldNumber: 1)
    }
    if !self.combatLeagueTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.combatLeagueTemplateID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch, rhs: POGOProtos_Networking_Responses_GetCombatResultsResponse.CombatRematch) -> Bool {
    if lhs.combatRematchID != rhs.combatRematchID {return false}
    if lhs.combatLeagueTemplateID != rhs.combatLeagueTemplateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
