// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/InvasionEncounterResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_InvasionEncounterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: POGOProtos_Map_Fort_InvasionStatus.Status = .unset

  public var encounterPokemon: POGOProtos_Data_PokemonData {
    get {return _encounterPokemon ?? POGOProtos_Data_PokemonData()}
    set {_encounterPokemon = newValue}
  }
  /// Returns true if `encounterPokemon` has been explicitly set.
  public var hasEncounterPokemon: Bool {return self._encounterPokemon != nil}
  /// Clears the value of `encounterPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearEncounterPokemon() {self._encounterPokemon = nil}

  public var captureProbability: POGOProtos_Data_Capture_CaptureProbability {
    get {return _captureProbability ?? POGOProtos_Data_Capture_CaptureProbability()}
    set {_captureProbability = newValue}
  }
  /// Returns true if `captureProbability` has been explicitly set.
  public var hasCaptureProbability: Bool {return self._captureProbability != nil}
  /// Clears the value of `captureProbability`. Subsequent reads from it will return its default value.
  public mutating func clearCaptureProbability() {self._captureProbability = nil}

  public var activeItem: POGOProtos_Inventory_Item_ItemId = .itemUnknown

  public var throwsRemaining: Int32 = 0

  public var encounterID: UInt64 = 0

  public var spawnPointGuid: String = String()

  public var ballsDisplay: POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay {
    get {return _ballsDisplay ?? POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay()}
    set {_ballsDisplay = newValue}
  }
  /// Returns true if `ballsDisplay` has been explicitly set.
  public var hasBallsDisplay: Bool {return self._ballsDisplay != nil}
  /// Clears the value of `ballsDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearBallsDisplay() {self._ballsDisplay = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct PremierBallsDisplay {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var baseNumBalls: Int32 = 0

    public var pokemonPurifiedNumBalls: Int32 = 0

    public var gruntsDefeatedNumBalls: Int32 = 0

    public var pokemonRemainingNumBalls: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _encounterPokemon: POGOProtos_Data_PokemonData? = nil
  fileprivate var _captureProbability: POGOProtos_Data_Capture_CaptureProbability? = nil
  fileprivate var _ballsDisplay: POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_InvasionEncounterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvasionEncounterResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "encounter_pokemon"),
    3: .standard(proto: "capture_probability"),
    4: .standard(proto: "active_item"),
    5: .standard(proto: "throws_remaining"),
    6: .standard(proto: "encounter_id"),
    7: .standard(proto: "spawn_point_guid"),
    8: .standard(proto: "balls_display"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._encounterPokemon) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._captureProbability) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.activeItem) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.throwsRemaining) }()
      case 6: try { try decoder.decodeSingularFixed64Field(value: &self.encounterID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.spawnPointGuid) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._ballsDisplay) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if let v = self._encounterPokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._captureProbability {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.activeItem != .itemUnknown {
      try visitor.visitSingularEnumField(value: self.activeItem, fieldNumber: 4)
    }
    if self.throwsRemaining != 0 {
      try visitor.visitSingularInt32Field(value: self.throwsRemaining, fieldNumber: 5)
    }
    if self.encounterID != 0 {
      try visitor.visitSingularFixed64Field(value: self.encounterID, fieldNumber: 6)
    }
    if !self.spawnPointGuid.isEmpty {
      try visitor.visitSingularStringField(value: self.spawnPointGuid, fieldNumber: 7)
    }
    if let v = self._ballsDisplay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_InvasionEncounterResponse, rhs: POGOProtos_Networking_Responses_InvasionEncounterResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs._encounterPokemon != rhs._encounterPokemon {return false}
    if lhs._captureProbability != rhs._captureProbability {return false}
    if lhs.activeItem != rhs.activeItem {return false}
    if lhs.throwsRemaining != rhs.throwsRemaining {return false}
    if lhs.encounterID != rhs.encounterID {return false}
    if lhs.spawnPointGuid != rhs.spawnPointGuid {return false}
    if lhs._ballsDisplay != rhs._ballsDisplay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_InvasionEncounterResponse.protoMessageName + ".PremierBallsDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_num_balls"),
    2: .standard(proto: "pokemon_purified_num_balls"),
    3: .standard(proto: "grunts_defeated_num_balls"),
    4: .standard(proto: "pokemon_remaining_num_balls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.baseNumBalls) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pokemonPurifiedNumBalls) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.gruntsDefeatedNumBalls) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.pokemonRemainingNumBalls) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.baseNumBalls != 0 {
      try visitor.visitSingularInt32Field(value: self.baseNumBalls, fieldNumber: 1)
    }
    if self.pokemonPurifiedNumBalls != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonPurifiedNumBalls, fieldNumber: 2)
    }
    if self.gruntsDefeatedNumBalls != 0 {
      try visitor.visitSingularInt32Field(value: self.gruntsDefeatedNumBalls, fieldNumber: 3)
    }
    if self.pokemonRemainingNumBalls != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonRemainingNumBalls, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay, rhs: POGOProtos_Networking_Responses_InvasionEncounterResponse.PremierBallsDisplay) -> Bool {
    if lhs.baseNumBalls != rhs.baseNumBalls {return false}
    if lhs.pokemonPurifiedNumBalls != rhs.pokemonPurifiedNumBalls {return false}
    if lhs.gruntsDefeatedNumBalls != rhs.gruntsDefeatedNumBalls {return false}
    if lhs.pokemonRemainingNumBalls != rhs.pokemonRemainingNumBalls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
