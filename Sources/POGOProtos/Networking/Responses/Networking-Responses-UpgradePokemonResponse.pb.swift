// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/UpgradePokemonResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_UpgradePokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_UpgradePokemonResponse.Result = .unset

  public var upgradedPokemon: POGOProtos_Data_PokemonData {
    get {return _upgradedPokemon ?? POGOProtos_Data_PokemonData()}
    set {_upgradedPokemon = newValue}
  }
  /// Returns true if `upgradedPokemon` has been explicitly set.
  public var hasUpgradedPokemon: Bool {return self._upgradedPokemon != nil}
  /// Clears the value of `upgradedPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearUpgradedPokemon() {self._upgradedPokemon = nil}

  public var nextUpgradedPokemon: POGOProtos_Data_PokemonData {
    get {return _nextUpgradedPokemon ?? POGOProtos_Data_PokemonData()}
    set {_nextUpgradedPokemon = newValue}
  }
  /// Returns true if `nextUpgradedPokemon` has been explicitly set.
  public var hasNextUpgradedPokemon: Bool {return self._nextUpgradedPokemon != nil}
  /// Clears the value of `nextUpgradedPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearNextUpgradedPokemon() {self._nextUpgradedPokemon = nil}

  public var bulkUpgradesCostTable: [POGOProtos_Networking_Responses_UpgradePokemonResponse.BulkUpgradesCost] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorPokemonNotFound // = 2
    case errorInsufficientResources // = 3
    case errorUpgradeNotAvailable // = 4
    case errorPokemonIsDeployed // = 5
    case errorDuplicateRequest // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorPokemonNotFound
      case 3: self = .errorInsufficientResources
      case 4: self = .errorUpgradeNotAvailable
      case 5: self = .errorPokemonIsDeployed
      case 6: self = .errorDuplicateRequest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorPokemonNotFound: return 2
      case .errorInsufficientResources: return 3
      case .errorUpgradeNotAvailable: return 4
      case .errorPokemonIsDeployed: return 5
      case .errorDuplicateRequest: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct BulkUpgradesCost {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var numberOfUpgrades: Int32 = 0

    public var pokemonLevel: Int32 = 0

    public var pokemonCp: Int32 = 0

    public var totalStardustCost: Int32 = 0

    public var totalCandyCost: Int32 = 0

    public var totalCpMultiplier: Float = 0

    public var totalXlCandyCost: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _upgradedPokemon: POGOProtos_Data_PokemonData? = nil
  fileprivate var _nextUpgradedPokemon: POGOProtos_Data_PokemonData? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_UpgradePokemonResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_UpgradePokemonResponse.Result] = [
    .unset,
    .success,
    .errorPokemonNotFound,
    .errorInsufficientResources,
    .errorUpgradeNotAvailable,
    .errorPokemonIsDeployed,
    .errorDuplicateRequest,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_UpgradePokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpgradePokemonResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "upgraded_pokemon"),
    3: .standard(proto: "next_upgraded_pokemon"),
    4: .standard(proto: "bulk_upgrades_cost_table"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._upgradedPokemon) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._nextUpgradedPokemon) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.bulkUpgradesCostTable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if let v = self._upgradedPokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._nextUpgradedPokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.bulkUpgradesCostTable.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bulkUpgradesCostTable, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_UpgradePokemonResponse, rhs: POGOProtos_Networking_Responses_UpgradePokemonResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._upgradedPokemon != rhs._upgradedPokemon {return false}
    if lhs._nextUpgradedPokemon != rhs._nextUpgradedPokemon {return false}
    if lhs.bulkUpgradesCostTable != rhs.bulkUpgradesCostTable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_UpgradePokemonResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_POKEMON_NOT_FOUND"),
    3: .same(proto: "ERROR_INSUFFICIENT_RESOURCES"),
    4: .same(proto: "ERROR_UPGRADE_NOT_AVAILABLE"),
    5: .same(proto: "ERROR_POKEMON_IS_DEPLOYED"),
    6: .same(proto: "ERROR_DUPLICATE_REQUEST"),
  ]
}

extension POGOProtos_Networking_Responses_UpgradePokemonResponse.BulkUpgradesCost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_UpgradePokemonResponse.protoMessageName + ".BulkUpgradesCost"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "number_of_upgrades"),
    2: .standard(proto: "pokemon_level"),
    3: .standard(proto: "pokemon_cp"),
    4: .standard(proto: "total_stardust_cost"),
    5: .standard(proto: "total_candy_cost"),
    6: .standard(proto: "total_cp_multiplier"),
    7: .standard(proto: "total_xl_candy_cost"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.numberOfUpgrades) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pokemonLevel) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.pokemonCp) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalStardustCost) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.totalCandyCost) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.totalCpMultiplier) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.totalXlCandyCost) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numberOfUpgrades != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfUpgrades, fieldNumber: 1)
    }
    if self.pokemonLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonLevel, fieldNumber: 2)
    }
    if self.pokemonCp != 0 {
      try visitor.visitSingularInt32Field(value: self.pokemonCp, fieldNumber: 3)
    }
    if self.totalStardustCost != 0 {
      try visitor.visitSingularInt32Field(value: self.totalStardustCost, fieldNumber: 4)
    }
    if self.totalCandyCost != 0 {
      try visitor.visitSingularInt32Field(value: self.totalCandyCost, fieldNumber: 5)
    }
    if self.totalCpMultiplier != 0 {
      try visitor.visitSingularFloatField(value: self.totalCpMultiplier, fieldNumber: 6)
    }
    if self.totalXlCandyCost != 0 {
      try visitor.visitSingularInt32Field(value: self.totalXlCandyCost, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_UpgradePokemonResponse.BulkUpgradesCost, rhs: POGOProtos_Networking_Responses_UpgradePokemonResponse.BulkUpgradesCost) -> Bool {
    if lhs.numberOfUpgrades != rhs.numberOfUpgrades {return false}
    if lhs.pokemonLevel != rhs.pokemonLevel {return false}
    if lhs.pokemonCp != rhs.pokemonCp {return false}
    if lhs.totalStardustCost != rhs.totalStardustCost {return false}
    if lhs.totalCandyCost != rhs.totalCandyCost {return false}
    if lhs.totalCpMultiplier != rhs.totalCpMultiplier {return false}
    if lhs.totalXlCandyCost != rhs.totalXlCandyCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
