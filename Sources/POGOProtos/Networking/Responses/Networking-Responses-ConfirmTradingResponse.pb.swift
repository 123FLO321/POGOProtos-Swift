// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/ConfirmTradingResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_ConfirmTradingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_ConfirmTradingResponse.Result = .unset

  public var trading: POGOProtos_Data_Trading_Trading {
    get {return _trading ?? POGOProtos_Data_Trading_Trading()}
    set {_trading = newValue}
  }
  /// Returns true if `trading` has been explicitly set.
  public var hasTrading: Bool {return self._trading != nil}
  /// Clears the value of `trading`. Subsequent reads from it will return its default value.
  public mutating func clearTrading() {self._trading = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorUnknown // = 2
    case errorFriendNotFound // = 3
    case errorInvalidPlayerID // = 4
    case errorInvalidState // = 5
    case errorStateHandler // = 6
    case errorInvalidPokemon // = 7
    case errorInsufficientPayment // = 8
    case errorNoPlayerPokemon // = 9
    case errorNoFriendPokemon // = 10
    case errorPlayerAlreadyConfirmed // = 11
    case errorTransactionLogNotMatch // = 12
    case errorTradingExpired // = 13
    case errorTransaction // = 14
    case errorDailyLimitReached // = 15
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorUnknown
      case 3: self = .errorFriendNotFound
      case 4: self = .errorInvalidPlayerID
      case 5: self = .errorInvalidState
      case 6: self = .errorStateHandler
      case 7: self = .errorInvalidPokemon
      case 8: self = .errorInsufficientPayment
      case 9: self = .errorNoPlayerPokemon
      case 10: self = .errorNoFriendPokemon
      case 11: self = .errorPlayerAlreadyConfirmed
      case 12: self = .errorTransactionLogNotMatch
      case 13: self = .errorTradingExpired
      case 14: self = .errorTransaction
      case 15: self = .errorDailyLimitReached
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorUnknown: return 2
      case .errorFriendNotFound: return 3
      case .errorInvalidPlayerID: return 4
      case .errorInvalidState: return 5
      case .errorStateHandler: return 6
      case .errorInvalidPokemon: return 7
      case .errorInsufficientPayment: return 8
      case .errorNoPlayerPokemon: return 9
      case .errorNoFriendPokemon: return 10
      case .errorPlayerAlreadyConfirmed: return 11
      case .errorTransactionLogNotMatch: return 12
      case .errorTradingExpired: return 13
      case .errorTransaction: return 14
      case .errorDailyLimitReached: return 15
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _trading: POGOProtos_Data_Trading_Trading? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_ConfirmTradingResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_ConfirmTradingResponse.Result] = [
    .unset,
    .success,
    .errorUnknown,
    .errorFriendNotFound,
    .errorInvalidPlayerID,
    .errorInvalidState,
    .errorStateHandler,
    .errorInvalidPokemon,
    .errorInsufficientPayment,
    .errorNoPlayerPokemon,
    .errorNoFriendPokemon,
    .errorPlayerAlreadyConfirmed,
    .errorTransactionLogNotMatch,
    .errorTradingExpired,
    .errorTransaction,
    .errorDailyLimitReached,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_ConfirmTradingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfirmTradingResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "trading"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._trading) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if let v = self._trading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_ConfirmTradingResponse, rhs: POGOProtos_Networking_Responses_ConfirmTradingResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._trading != rhs._trading {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_ConfirmTradingResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_UNKNOWN"),
    3: .same(proto: "ERROR_FRIEND_NOT_FOUND"),
    4: .same(proto: "ERROR_INVALID_PLAYER_ID"),
    5: .same(proto: "ERROR_INVALID_STATE"),
    6: .same(proto: "ERROR_STATE_HANDLER"),
    7: .same(proto: "ERROR_INVALID_POKEMON"),
    8: .same(proto: "ERROR_INSUFFICIENT_PAYMENT"),
    9: .same(proto: "ERROR_NO_PLAYER_POKEMON"),
    10: .same(proto: "ERROR_NO_FRIEND_POKEMON"),
    11: .same(proto: "ERROR_PLAYER_ALREADY_CONFIRMED"),
    12: .same(proto: "ERROR_TRANSACTION_LOG_NOT_MATCH"),
    13: .same(proto: "ERROR_TRADING_EXPIRED"),
    14: .same(proto: "ERROR_TRANSACTION"),
    15: .same(proto: "ERROR_DAILY_LIMIT_REACHED"),
  ]
}
