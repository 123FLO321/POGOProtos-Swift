// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GymFeedPokemonResponse.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Networking_Responses_GymFeedPokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  var gymStatusAndDefenders: POGOProtos_Data_Gym_GymStatusAndDefenders {
    get {return _storage._gymStatusAndDefenders ?? POGOProtos_Data_Gym_GymStatusAndDefenders()}
    set {_uniqueStorage()._gymStatusAndDefenders = newValue}
  }
  /// Returns true if `gymStatusAndDefenders` has been explicitly set.
  var hasGymStatusAndDefenders: Bool {return _storage._gymStatusAndDefenders != nil}
  /// Clears the value of `gymStatusAndDefenders`. Subsequent reads from it will return its default value.
  mutating func clearGymStatusAndDefenders() {_uniqueStorage()._gymStatusAndDefenders = nil}

  var awardedGymBadge: POGOProtos_Data_Badge_AwardedGymBadge {
    get {return _storage._awardedGymBadge ?? POGOProtos_Data_Badge_AwardedGymBadge()}
    set {_uniqueStorage()._awardedGymBadge = newValue}
  }
  /// Returns true if `awardedGymBadge` has been explicitly set.
  var hasAwardedGymBadge: Bool {return _storage._awardedGymBadge != nil}
  /// Clears the value of `awardedGymBadge`. Subsequent reads from it will return its default value.
  mutating func clearAwardedGymBadge() {_uniqueStorage()._awardedGymBadge = nil}

  var stardustAwarded: Int32 {
    get {return _storage._stardustAwarded}
    set {_uniqueStorage()._stardustAwarded = newValue}
  }

  var xpAwarded: Int32 {
    get {return _storage._xpAwarded}
    set {_uniqueStorage()._xpAwarded = newValue}
  }

  var numCandyAwarded: Int32 {
    get {return _storage._numCandyAwarded}
    set {_uniqueStorage()._numCandyAwarded = newValue}
  }

  var familyCandyID: POGOProtos_Enums_PokemonFamilyId {
    get {return _storage._familyCandyID}
    set {_uniqueStorage()._familyCandyID = newValue}
  }

  var cooldownComplete: Int64 {
    get {return _storage._cooldownComplete}
    set {_uniqueStorage()._cooldownComplete = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorCannotUse // = 2
    case errorNotInRange // = 3
    case errorPokemonNotThere // = 4
    case errorPokemonFull // = 5
    case errorNoBerriesLeft // = 6
    case errorWrongTeam // = 7
    case errorWrongCount // = 8
    case errorTooFast // = 9
    case errorTooFrequent // = 10
    case errorGymBusy // = 11
    case errorRaidActive // = 12
    case errorGymClosed // = 13
    case UNRECOGNIZED(Int)

    init() {
      self = .unset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorCannotUse
      case 3: self = .errorNotInRange
      case 4: self = .errorPokemonNotThere
      case 5: self = .errorPokemonFull
      case 6: self = .errorNoBerriesLeft
      case 7: self = .errorWrongTeam
      case 8: self = .errorWrongCount
      case 9: self = .errorTooFast
      case 10: self = .errorTooFrequent
      case 11: self = .errorGymBusy
      case 12: self = .errorRaidActive
      case 13: self = .errorGymClosed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorCannotUse: return 2
      case .errorNotInRange: return 3
      case .errorPokemonNotThere: return 4
      case .errorPokemonFull: return 5
      case .errorNoBerriesLeft: return 6
      case .errorWrongTeam: return 7
      case .errorWrongCount: return 8
      case .errorTooFast: return 9
      case .errorTooFrequent: return 10
      case .errorGymBusy: return 11
      case .errorRaidActive: return 12
      case .errorGymClosed: return 13
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result] = [
    .unset,
    .success,
    .errorCannotUse,
    .errorNotInRange,
    .errorPokemonNotThere,
    .errorPokemonFull,
    .errorNoBerriesLeft,
    .errorWrongTeam,
    .errorWrongCount,
    .errorTooFast,
    .errorTooFrequent,
    .errorGymBusy,
    .errorRaidActive,
    .errorGymClosed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GymFeedPokemonResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "gym_status_and_defenders"),
    3: .standard(proto: "awarded_gym_badge"),
    4: .standard(proto: "stardust_awarded"),
    5: .standard(proto: "xp_awarded"),
    6: .standard(proto: "num_candy_awarded"),
    7: .standard(proto: "family_candy_id"),
    8: .standard(proto: "cooldown_complete"),
  ]

  fileprivate class _StorageClass {
    var _result: POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result = .unset
    var _gymStatusAndDefenders: POGOProtos_Data_Gym_GymStatusAndDefenders? = nil
    var _awardedGymBadge: POGOProtos_Data_Badge_AwardedGymBadge? = nil
    var _stardustAwarded: Int32 = 0
    var _xpAwarded: Int32 = 0
    var _numCandyAwarded: Int32 = 0
    var _familyCandyID: POGOProtos_Enums_PokemonFamilyId = .familyUnset
    var _cooldownComplete: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
      _gymStatusAndDefenders = source._gymStatusAndDefenders
      _awardedGymBadge = source._awardedGymBadge
      _stardustAwarded = source._stardustAwarded
      _xpAwarded = source._xpAwarded
      _numCandyAwarded = source._numCandyAwarded
      _familyCandyID = source._familyCandyID
      _cooldownComplete = source._cooldownComplete
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._result)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gymStatusAndDefenders)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._awardedGymBadge)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._stardustAwarded)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._xpAwarded)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._numCandyAwarded)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._familyCandyID)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._cooldownComplete)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._result != .unset {
        try visitor.visitSingularEnumField(value: _storage._result, fieldNumber: 1)
      }
      if let v = _storage._gymStatusAndDefenders {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._awardedGymBadge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._stardustAwarded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._stardustAwarded, fieldNumber: 4)
      }
      if _storage._xpAwarded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._xpAwarded, fieldNumber: 5)
      }
      if _storage._numCandyAwarded != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numCandyAwarded, fieldNumber: 6)
      }
      if _storage._familyCandyID != .familyUnset {
        try visitor.visitSingularEnumField(value: _storage._familyCandyID, fieldNumber: 7)
      }
      if _storage._cooldownComplete != 0 {
        try visitor.visitSingularInt64Field(value: _storage._cooldownComplete, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Networking_Responses_GymFeedPokemonResponse, rhs: POGOProtos_Networking_Responses_GymFeedPokemonResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        if _storage._gymStatusAndDefenders != rhs_storage._gymStatusAndDefenders {return false}
        if _storage._awardedGymBadge != rhs_storage._awardedGymBadge {return false}
        if _storage._stardustAwarded != rhs_storage._stardustAwarded {return false}
        if _storage._xpAwarded != rhs_storage._xpAwarded {return false}
        if _storage._numCandyAwarded != rhs_storage._numCandyAwarded {return false}
        if _storage._familyCandyID != rhs_storage._familyCandyID {return false}
        if _storage._cooldownComplete != rhs_storage._cooldownComplete {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_CANNOT_USE"),
    3: .same(proto: "ERROR_NOT_IN_RANGE"),
    4: .same(proto: "ERROR_POKEMON_NOT_THERE"),
    5: .same(proto: "ERROR_POKEMON_FULL"),
    6: .same(proto: "ERROR_NO_BERRIES_LEFT"),
    7: .same(proto: "ERROR_WRONG_TEAM"),
    8: .same(proto: "ERROR_WRONG_COUNT"),
    9: .same(proto: "ERROR_TOO_FAST"),
    10: .same(proto: "ERROR_TOO_FREQUENT"),
    11: .same(proto: "ERROR_GYM_BUSY"),
    12: .same(proto: "ERROR_RAID_ACTIVE"),
    13: .same(proto: "ERROR_GYM_CLOSED"),
  ]
}
