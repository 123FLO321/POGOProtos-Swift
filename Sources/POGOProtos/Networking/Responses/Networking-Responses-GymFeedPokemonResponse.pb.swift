// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GymFeedPokemonResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GymFeedPokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result = .unset

  public var gymStatusAndDefenders: POGOProtos_Data_Gym_GymStatusAndDefenders {
    get {return _gymStatusAndDefenders ?? POGOProtos_Data_Gym_GymStatusAndDefenders()}
    set {_gymStatusAndDefenders = newValue}
  }
  /// Returns true if `gymStatusAndDefenders` has been explicitly set.
  public var hasGymStatusAndDefenders: Bool {return self._gymStatusAndDefenders != nil}
  /// Clears the value of `gymStatusAndDefenders`. Subsequent reads from it will return its default value.
  public mutating func clearGymStatusAndDefenders() {self._gymStatusAndDefenders = nil}

  public var awardedGymBadge: POGOProtos_Data_Badge_AwardedGymBadge {
    get {return _awardedGymBadge ?? POGOProtos_Data_Badge_AwardedGymBadge()}
    set {_awardedGymBadge = newValue}
  }
  /// Returns true if `awardedGymBadge` has been explicitly set.
  public var hasAwardedGymBadge: Bool {return self._awardedGymBadge != nil}
  /// Clears the value of `awardedGymBadge`. Subsequent reads from it will return its default value.
  public mutating func clearAwardedGymBadge() {self._awardedGymBadge = nil}

  public var stardustAwarded: Int32 = 0

  public var xpAwarded: Int32 = 0

  public var numCandyAwarded: Int32 = 0

  public var familyCandyID: POGOProtos_Enums_PokemonFamilyId = .familyUnset

  public var cooldownComplete: Int64 = 0

  public var numXlCandyAwarded: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorCannotUse // = 2
    case errorNotInRange // = 3
    case errorPokemonNotThere // = 4
    case errorPokemonFull // = 5
    case errorNoBerriesLeft // = 6
    case errorWrongTeam // = 7
    case errorWrongCount // = 8
    case errorTooFast // = 9
    case errorTooFrequent // = 10
    case errorGymBusy // = 11
    case errorRaidActive // = 12
    case errorGymClosed // = 13
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorCannotUse
      case 3: self = .errorNotInRange
      case 4: self = .errorPokemonNotThere
      case 5: self = .errorPokemonFull
      case 6: self = .errorNoBerriesLeft
      case 7: self = .errorWrongTeam
      case 8: self = .errorWrongCount
      case 9: self = .errorTooFast
      case 10: self = .errorTooFrequent
      case 11: self = .errorGymBusy
      case 12: self = .errorRaidActive
      case 13: self = .errorGymClosed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorCannotUse: return 2
      case .errorNotInRange: return 3
      case .errorPokemonNotThere: return 4
      case .errorPokemonFull: return 5
      case .errorNoBerriesLeft: return 6
      case .errorWrongTeam: return 7
      case .errorWrongCount: return 8
      case .errorTooFast: return 9
      case .errorTooFrequent: return 10
      case .errorGymBusy: return 11
      case .errorRaidActive: return 12
      case .errorGymClosed: return 13
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _gymStatusAndDefenders: POGOProtos_Data_Gym_GymStatusAndDefenders? = nil
  fileprivate var _awardedGymBadge: POGOProtos_Data_Badge_AwardedGymBadge? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result] = [
    .unset,
    .success,
    .errorCannotUse,
    .errorNotInRange,
    .errorPokemonNotThere,
    .errorPokemonFull,
    .errorNoBerriesLeft,
    .errorWrongTeam,
    .errorWrongCount,
    .errorTooFast,
    .errorTooFrequent,
    .errorGymBusy,
    .errorRaidActive,
    .errorGymClosed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GymFeedPokemonResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "gym_status_and_defenders"),
    3: .standard(proto: "awarded_gym_badge"),
    4: .standard(proto: "stardust_awarded"),
    5: .standard(proto: "xp_awarded"),
    6: .standard(proto: "num_candy_awarded"),
    7: .standard(proto: "family_candy_id"),
    8: .standard(proto: "cooldown_complete"),
    9: .standard(proto: "num_xl_candy_awarded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._gymStatusAndDefenders) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._awardedGymBadge) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.stardustAwarded) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.xpAwarded) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.numCandyAwarded) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.familyCandyID) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.cooldownComplete) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.numXlCandyAwarded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if let v = self._gymStatusAndDefenders {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._awardedGymBadge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.stardustAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.stardustAwarded, fieldNumber: 4)
    }
    if self.xpAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.xpAwarded, fieldNumber: 5)
    }
    if self.numCandyAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.numCandyAwarded, fieldNumber: 6)
    }
    if self.familyCandyID != .familyUnset {
      try visitor.visitSingularEnumField(value: self.familyCandyID, fieldNumber: 7)
    }
    if self.cooldownComplete != 0 {
      try visitor.visitSingularInt64Field(value: self.cooldownComplete, fieldNumber: 8)
    }
    if self.numXlCandyAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.numXlCandyAwarded, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GymFeedPokemonResponse, rhs: POGOProtos_Networking_Responses_GymFeedPokemonResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._gymStatusAndDefenders != rhs._gymStatusAndDefenders {return false}
    if lhs._awardedGymBadge != rhs._awardedGymBadge {return false}
    if lhs.stardustAwarded != rhs.stardustAwarded {return false}
    if lhs.xpAwarded != rhs.xpAwarded {return false}
    if lhs.numCandyAwarded != rhs.numCandyAwarded {return false}
    if lhs.familyCandyID != rhs.familyCandyID {return false}
    if lhs.cooldownComplete != rhs.cooldownComplete {return false}
    if lhs.numXlCandyAwarded != rhs.numXlCandyAwarded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GymFeedPokemonResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_CANNOT_USE"),
    3: .same(proto: "ERROR_NOT_IN_RANGE"),
    4: .same(proto: "ERROR_POKEMON_NOT_THERE"),
    5: .same(proto: "ERROR_POKEMON_FULL"),
    6: .same(proto: "ERROR_NO_BERRIES_LEFT"),
    7: .same(proto: "ERROR_WRONG_TEAM"),
    8: .same(proto: "ERROR_WRONG_COUNT"),
    9: .same(proto: "ERROR_TOO_FAST"),
    10: .same(proto: "ERROR_TOO_FREQUENT"),
    11: .same(proto: "ERROR_GYM_BUSY"),
    12: .same(proto: "ERROR_RAID_ACTIVE"),
    13: .same(proto: "ERROR_GYM_CLOSED"),
  ]
}
