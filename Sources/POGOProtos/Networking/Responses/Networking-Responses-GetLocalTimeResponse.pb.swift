// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetLocalTimeResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetLocalTimeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: POGOProtos_Networking_Responses_GetLocalTimeResponse.Status = .unset

  public var localTimes: [POGOProtos_Networking_Responses_GetLocalTimeResponse.LocalTime] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorUnknown // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorUnknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorUnknown: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct LocalTime {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var timestampMs: Int64 = 0

    public var year: Int32 = 0

    public var month: Int32 = 0

    public var dayOfMonth: Int32 = 0

    public var dayOfWeek: Int32 = 0

    public var hours: Int32 = 0

    public var minutes: Int32 = 0

    public var seconds: Int32 = 0

    public var milliseconds: Int32 = 0

    public var timezoneID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GetLocalTimeResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GetLocalTimeResponse.Status] = [
    .unset,
    .success,
    .errorUnknown,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetLocalTimeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetLocalTimeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "local_times"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.localTimes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unset {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.localTimes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.localTimes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetLocalTimeResponse, rhs: POGOProtos_Networking_Responses_GetLocalTimeResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.localTimes != rhs.localTimes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetLocalTimeResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_UNKNOWN"),
  ]
}

extension POGOProtos_Networking_Responses_GetLocalTimeResponse.LocalTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_GetLocalTimeResponse.protoMessageName + ".LocalTime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_ms"),
    2: .same(proto: "year"),
    3: .same(proto: "month"),
    4: .standard(proto: "day_of_month"),
    5: .standard(proto: "day_of_week"),
    6: .same(proto: "hours"),
    7: .same(proto: "minutes"),
    8: .same(proto: "seconds"),
    9: .same(proto: "milliseconds"),
    10: .standard(proto: "timezone_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestampMs) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.year) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.month) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.dayOfMonth) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.dayOfWeek) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.hours) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.minutes) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.seconds) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.milliseconds) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.timezoneID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.timestampMs, fieldNumber: 1)
    }
    if self.year != 0 {
      try visitor.visitSingularInt32Field(value: self.year, fieldNumber: 2)
    }
    if self.month != 0 {
      try visitor.visitSingularInt32Field(value: self.month, fieldNumber: 3)
    }
    if self.dayOfMonth != 0 {
      try visitor.visitSingularInt32Field(value: self.dayOfMonth, fieldNumber: 4)
    }
    if self.dayOfWeek != 0 {
      try visitor.visitSingularInt32Field(value: self.dayOfWeek, fieldNumber: 5)
    }
    if self.hours != 0 {
      try visitor.visitSingularInt32Field(value: self.hours, fieldNumber: 6)
    }
    if self.minutes != 0 {
      try visitor.visitSingularInt32Field(value: self.minutes, fieldNumber: 7)
    }
    if self.seconds != 0 {
      try visitor.visitSingularInt32Field(value: self.seconds, fieldNumber: 8)
    }
    if self.milliseconds != 0 {
      try visitor.visitSingularInt32Field(value: self.milliseconds, fieldNumber: 9)
    }
    if !self.timezoneID.isEmpty {
      try visitor.visitSingularStringField(value: self.timezoneID, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetLocalTimeResponse.LocalTime, rhs: POGOProtos_Networking_Responses_GetLocalTimeResponse.LocalTime) -> Bool {
    if lhs.timestampMs != rhs.timestampMs {return false}
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.dayOfMonth != rhs.dayOfMonth {return false}
    if lhs.dayOfWeek != rhs.dayOfWeek {return false}
    if lhs.hours != rhs.hours {return false}
    if lhs.minutes != rhs.minutes {return false}
    if lhs.seconds != rhs.seconds {return false}
    if lhs.milliseconds != rhs.milliseconds {return false}
    if lhs.timezoneID != rhs.timezoneID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
