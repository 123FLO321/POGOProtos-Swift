// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/OpenGiftResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_OpenGiftResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_OpenGiftResponse.Result = .unset

  public var items: POGOProtos_Inventory_Loot {
    get {return _items ?? POGOProtos_Inventory_Loot()}
    set {_items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return self._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {self._items = nil}

  public var eggPokemon: POGOProtos_Data_PokemonData {
    get {return _eggPokemon ?? POGOProtos_Data_PokemonData()}
    set {_eggPokemon = newValue}
  }
  /// Returns true if `eggPokemon` has been explicitly set.
  public var hasEggPokemon: Bool {return self._eggPokemon != nil}
  /// Clears the value of `eggPokemon`. Subsequent reads from it will return its default value.
  public mutating func clearEggPokemon() {self._eggPokemon = nil}

  public var updatedFriendshipData: POGOProtos_Data_Friends_FriendshipLevelData {
    get {return _updatedFriendshipData ?? POGOProtos_Data_Friends_FriendshipLevelData()}
    set {_updatedFriendshipData = newValue}
  }
  /// Returns true if `updatedFriendshipData` has been explicitly set.
  public var hasUpdatedFriendshipData: Bool {return self._updatedFriendshipData != nil}
  /// Clears the value of `updatedFriendshipData`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedFriendshipData() {self._updatedFriendshipData = nil}

  public var friendProfile: POGOProtos_Data_Player_PlayerPublicProfile {
    get {return _friendProfile ?? POGOProtos_Data_Player_PlayerPublicProfile()}
    set {_friendProfile = newValue}
  }
  /// Returns true if `friendProfile` has been explicitly set.
  public var hasFriendProfile: Bool {return self._friendProfile != nil}
  /// Clears the value of `friendProfile`. Subsequent reads from it will return its default value.
  public mutating func clearFriendProfile() {self._friendProfile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorUnknown // = 2
    case errorPlayerBagFull // = 3
    case errorPlayerLimitReached // = 4
    case errorGiftDoesNotExist // = 5
    case errorFriendNotFound // = 6
    case errorInvalidPlayerID // = 7
    case errorFriendUpdate // = 8
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorUnknown
      case 3: self = .errorPlayerBagFull
      case 4: self = .errorPlayerLimitReached
      case 5: self = .errorGiftDoesNotExist
      case 6: self = .errorFriendNotFound
      case 7: self = .errorInvalidPlayerID
      case 8: self = .errorFriendUpdate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorUnknown: return 2
      case .errorPlayerBagFull: return 3
      case .errorPlayerLimitReached: return 4
      case .errorGiftDoesNotExist: return 5
      case .errorFriendNotFound: return 6
      case .errorInvalidPlayerID: return 7
      case .errorFriendUpdate: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _items: POGOProtos_Inventory_Loot? = nil
  fileprivate var _eggPokemon: POGOProtos_Data_PokemonData? = nil
  fileprivate var _updatedFriendshipData: POGOProtos_Data_Friends_FriendshipLevelData? = nil
  fileprivate var _friendProfile: POGOProtos_Data_Player_PlayerPublicProfile? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_OpenGiftResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_OpenGiftResponse.Result] = [
    .unset,
    .success,
    .errorUnknown,
    .errorPlayerBagFull,
    .errorPlayerLimitReached,
    .errorGiftDoesNotExist,
    .errorFriendNotFound,
    .errorInvalidPlayerID,
    .errorFriendUpdate,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_OpenGiftResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenGiftResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "items"),
    3: .standard(proto: "egg_pokemon"),
    4: .standard(proto: "updated_friendship_data"),
    5: .standard(proto: "friend_profile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularMessageField(value: &self._items)
      case 3: try decoder.decodeSingularMessageField(value: &self._eggPokemon)
      case 4: try decoder.decodeSingularMessageField(value: &self._updatedFriendshipData)
      case 5: try decoder.decodeSingularMessageField(value: &self._friendProfile)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if let v = self._items {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._eggPokemon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._updatedFriendshipData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._friendProfile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_OpenGiftResponse, rhs: POGOProtos_Networking_Responses_OpenGiftResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._items != rhs._items {return false}
    if lhs._eggPokemon != rhs._eggPokemon {return false}
    if lhs._updatedFriendshipData != rhs._updatedFriendshipData {return false}
    if lhs._friendProfile != rhs._friendProfile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_OpenGiftResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_UNKNOWN"),
    3: .same(proto: "ERROR_PLAYER_BAG_FULL"),
    4: .same(proto: "ERROR_PLAYER_LIMIT_REACHED"),
    5: .same(proto: "ERROR_GIFT_DOES_NOT_EXIST"),
    6: .same(proto: "ERROR_FRIEND_NOT_FOUND"),
    7: .same(proto: "ERROR_INVALID_PLAYER_ID"),
    8: .same(proto: "ERROR_FRIEND_UPDATE"),
  ]
}
