// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetRaidDetailsResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetRaidDetailsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lobby: POGOProtos_Data_Raid_Lobby {
    get {return _lobby ?? POGOProtos_Data_Raid_Lobby()}
    set {_lobby = newValue}
  }
  /// Returns true if `lobby` has been explicitly set.
  public var hasLobby: Bool {return self._lobby != nil}
  /// Clears the value of `lobby`. Subsequent reads from it will return its default value.
  public mutating func clearLobby() {self._lobby = nil}

  public var raidBattle: POGOProtos_Data_Battle_Battle {
    get {return _raidBattle ?? POGOProtos_Data_Battle_Battle()}
    set {_raidBattle = newValue}
  }
  /// Returns true if `raidBattle` has been explicitly set.
  public var hasRaidBattle: Bool {return self._raidBattle != nil}
  /// Clears the value of `raidBattle`. Subsequent reads from it will return its default value.
  public mutating func clearRaidBattle() {self._raidBattle = nil}

  public var playerCanJoinLobby: Bool = false

  public var result: POGOProtos_Networking_Responses_GetRaidDetailsResponse.Result = .unset

  public var raidInfo: POGOProtos_Data_Raid_RaidInfo {
    get {return _raidInfo ?? POGOProtos_Data_Raid_RaidInfo()}
    set {_raidInfo = newValue}
  }
  /// Returns true if `raidInfo` has been explicitly set.
  public var hasRaidInfo: Bool {return self._raidInfo != nil}
  /// Clears the value of `raidInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRaidInfo() {self._raidInfo = nil}

  public var ticketUsed: Bool = false

  public var freeTicketAvailable: Bool = false

  public var throwsRemaining: Int32 = 0

  public var receivedRewards: Bool = false

  public var numPlayersInLobby: Int32 = 0

  public var serverMs: Int64 = 0

  public var serverInstance: Int32 = 0

  public var displayHighUserWarning: Bool = false

  public var numFriendInvitesRemaining: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorNotInRange // = 2
    case errorRaidCompleted // = 3
    case errorRaidUnavailable // = 4
    case errorPlayerBelowMinimumLevel // = 5
    case errorPoiInaccessible // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorNotInRange
      case 3: self = .errorRaidCompleted
      case 4: self = .errorRaidUnavailable
      case 5: self = .errorPlayerBelowMinimumLevel
      case 6: self = .errorPoiInaccessible
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorNotInRange: return 2
      case .errorRaidCompleted: return 3
      case .errorRaidUnavailable: return 4
      case .errorPlayerBelowMinimumLevel: return 5
      case .errorPoiInaccessible: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _lobby: POGOProtos_Data_Raid_Lobby? = nil
  fileprivate var _raidBattle: POGOProtos_Data_Battle_Battle? = nil
  fileprivate var _raidInfo: POGOProtos_Data_Raid_RaidInfo? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GetRaidDetailsResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GetRaidDetailsResponse.Result] = [
    .unset,
    .success,
    .errorNotInRange,
    .errorRaidCompleted,
    .errorRaidUnavailable,
    .errorPlayerBelowMinimumLevel,
    .errorPoiInaccessible,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetRaidDetailsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetRaidDetailsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lobby"),
    2: .standard(proto: "raid_battle"),
    3: .standard(proto: "player_can_join_lobby"),
    4: .same(proto: "result"),
    5: .standard(proto: "raid_info"),
    6: .standard(proto: "ticket_used"),
    7: .standard(proto: "free_ticket_available"),
    8: .standard(proto: "throws_remaining"),
    9: .standard(proto: "received_rewards"),
    10: .standard(proto: "num_players_in_lobby"),
    11: .standard(proto: "server_ms"),
    12: .standard(proto: "server_instance"),
    13: .standard(proto: "display_high_user_warning"),
    14: .standard(proto: "num_friend_invites_remaining"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lobby)
      case 2: try decoder.decodeSingularMessageField(value: &self._raidBattle)
      case 3: try decoder.decodeSingularBoolField(value: &self.playerCanJoinLobby)
      case 4: try decoder.decodeSingularEnumField(value: &self.result)
      case 5: try decoder.decodeSingularMessageField(value: &self._raidInfo)
      case 6: try decoder.decodeSingularBoolField(value: &self.ticketUsed)
      case 7: try decoder.decodeSingularBoolField(value: &self.freeTicketAvailable)
      case 8: try decoder.decodeSingularInt32Field(value: &self.throwsRemaining)
      case 9: try decoder.decodeSingularBoolField(value: &self.receivedRewards)
      case 10: try decoder.decodeSingularInt32Field(value: &self.numPlayersInLobby)
      case 11: try decoder.decodeSingularInt64Field(value: &self.serverMs)
      case 12: try decoder.decodeSingularInt32Field(value: &self.serverInstance)
      case 13: try decoder.decodeSingularBoolField(value: &self.displayHighUserWarning)
      case 14: try decoder.decodeSingularInt32Field(value: &self.numFriendInvitesRemaining)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lobby {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._raidBattle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.playerCanJoinLobby != false {
      try visitor.visitSingularBoolField(value: self.playerCanJoinLobby, fieldNumber: 3)
    }
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 4)
    }
    if let v = self._raidInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.ticketUsed != false {
      try visitor.visitSingularBoolField(value: self.ticketUsed, fieldNumber: 6)
    }
    if self.freeTicketAvailable != false {
      try visitor.visitSingularBoolField(value: self.freeTicketAvailable, fieldNumber: 7)
    }
    if self.throwsRemaining != 0 {
      try visitor.visitSingularInt32Field(value: self.throwsRemaining, fieldNumber: 8)
    }
    if self.receivedRewards != false {
      try visitor.visitSingularBoolField(value: self.receivedRewards, fieldNumber: 9)
    }
    if self.numPlayersInLobby != 0 {
      try visitor.visitSingularInt32Field(value: self.numPlayersInLobby, fieldNumber: 10)
    }
    if self.serverMs != 0 {
      try visitor.visitSingularInt64Field(value: self.serverMs, fieldNumber: 11)
    }
    if self.serverInstance != 0 {
      try visitor.visitSingularInt32Field(value: self.serverInstance, fieldNumber: 12)
    }
    if self.displayHighUserWarning != false {
      try visitor.visitSingularBoolField(value: self.displayHighUserWarning, fieldNumber: 13)
    }
    if self.numFriendInvitesRemaining != 0 {
      try visitor.visitSingularInt32Field(value: self.numFriendInvitesRemaining, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetRaidDetailsResponse, rhs: POGOProtos_Networking_Responses_GetRaidDetailsResponse) -> Bool {
    if lhs._lobby != rhs._lobby {return false}
    if lhs._raidBattle != rhs._raidBattle {return false}
    if lhs.playerCanJoinLobby != rhs.playerCanJoinLobby {return false}
    if lhs.result != rhs.result {return false}
    if lhs._raidInfo != rhs._raidInfo {return false}
    if lhs.ticketUsed != rhs.ticketUsed {return false}
    if lhs.freeTicketAvailable != rhs.freeTicketAvailable {return false}
    if lhs.throwsRemaining != rhs.throwsRemaining {return false}
    if lhs.receivedRewards != rhs.receivedRewards {return false}
    if lhs.numPlayersInLobby != rhs.numPlayersInLobby {return false}
    if lhs.serverMs != rhs.serverMs {return false}
    if lhs.serverInstance != rhs.serverInstance {return false}
    if lhs.displayHighUserWarning != rhs.displayHighUserWarning {return false}
    if lhs.numFriendInvitesRemaining != rhs.numFriendInvitesRemaining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetRaidDetailsResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_NOT_IN_RANGE"),
    3: .same(proto: "ERROR_RAID_COMPLETED"),
    4: .same(proto: "ERROR_RAID_UNAVAILABLE"),
    5: .same(proto: "ERROR_PLAYER_BELOW_MINIMUM_LEVEL"),
    6: .same(proto: "ERROR_POI_INACCESSIBLE"),
  ]
}
