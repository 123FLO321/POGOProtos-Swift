// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/CatchPokemonResponse.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct POGOProtos_Networking_Responses_CatchPokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: POGOProtos_Networking_Responses_CatchPokemonResponse.CatchStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var missPercent: Double {
    get {return _storage._missPercent}
    set {_uniqueStorage()._missPercent = newValue}
  }

  var capturedPokemonID: UInt64 {
    get {return _storage._capturedPokemonID}
    set {_uniqueStorage()._capturedPokemonID = newValue}
  }

  var captureAward: POGOProtos_Data_Capture_CaptureAward {
    get {return _storage._captureAward ?? POGOProtos_Data_Capture_CaptureAward()}
    set {_uniqueStorage()._captureAward = newValue}
  }
  /// Returns true if `captureAward` has been explicitly set.
  var hasCaptureAward: Bool {return _storage._captureAward != nil}
  /// Clears the value of `captureAward`. Subsequent reads from it will return its default value.
  mutating func clearCaptureAward() {_uniqueStorage()._captureAward = nil}

  var captureReason: POGOProtos_Networking_Responses_CatchPokemonResponse.CaptureReason {
    get {return _storage._captureReason}
    set {_uniqueStorage()._captureReason = newValue}
  }

  var displayPokedexID: Int32 {
    get {return _storage._displayPokedexID}
    set {_uniqueStorage()._displayPokedexID = newValue}
  }

  var throwsRemaining: Int32 {
    get {return _storage._throwsRemaining}
    set {_uniqueStorage()._throwsRemaining = newValue}
  }

  var pokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _storage._pokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_uniqueStorage()._pokemonDisplay = newValue}
  }
  /// Returns true if `pokemonDisplay` has been explicitly set.
  var hasPokemonDisplay: Bool {return _storage._pokemonDisplay != nil}
  /// Clears the value of `pokemonDisplay`. Subsequent reads from it will return its default value.
  mutating func clearPokemonDisplay() {_uniqueStorage()._pokemonDisplay = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CatchStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case catchError // = 0
    case catchSuccess // = 1
    case catchEscape // = 2
    case catchFlee // = 3
    case catchMissed // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .catchError
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .catchError
      case 1: self = .catchSuccess
      case 2: self = .catchEscape
      case 3: self = .catchFlee
      case 4: self = .catchMissed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .catchError: return 0
      case .catchSuccess: return 1
      case .catchEscape: return 2
      case .catchFlee: return 3
      case .catchMissed: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum CaptureReason: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unset // = 0
    case `default` // = 1
    case elementalBadge // = 2
    case criticalCatch // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .default
      case 2: self = .elementalBadge
      case 3: self = .criticalCatch
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unset: return 0
      case .default: return 1
      case .elementalBadge: return 2
      case .criticalCatch: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_CatchPokemonResponse.CatchStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [POGOProtos_Networking_Responses_CatchPokemonResponse.CatchStatus] = [
    .catchError,
    .catchSuccess,
    .catchEscape,
    .catchFlee,
    .catchMissed,
  ]
}

extension POGOProtos_Networking_Responses_CatchPokemonResponse.CaptureReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [POGOProtos_Networking_Responses_CatchPokemonResponse.CaptureReason] = [
    .unset,
    .default,
    .elementalBadge,
    .criticalCatch,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_CatchPokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CatchPokemonResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "miss_percent"),
    3: .standard(proto: "captured_pokemon_id"),
    4: .standard(proto: "capture_award"),
    5: .standard(proto: "capture_reason"),
    6: .standard(proto: "display_pokedex_id"),
    7: .standard(proto: "throws_remaining"),
    8: .standard(proto: "pokemon_display"),
  ]

  fileprivate class _StorageClass {
    var _status: POGOProtos_Networking_Responses_CatchPokemonResponse.CatchStatus = .catchError
    var _missPercent: Double = 0
    var _capturedPokemonID: UInt64 = 0
    var _captureAward: POGOProtos_Data_Capture_CaptureAward? = nil
    var _captureReason: POGOProtos_Networking_Responses_CatchPokemonResponse.CaptureReason = .unset
    var _displayPokedexID: Int32 = 0
    var _throwsRemaining: Int32 = 0
    var _pokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _missPercent = source._missPercent
      _capturedPokemonID = source._capturedPokemonID
      _captureAward = source._captureAward
      _captureReason = source._captureReason
      _displayPokedexID = source._displayPokedexID
      _throwsRemaining = source._throwsRemaining
      _pokemonDisplay = source._pokemonDisplay
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._missPercent)
        case 3: try decoder.decodeSingularFixed64Field(value: &_storage._capturedPokemonID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._captureAward)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._captureReason)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._displayPokedexID)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._throwsRemaining)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._pokemonDisplay)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .catchError {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if _storage._missPercent != 0 {
        try visitor.visitSingularDoubleField(value: _storage._missPercent, fieldNumber: 2)
      }
      if _storage._capturedPokemonID != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._capturedPokemonID, fieldNumber: 3)
      }
      if let v = _storage._captureAward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._captureReason != .unset {
        try visitor.visitSingularEnumField(value: _storage._captureReason, fieldNumber: 5)
      }
      if _storage._displayPokedexID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._displayPokedexID, fieldNumber: 6)
      }
      if _storage._throwsRemaining != 0 {
        try visitor.visitSingularInt32Field(value: _storage._throwsRemaining, fieldNumber: 7)
      }
      if let v = _storage._pokemonDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: POGOProtos_Networking_Responses_CatchPokemonResponse, rhs: POGOProtos_Networking_Responses_CatchPokemonResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._missPercent != rhs_storage._missPercent {return false}
        if _storage._capturedPokemonID != rhs_storage._capturedPokemonID {return false}
        if _storage._captureAward != rhs_storage._captureAward {return false}
        if _storage._captureReason != rhs_storage._captureReason {return false}
        if _storage._displayPokedexID != rhs_storage._displayPokedexID {return false}
        if _storage._throwsRemaining != rhs_storage._throwsRemaining {return false}
        if _storage._pokemonDisplay != rhs_storage._pokemonDisplay {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_CatchPokemonResponse.CatchStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CATCH_ERROR"),
    1: .same(proto: "CATCH_SUCCESS"),
    2: .same(proto: "CATCH_ESCAPE"),
    3: .same(proto: "CATCH_FLEE"),
    4: .same(proto: "CATCH_MISSED"),
  ]
}

extension POGOProtos_Networking_Responses_CatchPokemonResponse.CaptureReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "DEFAULT"),
    2: .same(proto: "ELEMENTAL_BADGE"),
    3: .same(proto: "CRITICAL_CATCH"),
  ]
}
