// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/Social/Responses/GetNianticFriendListResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.Result = .unset

  public var nianticFriend: [POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case error // = 2
    case errorSocialGraphImportOptOut // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .error
      case 3: self = .errorSocialGraphImportOptOut
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .error: return 2
      case .errorSocialGraphImportOptOut: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct NianticFriend {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var playerID: String = String()

    public var nianticFriendInfo: [POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend.NianticFriendInfo] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct NianticFriendInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var codename: String = String()

      public var team: String = String()

      public var appKey: POGOProtos_Data_Social_Social.AppKey = .invalid

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct NianticFriendInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var codename: String = String()

    public var team: String = String()

    public var appKey: POGOProtos_Data_Social_Social.AppKey = .invalid

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.Result] = [
    .unset,
    .success,
    .error,
    .errorSocialGraphImportOptOut,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses.Social.Responses"

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetNianticFriendListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "niantic_friend"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nianticFriend) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.nianticFriend.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nianticFriend, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse, rhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.nianticFriend != rhs.nianticFriend {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR"),
    3: .same(proto: "ERROR_SOCIAL_GRAPH_IMPORT_OPT_OUT"),
  ]
}

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.protoMessageName + ".NianticFriend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_id"),
    2: .standard(proto: "niantic_friend_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.playerID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nianticFriendInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerID.isEmpty {
      try visitor.visitSingularStringField(value: self.playerID, fieldNumber: 1)
    }
    if !self.nianticFriendInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nianticFriendInfo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend, rhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend) -> Bool {
    if lhs.playerID != rhs.playerID {return false}
    if lhs.nianticFriendInfo != rhs.nianticFriendInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend.NianticFriendInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend.protoMessageName + ".NianticFriendInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codename"),
    2: .same(proto: "team"),
    3: .standard(proto: "app_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codename) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.team) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.appKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codename.isEmpty {
      try visitor.visitSingularStringField(value: self.codename, fieldNumber: 1)
    }
    if !self.team.isEmpty {
      try visitor.visitSingularStringField(value: self.team, fieldNumber: 2)
    }
    if self.appKey != .invalid {
      try visitor.visitSingularEnumField(value: self.appKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend.NianticFriendInfo, rhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriend.NianticFriendInfo) -> Bool {
    if lhs.codename != rhs.codename {return false}
    if lhs.team != rhs.team {return false}
    if lhs.appKey != rhs.appKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriendInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.protoMessageName + ".NianticFriendInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "codename"),
    2: .same(proto: "team"),
    3: .standard(proto: "app_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codename) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.team) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.appKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codename.isEmpty {
      try visitor.visitSingularStringField(value: self.codename, fieldNumber: 1)
    }
    if !self.team.isEmpty {
      try visitor.visitSingularStringField(value: self.team, fieldNumber: 2)
    }
    if self.appKey != .invalid {
      try visitor.visitSingularEnumField(value: self.appKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriendInfo, rhs: POGOProtos_Networking_Responses_Social_Responses_GetNianticFriendListResponse.NianticFriendInfo) -> Bool {
    if lhs.codename != rhs.codename {return false}
    if lhs.team != rhs.team {return false}
    if lhs.appKey != rhs.appKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
