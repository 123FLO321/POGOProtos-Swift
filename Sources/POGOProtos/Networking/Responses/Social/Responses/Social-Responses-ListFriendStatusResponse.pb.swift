// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/Social/Responses/ListFriendStatusResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Result = .unset

  public var friend: [POGOProtos_Data_Friends_FriendDetails] = []

  public var friendDetailsDebugInfo: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug {
    get {return _friendDetailsDebugInfo ?? POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug()}
    set {_friendDetailsDebugInfo = newValue}
  }
  /// Returns true if `friendDetailsDebugInfo` has been explicitly set.
  public var hasFriendDetailsDebugInfo: Bool {return self._friendDetailsDebugInfo != nil}
  /// Clears the value of `friendDetailsDebugInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFriendDetailsDebugInfo() {self._friendDetailsDebugInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorUnknown // = 2
    case exceedsMaxPlayersPerQuery // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorUnknown
      case 3: self = .exceedsMaxPlayersPerQuery
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorUnknown: return 2
      case .exceedsMaxPlayersPerQuery: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Debug {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fetchedFromDb: Int32 = 0

    public var fetchedFromFanout: Int32 = 0

    public var fetchedFromPlayerMapper: Int32 = 0

    public var fetchedFromStatusCache: Int32 = 0

    public var failedToFetch: Int32 = 0

    public var calleeList: [POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug.Callee] = []

    public var fetchedFromSameServerAsPlayer: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Callee {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var calleeID: [Int32] = []

      public var playerID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _friendDetailsDebugInfo: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Result] = [
    .unset,
    .success,
    .errorUnknown,
    .exceedsMaxPlayersPerQuery,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses.Social.Responses"

extension POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListFriendStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "friend"),
    3: .standard(proto: "friend_details_debug_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.friend) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._friendDetailsDebugInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.friend.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.friend, fieldNumber: 2)
    }
    if let v = self._friendDetailsDebugInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse, rhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.friend != rhs.friend {return false}
    if lhs._friendDetailsDebugInfo != rhs._friendDetailsDebugInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_UNKNOWN"),
    3: .same(proto: "EXCEEDS_MAX_PLAYERS_PER_QUERY"),
  ]
}

extension POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.protoMessageName + ".Debug"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fetched_from_db"),
    2: .standard(proto: "fetched_from_fanout"),
    3: .standard(proto: "fetched_from_player_mapper"),
    4: .standard(proto: "fetched_from_status_cache"),
    5: .standard(proto: "failed_to_fetch"),
    6: .standard(proto: "callee_list"),
    7: .standard(proto: "fetched_from_same_server_as_player"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.fetchedFromDb) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.fetchedFromFanout) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.fetchedFromPlayerMapper) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.fetchedFromStatusCache) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.failedToFetch) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.calleeList) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.fetchedFromSameServerAsPlayer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fetchedFromDb != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchedFromDb, fieldNumber: 1)
    }
    if self.fetchedFromFanout != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchedFromFanout, fieldNumber: 2)
    }
    if self.fetchedFromPlayerMapper != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchedFromPlayerMapper, fieldNumber: 3)
    }
    if self.fetchedFromStatusCache != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchedFromStatusCache, fieldNumber: 4)
    }
    if self.failedToFetch != 0 {
      try visitor.visitSingularInt32Field(value: self.failedToFetch, fieldNumber: 5)
    }
    if !self.calleeList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calleeList, fieldNumber: 6)
    }
    if self.fetchedFromSameServerAsPlayer != 0 {
      try visitor.visitSingularInt32Field(value: self.fetchedFromSameServerAsPlayer, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug, rhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug) -> Bool {
    if lhs.fetchedFromDb != rhs.fetchedFromDb {return false}
    if lhs.fetchedFromFanout != rhs.fetchedFromFanout {return false}
    if lhs.fetchedFromPlayerMapper != rhs.fetchedFromPlayerMapper {return false}
    if lhs.fetchedFromStatusCache != rhs.fetchedFromStatusCache {return false}
    if lhs.failedToFetch != rhs.failedToFetch {return false}
    if lhs.calleeList != rhs.calleeList {return false}
    if lhs.fetchedFromSameServerAsPlayer != rhs.fetchedFromSameServerAsPlayer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug.Callee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug.protoMessageName + ".Callee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "callee_id"),
    2: .standard(proto: "player_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.calleeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.playerID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.calleeID.isEmpty {
      try visitor.visitPackedInt32Field(value: self.calleeID, fieldNumber: 1)
    }
    if !self.playerID.isEmpty {
      try visitor.visitSingularStringField(value: self.playerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug.Callee, rhs: POGOProtos_Networking_Responses_Social_Responses_ListFriendStatusResponse.Debug.Callee) -> Bool {
    if lhs.calleeID != rhs.calleeID {return false}
    if lhs.playerID != rhs.playerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
