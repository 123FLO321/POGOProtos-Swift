// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/ReleasePokemonResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_ReleasePokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_ReleasePokemonResponse.Result = .unset

  public var candyAwarded: Int32 = 0

  public var xlCandyAwarded: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case pokemonDeployed // = 2
    case failed // = 3
    case errorPokemonIsEgg // = 4
    case errorPokemonIsBuddy // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .pokemonDeployed
      case 3: self = .failed
      case 4: self = .errorPokemonIsEgg
      case 5: self = .errorPokemonIsBuddy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .pokemonDeployed: return 2
      case .failed: return 3
      case .errorPokemonIsEgg: return 4
      case .errorPokemonIsBuddy: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_ReleasePokemonResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_ReleasePokemonResponse.Result] = [
    .unset,
    .success,
    .pokemonDeployed,
    .failed,
    .errorPokemonIsEgg,
    .errorPokemonIsBuddy,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_ReleasePokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReleasePokemonResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "candy_awarded"),
    3: .standard(proto: "xl_candy_awarded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.candyAwarded) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.xlCandyAwarded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if self.candyAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.candyAwarded, fieldNumber: 2)
    }
    if self.xlCandyAwarded != 0 {
      try visitor.visitSingularInt32Field(value: self.xlCandyAwarded, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_ReleasePokemonResponse, rhs: POGOProtos_Networking_Responses_ReleasePokemonResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.candyAwarded != rhs.candyAwarded {return false}
    if lhs.xlCandyAwarded != rhs.xlCandyAwarded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_ReleasePokemonResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "POKEMON_DEPLOYED"),
    3: .same(proto: "FAILED"),
    4: .same(proto: "ERROR_POKEMON_IS_EGG"),
    5: .same(proto: "ERROR_POKEMON_IS_BUDDY"),
  ]
}
