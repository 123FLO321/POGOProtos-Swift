// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/CheckPhotobombResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_CheckPhotobombResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: POGOProtos_Networking_Responses_CheckPhotobombResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var photobombPokemonID: POGOProtos_Enums_PokemonId {
    get {return _storage._photobombPokemonID}
    set {_uniqueStorage()._photobombPokemonID = newValue}
  }

  public var photobombPokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _storage._photobombPokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_uniqueStorage()._photobombPokemonDisplay = newValue}
  }
  /// Returns true if `photobombPokemonDisplay` has been explicitly set.
  public var hasPhotobombPokemonDisplay: Bool {return _storage._photobombPokemonDisplay != nil}
  /// Clears the value of `photobombPokemonDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearPhotobombPokemonDisplay() {_uniqueStorage()._photobombPokemonDisplay = nil}

  public var encounterID: UInt64 {
    get {return _storage._encounterID}
    set {_uniqueStorage()._encounterID = newValue}
  }

  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorPhotoPokemonInvalid // = 2
    case errorUnknown // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorPhotoPokemonInvalid
      case 3: self = .errorUnknown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorPhotoPokemonInvalid: return 2
      case .errorUnknown: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_CheckPhotobombResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_CheckPhotobombResponse.Status] = [
    .unset,
    .success,
    .errorPhotoPokemonInvalid,
    .errorUnknown,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_CheckPhotobombResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckPhotobombResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "photobomb_pokemon_id"),
    3: .standard(proto: "photobomb_pokemon_display"),
    4: .standard(proto: "encounter_id"),
    5: .same(proto: "uri"),
  ]

  fileprivate class _StorageClass {
    var _status: POGOProtos_Networking_Responses_CheckPhotobombResponse.Status = .unset
    var _photobombPokemonID: POGOProtos_Enums_PokemonId = .missingno
    var _photobombPokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
    var _encounterID: UInt64 = 0
    var _uri: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _photobombPokemonID = source._photobombPokemonID
      _photobombPokemonDisplay = source._photobombPokemonDisplay
      _encounterID = source._encounterID
      _uri = source._uri
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._photobombPokemonID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._photobombPokemonDisplay) }()
        case 4: try { try decoder.decodeSingularFixed64Field(value: &_storage._encounterID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._uri) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if _storage._photobombPokemonID != .missingno {
        try visitor.visitSingularEnumField(value: _storage._photobombPokemonID, fieldNumber: 2)
      }
      if let v = _storage._photobombPokemonDisplay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._encounterID != 0 {
        try visitor.visitSingularFixed64Field(value: _storage._encounterID, fieldNumber: 4)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_CheckPhotobombResponse, rhs: POGOProtos_Networking_Responses_CheckPhotobombResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._photobombPokemonID != rhs_storage._photobombPokemonID {return false}
        if _storage._photobombPokemonDisplay != rhs_storage._photobombPokemonDisplay {return false}
        if _storage._encounterID != rhs_storage._encounterID {return false}
        if _storage._uri != rhs_storage._uri {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_CheckPhotobombResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_PHOTO_POKEMON_INVALID"),
    3: .same(proto: "ERROR_UNKNOWN"),
  ]
}
