// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetHatchedEggsResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetHatchedEggsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var success: Bool = false

  public var pokemonID: [UInt64] = []

  public var experienceAwarded: [Int32] = []

  public var candyAwarded: [Int32] = []

  public var stardustAwarded: [Int32] = []

  public var eggKmWalked: [Float] = []

  public var hatchedPokemon: [POGOProtos_Data_PokemonData] = []

  public var xlCandyAwarded: [Int32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetHatchedEggsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetHatchedEggsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .standard(proto: "pokemon_id"),
    3: .standard(proto: "experience_awarded"),
    4: .standard(proto: "candy_awarded"),
    5: .standard(proto: "stardust_awarded"),
    6: .standard(proto: "egg_km_walked"),
    7: .standard(proto: "hatched_pokemon"),
    8: .standard(proto: "xl_candy_awarded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeRepeatedFixed64Field(value: &self.pokemonID) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.experienceAwarded) }()
      case 4: try { try decoder.decodeRepeatedInt32Field(value: &self.candyAwarded) }()
      case 5: try { try decoder.decodeRepeatedInt32Field(value: &self.stardustAwarded) }()
      case 6: try { try decoder.decodeRepeatedFloatField(value: &self.eggKmWalked) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.hatchedPokemon) }()
      case 8: try { try decoder.decodeRepeatedInt32Field(value: &self.xlCandyAwarded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.pokemonID.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.pokemonID, fieldNumber: 2)
    }
    if !self.experienceAwarded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.experienceAwarded, fieldNumber: 3)
    }
    if !self.candyAwarded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.candyAwarded, fieldNumber: 4)
    }
    if !self.stardustAwarded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.stardustAwarded, fieldNumber: 5)
    }
    if !self.eggKmWalked.isEmpty {
      try visitor.visitPackedFloatField(value: self.eggKmWalked, fieldNumber: 6)
    }
    if !self.hatchedPokemon.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hatchedPokemon, fieldNumber: 7)
    }
    if !self.xlCandyAwarded.isEmpty {
      try visitor.visitPackedInt32Field(value: self.xlCandyAwarded, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetHatchedEggsResponse, rhs: POGOProtos_Networking_Responses_GetHatchedEggsResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.pokemonID != rhs.pokemonID {return false}
    if lhs.experienceAwarded != rhs.experienceAwarded {return false}
    if lhs.candyAwarded != rhs.candyAwarded {return false}
    if lhs.stardustAwarded != rhs.stardustAwarded {return false}
    if lhs.eggKmWalked != rhs.eggKmWalked {return false}
    if lhs.hatchedPokemon != rhs.hatchedPokemon {return false}
    if lhs.xlCandyAwarded != rhs.xlCandyAwarded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
