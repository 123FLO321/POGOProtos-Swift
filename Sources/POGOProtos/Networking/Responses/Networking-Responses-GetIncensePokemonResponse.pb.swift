// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetIncensePokemonResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetIncensePokemonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_GetIncensePokemonResponse.Result = .incenseEncounterUnknown

  public var pokemonID: POGOProtos_Enums_PokemonId = .missingno

  public var latitude: Double = 0

  public var longitude: Double = 0

  public var encounterLocation: String = String()

  public var encounterID: UInt64 = 0

  public var disappearTimestampMs: Int64 = 0

  public var pokemonDisplay: POGOProtos_Data_PokemonDisplay {
    get {return _pokemonDisplay ?? POGOProtos_Data_PokemonDisplay()}
    set {_pokemonDisplay = newValue}
  }
  /// Returns true if `pokemonDisplay` has been explicitly set.
  public var hasPokemonDisplay: Bool {return self._pokemonDisplay != nil}
  /// Clears the value of `pokemonDisplay`. Subsequent reads from it will return its default value.
  public mutating func clearPokemonDisplay() {self._pokemonDisplay = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case incenseEncounterUnknown // = 0
    case incenseEncounterAvailable // = 1
    case incenseEncounterNotAvailable // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .incenseEncounterUnknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .incenseEncounterUnknown
      case 1: self = .incenseEncounterAvailable
      case 2: self = .incenseEncounterNotAvailable
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .incenseEncounterUnknown: return 0
      case .incenseEncounterAvailable: return 1
      case .incenseEncounterNotAvailable: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _pokemonDisplay: POGOProtos_Data_PokemonDisplay? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GetIncensePokemonResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GetIncensePokemonResponse.Result] = [
    .incenseEncounterUnknown,
    .incenseEncounterAvailable,
    .incenseEncounterNotAvailable,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetIncensePokemonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetIncensePokemonResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "pokemon_id"),
    3: .same(proto: "latitude"),
    4: .same(proto: "longitude"),
    5: .standard(proto: "encounter_location"),
    6: .standard(proto: "encounter_id"),
    7: .standard(proto: "disappear_timestamp_ms"),
    8: .standard(proto: "pokemon_display"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeSingularEnumField(value: &self.pokemonID)
      case 3: try decoder.decodeSingularDoubleField(value: &self.latitude)
      case 4: try decoder.decodeSingularDoubleField(value: &self.longitude)
      case 5: try decoder.decodeSingularStringField(value: &self.encounterLocation)
      case 6: try decoder.decodeSingularFixed64Field(value: &self.encounterID)
      case 7: try decoder.decodeSingularInt64Field(value: &self.disappearTimestampMs)
      case 8: try decoder.decodeSingularMessageField(value: &self._pokemonDisplay)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .incenseEncounterUnknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if self.pokemonID != .missingno {
      try visitor.visitSingularEnumField(value: self.pokemonID, fieldNumber: 2)
    }
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 3)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 4)
    }
    if !self.encounterLocation.isEmpty {
      try visitor.visitSingularStringField(value: self.encounterLocation, fieldNumber: 5)
    }
    if self.encounterID != 0 {
      try visitor.visitSingularFixed64Field(value: self.encounterID, fieldNumber: 6)
    }
    if self.disappearTimestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.disappearTimestampMs, fieldNumber: 7)
    }
    if let v = self._pokemonDisplay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetIncensePokemonResponse, rhs: POGOProtos_Networking_Responses_GetIncensePokemonResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.pokemonID != rhs.pokemonID {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.encounterLocation != rhs.encounterLocation {return false}
    if lhs.encounterID != rhs.encounterID {return false}
    if lhs.disappearTimestampMs != rhs.disappearTimestampMs {return false}
    if lhs._pokemonDisplay != rhs._pokemonDisplay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetIncensePokemonResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INCENSE_ENCOUNTER_UNKNOWN"),
    1: .same(proto: "INCENSE_ENCOUNTER_AVAILABLE"),
    2: .same(proto: "INCENSE_ENCOUNTER_NOT_AVAILABLE"),
  ]
}
