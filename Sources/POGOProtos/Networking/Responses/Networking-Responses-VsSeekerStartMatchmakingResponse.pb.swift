// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/VsSeekerStartMatchmakingResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse.Result = .unset

  public var challenge: POGOProtos_Data_Combat_CombatChallenge {
    get {return _challenge ?? POGOProtos_Data_Combat_CombatChallenge()}
    set {_challenge = newValue}
  }
  /// Returns true if `challenge` has been explicitly set.
  public var hasChallenge: Bool {return self._challenge != nil}
  /// Clears the value of `challenge`. Subsequent reads from it will return its default value.
  public mutating func clearChallenge() {self._challenge = nil}

  public var queueID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Result: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case successOpponentFound // = 1
    case successQueued // = 2
    case errorNoBattlePassesLeft // = 3
    case errorAlreadyInQueue // = 4
    case errorVsSeekerPlayerInWrongSeason // = 5
    case errorPlayerHasNoVsSeeker // = 6
    case errorAccessDenied // = 7
    case errorPokemonLineupIneligibleForLeague // = 8
    case errorVsSeekerNotActivated // = 9
    case errorTemporarilyUnavailable // = 10
    case errorExceededLimit // = 11
    case errorQueueTooFull // = 12
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .successOpponentFound
      case 2: self = .successQueued
      case 3: self = .errorNoBattlePassesLeft
      case 4: self = .errorAlreadyInQueue
      case 5: self = .errorVsSeekerPlayerInWrongSeason
      case 6: self = .errorPlayerHasNoVsSeeker
      case 7: self = .errorAccessDenied
      case 8: self = .errorPokemonLineupIneligibleForLeague
      case 9: self = .errorVsSeekerNotActivated
      case 10: self = .errorTemporarilyUnavailable
      case 11: self = .errorExceededLimit
      case 12: self = .errorQueueTooFull
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .successOpponentFound: return 1
      case .successQueued: return 2
      case .errorNoBattlePassesLeft: return 3
      case .errorAlreadyInQueue: return 4
      case .errorVsSeekerPlayerInWrongSeason: return 5
      case .errorPlayerHasNoVsSeeker: return 6
      case .errorAccessDenied: return 7
      case .errorPokemonLineupIneligibleForLeague: return 8
      case .errorVsSeekerNotActivated: return 9
      case .errorTemporarilyUnavailable: return 10
      case .errorExceededLimit: return 11
      case .errorQueueTooFull: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _challenge: POGOProtos_Data_Combat_CombatChallenge? = nil
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse.Result] = [
    .unset,
    .successOpponentFound,
    .successQueued,
    .errorNoBattlePassesLeft,
    .errorAlreadyInQueue,
    .errorVsSeekerPlayerInWrongSeason,
    .errorPlayerHasNoVsSeeker,
    .errorAccessDenied,
    .errorPokemonLineupIneligibleForLeague,
    .errorVsSeekerNotActivated,
    .errorTemporarilyUnavailable,
    .errorExceededLimit,
    .errorQueueTooFull,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VsSeekerStartMatchmakingResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "challenge"),
    3: .standard(proto: "queue_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._challenge) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.queueID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unset {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if let v = self._challenge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.queueID.isEmpty {
      try visitor.visitSingularStringField(value: self.queueID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse, rhs: POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs._challenge != rhs._challenge {return false}
    if lhs.queueID != rhs.queueID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_VsSeekerStartMatchmakingResponse.Result: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS_OPPONENT_FOUND"),
    2: .same(proto: "SUCCESS_QUEUED"),
    3: .same(proto: "ERROR_NO_BATTLE_PASSES_LEFT"),
    4: .same(proto: "ERROR_ALREADY_IN_QUEUE"),
    5: .same(proto: "ERROR_VS_SEEKER_PLAYER_IN_WRONG_SEASON"),
    6: .same(proto: "ERROR_PLAYER_HAS_NO_VS_SEEKER"),
    7: .same(proto: "ERROR_ACCESS_DENIED"),
    8: .same(proto: "ERROR_POKEMON_LINEUP_INELIGIBLE_FOR_LEAGUE"),
    9: .same(proto: "ERROR_VS_SEEKER_NOT_ACTIVATED"),
    10: .same(proto: "ERROR_TEMPORARILY_UNAVAILABLE"),
    11: .same(proto: "ERROR_EXCEEDED_LIMIT"),
    12: .same(proto: "ERROR_QUEUE_TOO_FULL"),
  ]
}
