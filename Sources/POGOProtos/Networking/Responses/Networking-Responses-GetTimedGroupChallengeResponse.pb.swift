// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: POGOProtos/Networking/Responses/GetTimedGroupChallengeResponse.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var challengeDefinition: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition {
    get {return _storage._challengeDefinition ?? POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition()}
    set {_uniqueStorage()._challengeDefinition = newValue}
  }
  /// Returns true if `challengeDefinition` has been explicitly set.
  public var hasChallengeDefinition: Bool {return _storage._challengeDefinition != nil}
  /// Clears the value of `challengeDefinition`. Subsequent reads from it will return its default value.
  public mutating func clearChallengeDefinition() {_uniqueStorage()._challengeDefinition = nil}

  public var currentScore: Int32 {
    get {return _storage._currentScore}
    set {_uniqueStorage()._currentScore = newValue}
  }

  public var playerScore: Int32 {
    get {return _storage._playerScore}
    set {_uniqueStorage()._playerScore = newValue}
  }

  public var activeCityHash: String {
    get {return _storage._activeCityHash}
    set {_uniqueStorage()._activeCityHash = newValue}
  }

  public var activeCityLocalizationKeyChanges: [String] {
    get {return _storage._activeCityLocalizationKeyChanges}
    set {_uniqueStorage()._activeCityLocalizationKeyChanges = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case success // = 1
    case errorUnknown // = 2
    case errorChallengeNotFound // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .success
      case 2: self = .errorUnknown
      case 3: self = .errorChallengeNotFound
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .success: return 1
      case .errorUnknown: return 2
      case .errorChallengeNotFound: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct TimedGroupChallengeDefinition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var challengeID: String {
      get {return _storage._challengeID}
      set {_uniqueStorage()._challengeID = newValue}
    }

    public var display: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay {
      get {return _storage._display ?? POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay()}
      set {_uniqueStorage()._display = newValue}
    }
    /// Returns true if `display` has been explicitly set.
    public var hasDisplay: Bool {return _storage._display != nil}
    /// Clears the value of `display`. Subsequent reads from it will return its default value.
    public mutating func clearDisplay() {_uniqueStorage()._display = nil}

    public var startTimeMsInclusive: Int64 {
      get {return _storage._startTimeMsInclusive}
      set {_uniqueStorage()._startTimeMsInclusive = newValue}
    }

    public var endTimeMsExclusive: Int64 {
      get {return _storage._endTimeMsExclusive}
      set {_uniqueStorage()._endTimeMsExclusive = newValue}
    }

    public var challengeCriteria: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria {
      get {return _storage._challengeCriteria ?? POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria()}
      set {_uniqueStorage()._challengeCriteria = newValue}
    }
    /// Returns true if `challengeCriteria` has been explicitly set.
    public var hasChallengeCriteria: Bool {return _storage._challengeCriteria != nil}
    /// Clears the value of `challengeCriteria`. Subsequent reads from it will return its default value.
    public mutating func clearChallengeCriteria() {_uniqueStorage()._challengeCriteria = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct GroupChallengeCriteria {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var challengeType: POGOProtos_Enums_QuestType {
      get {return _storage._challengeType}
      set {_uniqueStorage()._challengeType = newValue}
    }

    public var challengeGoal: POGOProtos_Data_Quests_QuestGoal {
      get {return _storage._challengeGoal ?? POGOProtos_Data_Quests_QuestGoal()}
      set {_uniqueStorage()._challengeGoal = newValue}
    }
    /// Returns true if `challengeGoal` has been explicitly set.
    public var hasChallengeGoal: Bool {return _storage._challengeGoal != nil}
    /// Clears the value of `challengeGoal`. Subsequent reads from it will return its default value.
    public mutating func clearChallengeGoal() {_uniqueStorage()._challengeGoal = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct GroupChallengeDisplay {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var title: String = String()

    public var boostRewards: [POGOProtos_Networking_Responses_GetTodayViewResponse.TodayView.TodayViewSection.EventSection.BonusBox] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.Status] = [
    .unset,
    .success,
    .errorUnknown,
    .errorChallengeNotFound,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "POGOProtos.Networking.Responses"

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTimedGroupChallengeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "challenge_definition"),
    3: .standard(proto: "current_score"),
    4: .standard(proto: "player_score"),
    5: .standard(proto: "active_city_hash"),
    6: .standard(proto: "active_city_localization_key_changes"),
  ]

  fileprivate class _StorageClass {
    var _status: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.Status = .unset
    var _challengeDefinition: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition? = nil
    var _currentScore: Int32 = 0
    var _playerScore: Int32 = 0
    var _activeCityHash: String = String()
    var _activeCityLocalizationKeyChanges: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _challengeDefinition = source._challengeDefinition
      _currentScore = source._currentScore
      _playerScore = source._playerScore
      _activeCityHash = source._activeCityHash
      _activeCityLocalizationKeyChanges = source._activeCityLocalizationKeyChanges
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._challengeDefinition)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._currentScore)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._playerScore)
        case 5: try decoder.decodeSingularStringField(value: &_storage._activeCityHash)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._activeCityLocalizationKeyChanges)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .unset {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._challengeDefinition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._currentScore != 0 {
        try visitor.visitSingularInt32Field(value: _storage._currentScore, fieldNumber: 3)
      }
      if _storage._playerScore != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerScore, fieldNumber: 4)
      }
      if !_storage._activeCityHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._activeCityHash, fieldNumber: 5)
      }
      if !_storage._activeCityLocalizationKeyChanges.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._activeCityLocalizationKeyChanges, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse, rhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._status != rhs_storage._status {return false}
        if _storage._challengeDefinition != rhs_storage._challengeDefinition {return false}
        if _storage._currentScore != rhs_storage._currentScore {return false}
        if _storage._playerScore != rhs_storage._playerScore {return false}
        if _storage._activeCityHash != rhs_storage._activeCityHash {return false}
        if _storage._activeCityLocalizationKeyChanges != rhs_storage._activeCityLocalizationKeyChanges {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "SUCCESS"),
    2: .same(proto: "ERROR_UNKNOWN"),
    3: .same(proto: "ERROR_CHALLENGE_NOT_FOUND"),
  ]
}

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.protoMessageName + ".TimedGroupChallengeDefinition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "challenge_id"),
    2: .same(proto: "display"),
    3: .standard(proto: "start_time_ms_inclusive"),
    4: .standard(proto: "end_time_ms_exclusive"),
    5: .standard(proto: "challenge_criteria"),
  ]

  fileprivate class _StorageClass {
    var _challengeID: String = String()
    var _display: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay? = nil
    var _startTimeMsInclusive: Int64 = 0
    var _endTimeMsExclusive: Int64 = 0
    var _challengeCriteria: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _challengeID = source._challengeID
      _display = source._display
      _startTimeMsInclusive = source._startTimeMsInclusive
      _endTimeMsExclusive = source._endTimeMsExclusive
      _challengeCriteria = source._challengeCriteria
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._challengeID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._display)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._startTimeMsInclusive)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._endTimeMsExclusive)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._challengeCriteria)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._challengeID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._challengeID, fieldNumber: 1)
      }
      if let v = _storage._display {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._startTimeMsInclusive != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTimeMsInclusive, fieldNumber: 3)
      }
      if _storage._endTimeMsExclusive != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTimeMsExclusive, fieldNumber: 4)
      }
      if let v = _storage._challengeCriteria {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition, rhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.TimedGroupChallengeDefinition) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._challengeID != rhs_storage._challengeID {return false}
        if _storage._display != rhs_storage._display {return false}
        if _storage._startTimeMsInclusive != rhs_storage._startTimeMsInclusive {return false}
        if _storage._endTimeMsExclusive != rhs_storage._endTimeMsExclusive {return false}
        if _storage._challengeCriteria != rhs_storage._challengeCriteria {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.protoMessageName + ".GroupChallengeCriteria"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "challenge_type"),
    2: .standard(proto: "challenge_goal"),
  ]

  fileprivate class _StorageClass {
    var _challengeType: POGOProtos_Enums_QuestType = .questUnknownType
    var _challengeGoal: POGOProtos_Data_Quests_QuestGoal? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _challengeType = source._challengeType
      _challengeGoal = source._challengeGoal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._challengeType)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._challengeGoal)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._challengeType != .questUnknownType {
        try visitor.visitSingularEnumField(value: _storage._challengeType, fieldNumber: 1)
      }
      if let v = _storage._challengeGoal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria, rhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeCriteria) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._challengeType != rhs_storage._challengeType {return false}
        if _storage._challengeGoal != rhs_storage._challengeGoal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.protoMessageName + ".GroupChallengeDisplay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "boost_rewards"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.boostRewards)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.boostRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.boostRewards, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay, rhs: POGOProtos_Networking_Responses_GetTimedGroupChallengeResponse.GroupChallengeDisplay) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.boostRewards != rhs.boostRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
